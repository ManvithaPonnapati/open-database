import os, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom openbabel import OBAtom, OBElementTable123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFAtom = namedtuple('Atom',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  ['smina_name', 'adname', 'ad_radius', 'ad_depth', 'ad_solvation', 'ad_volume', 'covalent_radius',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                   'xs_radius', 'xs_hydrophobe', 'xs_donor', 'xs_acceptor', 'ad_heteroatom'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFAtom_dict = [123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Hydrogen", "H", 1.000000, 0.020000, 0.000510, 0.000000, 0.370000, 0.000000, False, False, False, False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["PolarHydrogen", "HD", 1.000000, 0.020000, 0.000510, 0.000000, 0.370000, 0.000000, False, False, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        *["AliphaticCarbonXSHydrophobe", "C", 2.000000, 0.150000, -0.001430, 33.510300, 0.770000, 1.900000, True, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF          False, False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["AliphaticCarbonXSNonHydrophobe", "C", 2.000000, 0.150000, -0.001430, 33.510300, 0.770000, 1.900000, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           False, False, False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["AromaticCarbonXSHydrophobe", "A", 2.000000, 0.150000, -0.000520, 33.510300, 0.770000, 1.900000, True, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           False, False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["AromaticCarbonXSNonHydrophobe", "A", 2.000000, 0.150000, -0.000520, 33.510300, 0.770000, 1.900000, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           False, False, False]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Nitrogen", "N", 1.750000, 0.160000, -0.001620, 22.449300, 0.750000, 1.800000, False, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["NitrogenXSDonor", "N", 1.750000, 0.160000, -0.001620, 22.449300, 0.750000, 1.800000, False, True, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["NitrogenXSDonorAcceptor", "NA", 1.750000, 0.160000, -0.001620, 22.449300, 0.750000, 1.800000, False, True,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["NitrogenXSAcceptor", "NA", 1.750000, 0.160000, -0.001620, 22.449300, 0.750000, 1.800000, False, False, True,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Oxygen", "O", 1.600000, 0.200000, -0.002510, 17.157300, 0.730000, 1.700000, False, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["OxygenXSDonor", "O", 1.600000, 0.200000, -0.002510, 17.157300, 0.730000, 1.700000, False, True, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["OxygenXSDonorAcceptor", "OA", 1.600000, 0.200000, -0.002510, 17.157300, 0.730000, 1.700000, False, True,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["OxygenXSAcceptor", "OA", 1.600000, 0.200000, -0.002510, 17.157300, 0.730000, 1.700000, False, False, True,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Sulfur", "S", 2.000000, 0.200000, -0.002140, 33.510300, 1.020000, 2.000000, False, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["SulfurAcceptor", "SA", 2.000000, 0.200000, -0.002140, 33.510300, 1.020000, 2.000000, False, False, False,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Phosphorus", "P", 2.100000, 0.200000, -0.001100, 38.792400, 1.060000, 2.100000, False, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Fluorine", "F", 1.545000, 0.080000, -0.001100, 15.448000, 0.710000, 1.500000, True, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Chlorine", "Cl", 2.045000, 0.276000, -0.001100, 35.823500, 0.990000, 1.800000, True, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Bromine", "Br", 2.165000, 0.389000, -0.001100, 42.566100, 1.140000, 2.000000, True, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Iodine", "I", 2.360000, 0.550000, -0.001100, 55.058500, 1.330000, 2.200000, True, False, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Magnesium", "Mg", 0.650000, 0.875000, -0.001100, 1.560000, 1.300000, 1.200000, False, True, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Manganese", "Mn", 0.650000, 0.875000, -0.001100, 2.140000, 1.390000, 1.200000, False, True, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Zinc", "Zn", 0.740000, 0.550000, -0.001100, 1.700000, 1.310000, 1.200000, False, True, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Calcium", "Ca", 0.990000, 0.550000, -0.001100, 2.770000, 1.740000, 1.200000, False, True, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["Iron", "Fe", 0.650000, 0.010000, -0.001100, 1.840000, 1.250000, 1.200000, False, True, False, True]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Atom(*["GenericMetal", "M", 1.200000, 0.000000, -0.001100, 22.449300, 1.750000, 1.200000, False, True, False, True])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFMental = ["Cu", "Fe", "Na", "k", "Hg", "Co", "U", "Cd", "Ni"]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFetab = OBElementTable()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass atom_parser:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, obatom):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.coords = np.array([obatom.x(), obatom.y(), obatom.z()])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.charge = obatom.GetPartialCharge()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.atom_id = self.parse_atom(obatom)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def getAtomIdxByName(self, element_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Some Atom have same element name, their type will be adjusted later123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param element_name: string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return: namedtuple Atom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for idx, atom in enumerate(Atom_dict):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if atom.adname == element_name:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Atom name {} can not find in collection'.element_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def type_shift(self, origin_idx, suffix):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Get idx of same atom but different attribute( hydrophobe, doner, acceptor ect.)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param origin_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param suffix: string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return: idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        adname = Atom_dict[origin_idx].adname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for idx, atom in enumerate(Atom_dict):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if atom.adname == adname and atom.smina_name.endswith(suffix):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception("Cannot find {} {}.".format(suffix, adname))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def adjust_info(self, obatom):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        If a atom is bonded to polarhydrogen or heteroatom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param obatom: openbabel OBAtom istance123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return: bond_2_hd, bond_2_hetero : boolean123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bonds = list(openbabel.OBAtomBondIter(obatom))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_id = obatom.GetId()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bond_2_hd = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bond_2_hetero = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for bond in bonds:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            begin = bond.GetBeginAtom().GetId()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            end = bond.GetEndAtom().GetId()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if atom_id == begin:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                link_atom = bond.GetEndAtom()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            elif atom_id == end:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                link_atom = bond.GetBeginAtom()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("Wrong bond")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if link_atom.IsHydrogen():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # all the remained hydrogen is polarhydrogen123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                bond_2_hd = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if link_atom.IsHeteroatom():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                bond_2_hetero = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return bond_2_hd, bond_2_hetero123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def parse_atom(self, obatom):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # parse basic atom type from obatom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        element_name = etab.GetSymbol(obatom.GetAtomicNum());123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if obatom.IsHydrogen():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'HD'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif obatom.IsCarbon() and obatom.IsAromatic():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'A'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif obatom.IsOxygen():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'OA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif obatom.IsNitrogen() and obatom.IsHbondAcceptor():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif obatom.IsSulfur() and obatom.IsHbondAcceptor():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'SA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if element_name in Mental:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element_name = 'M'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        idx = self.getAtomIdxByName(element_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # typ shift if a atom is bonded to specific type of atom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bond_2_hd, bond_2_hetero = self.adjust_info(obatom)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if element_name == 'A' or element_name == 'C':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if bond_2_hetero:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSNonHydrophobe')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSHydrophobe')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif element_name == 'N':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if bond_2_hd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSDonor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'Nitrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif element_name == 'NA':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if bond_2_hd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSDonorAcceptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSAcceptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif element_name == 'O':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if bond_2_hd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSDonor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'Oxygen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif element_name == 'OA':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if bond_2_hd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSDonorAcceptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                idx = self.type_shift(idx, 'XSAcceptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_atom(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return Atom_dict[self.atom_id]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF