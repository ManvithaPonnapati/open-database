import os,sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport matplotlib.pyplot as plt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom matplotlib import cm123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom mpl_toolkits.mplot3d import Axes3D123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFAxis = namedtuple('Axis',['label','dim'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass Draw:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,energy_map,dest_folder='images'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.coords = np.load(energy_map)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            exit(1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.set_fix_axis()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        count = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        while os.path.exists(os.path.abspath(dest_folder+'_'+str(count))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            count +=1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.mkdir(dest_folder+'_'+str(count))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.dest_folder = dest_folder+'_'+str(count)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def set_fix_axis(self,axis='X'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if axis.upper() == 'X':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.fix = Axis('X',0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.expand=[Axis('Y',1),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         Axis('Z',2)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif axis.upper() == 'Y':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.fix = Axis('Y', 1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.expand = [Axis('X', 0),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                           Axis('Z', 2)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif axis.upper() == 'Z':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.fix = Axis('Z', 2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.expand = [Axis('X', 0),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                           Axis('Y', 1)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def save_image(self,sample_on_fix_axis=10):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        edge_size = np.sqrt(self.coords.shape[0]).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        fixed_axis_value = np.unique(self.coords[:,self.fix.dim])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sample_index = np.unique(np.linspace(0,len(fixed_axis_value),sample_on_fix_axis).astype(int))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sample_value = fixed_axis_value[sample_index]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for value in sample_value:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            slice_on_fixed_axis = self.coords[self.coords[:,self.fix.dim]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            X = slice_on_fixed_axis[:, self.expand[0].dim].reshape(edge_size, edge_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            Y = slice_on_fixed_axis[:, self.expand[1].dim].reshape(edge_size, edge_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            Z = slice_on_fixed_axis[:, -1].reshape(edge_size,edge_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            fig = plt.figure()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ax = fig.add_subplot(111, projection='3d')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cset = ax.contour(X, Y, Z, zdir='z', offset=np.min(Z), cmap=cm.coolwarm)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cset = ax.contour(X, Y, Z, zdir='x', offset=np.min(X), cmap=cm.coolwarm)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cset = ax.contour(X, Y, Z, zdir='y', offset=np.max(Y), cmap=cm.coolwarm)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ax.set_xlabel(self.expand[0].label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ax.set_ylabel(self.expand[1].label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ax.set_zlabel('Energy')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            image_name = '{}_{}.svg'.format(self.fix.label,"{:.3f}".format(value).replace('-','m').replace('.','_'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            plt.savefig(os.path.join(self.dest_folder, image_name),transparent=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    args = sys.argv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(args)<2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "not enough argument, energy map file needed"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        draw = Draw(args[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        draw.save_image()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF