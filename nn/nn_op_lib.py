import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _matmul_point_pairs_by_kernel(pixel_size,point_pairs,rel_coords,kernel,d_features,s_features=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    d_features will be concatenated to s_features when given123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param pixel_size:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param point_pairs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param rel_coords:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param kernel:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param s_features:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param d_features:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo assert shapes123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_dims = tf.shape(kernel)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    conv_dims = tf.shape(kernel)[0:3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_size = tf.cast(tf.shape(kernel)[0:3], tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if s_features is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        feature_pairs = tf.gather(d_features, point_pairs[:, 1], validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        s_features = tf.gather(s_features,point_pairs[:,0], validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        d_features = tf.gather(d_features,point_pairs[:,1], validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        feature_pairs = tf.concat([s_features,d_features], axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # flatten kernel from 5D into 3D123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_flatshape = tf.concat([[tf.reduce_prod(k_dims[0:3])],k_dims[3:5]],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_flat = tf.reshape(kernel,k_flatshape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find indices on the flattened kernel to gather/slice123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_gatheridx = tf.cast((rel_coords / pixel_size) + (k_size/2) + 0.5,tf.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_gatheridx = tf.reduce_sum(k_gatheridx * tf.stack([conv_dims[0] * conv_dims[1], conv_dims[1], 1]),1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # gather slices of the kernels123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    k_shards = tf.gather(k_flat,k_gatheridx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    convout = tf.matmul(tf.expand_dims(feature_pairs,1),k_shards)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    convout = tf.squeeze(convout)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return convout