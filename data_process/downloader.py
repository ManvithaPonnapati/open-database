import os, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport getopt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy  as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport multiprocessing123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport threading123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass parseRCSB:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF       pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def error_log(self, content):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with open(FLAGS.log_file, 'a') as fout:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            fout.write(content)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def downloads(self, item):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('cd {}'.format(FLAGS.rowdata_folder))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        address = FLAGS.address(item)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('wget {}'.format(address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdbname = item.lower()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_folder = os.path.join(FLAGS.splited_ligand_folder, pdbname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(ligand_folder):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.mkdir(ligand_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parsed = prody.parsePDB(os.path.join(FLAGS.rowdata_folder, item + '.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.error_log('can not parse {}.\n'.format(item))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        hetero = parsed.select('(hetero and not water) or resname ATP or resname ADP')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = parsed.select('protein or nucleic')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_flags = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for each in prody.HierView(hetero).iterResidues():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if each.numAtoms() <= 10:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_flags = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ResId = each.getResindex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_path = os.path.join(FLAGS.splited_ligand_folder, pdbname,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                           "{}_{}_ligand.pdb".format(pdbname, ResId))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if not os.path.exists(os.path.dirname(ligand_path)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    os.mkdir(os.path.dirname(ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(ligand_path, each)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if ligand_flags:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            receptor_path = os.path.join(FLAGS.splited_receptor_folder, pdbname + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            prody.writePDB(receptor_path, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.error_log("{} doesn't convert, not ligand have more than 10 atoms.\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def thread_convert(self, func, dataframe, index):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in index:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            func(dataframe[i])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def process_convert(self, func, dataframe, index):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # linspace contain end value but range don't123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # so we use edge[i+1] to select value in index123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # end should be len(index)-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(index) < FLAGS.thread_num:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i in index:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                func(dataframe[i])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        edge = np.linspace(0, len(index) - 1, FLAGS.thread_num + 1).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        thread_list = [threading.Thread(target=self.thread_convert,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        args=(func,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                              dataframe,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                              range(index[edge[i]],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                    index[edge[i + 1]])))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                       for i in range(FLAGS.thread_num)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for t in thread_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # print "thread start: ",t123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            t.start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for t in thread_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            t.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def convert(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        according the result of 'database_from_csv'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        running multiprocess to get result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param dataframe: pandas.DataFrame123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                          string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param coded: bool123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        convert_func = self.downloads123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # when there's not enough entry to comvert , decrease thread's num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(FLAGS.pdb_list) < FLAGS.process_num * FLAGS.thread_num:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i in range(len(FLAGS.pdb_list)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                convert_func(FLAGS.pdb_list[i])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        edge = np.linspace(0, len(FLAGS.pdb_list), FLAGS.process_num + 1).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        process_list = [multiprocessing.Process(target=self.process_convert,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                args=(convert_func,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                      FLAGS.pdb_list,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                      range(edge[i],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                            edge[i + 1])))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        for i in range(FLAGS.process_num)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for p in process_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "process start: ", p123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            p.start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for p in process_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "process end: ", p123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            p.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass FLAGS:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    workplace = '/n/scratch2/xl198/data/rcsb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rowdata_folder = os.path.join(workplace, 'row')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    splited_receptor_folder = os.path.join(workplace, 'row_receptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    splited_ligand_folder = os.path.join(workplace, 'ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    address = lambda PDB: 'https://files.rcsb.org/download/' + PDB + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log_file = 'error.log'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    thread_num = 16123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    process_num = 12123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef parse_FLAG():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    content = open('target_PDB.txt').readline()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    content = content.split(',')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    content = map(lambda x: x.strip(), content)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    FLAGS.pdb_list = content123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parse_FLAG()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser = parseRCSB()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.convert()