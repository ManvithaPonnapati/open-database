#!/usr/bin/env python123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# $Header: /opt/cvs/python/packages/share1.5/AutoDockTools/Utilities24/prepare_dpf42.py,v 1.6.4.4 2012/07/16 22:51:09 rhuey Exp $123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os.path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom MolKit import Read123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom AutoDockTools.DockingParameters import DockingParameters, genetic_algorithm_list4_2, \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                genetic_algorithm_local_search_list4_2, local_search_list4_2,\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                simulated_annealing_list4_2, epdb_list4_2,\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                DockingParameter42FileMaker123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom AutoDockTools.atomTypeTools import AutoDock4_AtomTyper123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom numpy import oldnumeric as Numeric123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef usage():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "Usage: prepare_dpf42.py -l pdbqt_file -r pdbqt_file"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    -l ligand_filename"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    -r receptor_filename"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "Optional parameters:"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-o output dpf_filename]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-i template dpf_filename]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-x flexres_filename]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-p parameter_name=new_value]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-k list of parameters to write]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-e write epdb dpf ]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-v] verbose output"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-L] use local search parameters"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-S] use simulated annealing search parameters"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-s] seed population using ligand's present conformation"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "    [-A] use only root atom coordinates to calculate about"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "Prepare a docking parameter file (DPF) for AutoDock42."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "   The DPF will by default be <ligand>_<receptor>.dpf. This"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print "may be overridden using the -o flag."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    import getopt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    import sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        opt_list, args = getopt.getopt(sys.argv[1:], 'sLShveAl:r:i:o:x:p:k:')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except getopt.GetoptError, msg:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'prepare_dpf42.py: %s' % msg123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.exit(2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_filename = ligand_filename = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dpf_filename = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    template_filename = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    flexres_filename = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parameters = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parameter_list = genetic_algorithm_local_search_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pop_seed = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    local_search = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    verbose = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    epdb_output = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    about_root_atoms_only = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for o, a in opt_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: print "o=", o, ' a=', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-v', '--v'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            verbose = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'verbose output'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-l', '--l'):   #ligand filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'ligand_filename =', ligand_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-r', '--r'):   #receptor filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            receptor_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'receptor_filename =', receptor_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-x', '--x'):   #flexres_filename 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            flexres_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'flexres_filename =', flexres_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-i', '--i'):   #input reference123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            template_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'template_filename =', template_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-o', '--o'):   #output filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            dpf_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'output dpf_filename =', dpf_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-p', '--p'):   #parameter123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameters.append(a)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'parameters =', parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-e', '--e'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            epdb_output = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'output epdb file'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameter_list = epdb_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-k', '--k'):   #parameter_list_to_write123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameter_list = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'parameter_list =', parameter_list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-L', '--L'):   #parameter_list_to_write123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            local_search = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameter_list = local_search_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'parameter_list =', parameter_list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-S', '--S'):   #parameter_list_to_write123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameter_list = simulated_annealing_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'parameter_list =', parameter_list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-A', '--A'):   #set about to average of coords of root atoms123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            about_root_atoms_only = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'about_root_atoms_only =', about_root_atoms_only123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-h', '--'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            sys.exit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-s'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pop_seed = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if (not receptor_filename) or (not ligand_filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "prepare_dpf42.py: ligand and receptor filenames"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                    must be specified."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.exit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #11/2011: fixing local_search bugs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # specifically: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 1. quaternion0 0 0 0 0  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 2. dihe0 0 0 0 0 0 <one per rotatable bond>123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 3. about == tran0 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 4. remove tstep  qstep and dstep123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 5. remove ls_search_freq123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #local_search = local_search_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #parameter_list =local_search_list4_2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dm = DockingParameter42FileMaker(verbose=verbose)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if template_filename is not None:  #setup values by reading dpf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo.read(template_filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dm.set_ligand(ligand_filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dm.set_receptor(receptor_filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if flexres_filename is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        flexmol = Read(flexres_filename)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        flexres_types = flexmol.allAtoms.autodock_element123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_types = dm.dpo['ligand_types']['value'].split()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_types = lig_types123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for t in flexres_types:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if t not in all_types: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                all_types.append(t)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_types_string = all_types[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(all_types)>1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for t in all_types[1:]:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                all_types_string = all_types_string + " " + t123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if verbose: print "adding ", t, " to all_types->", all_types_string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo['ligand_types']['value'] = all_types_string 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo['flexres']['value'] = flexres_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo['flexres_flag']['value'] = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #dm.set_docking_parameters( ga_num_evals=1750000,ga_pop_size=150, ga_run=20, rmstol=2.0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    kw = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for p in parameters:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        key,newvalue = string.split(p, '=')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #detect string reps of lists: eg "[1.,1.,1.]"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if key=='parameter_file':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if key in parameter_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print "removing parameter_file keyword"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                parameter_list.remove('parameter_file')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parameter_list.insert(1, key)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            dm.dpo['custom_parameter_file']['value']=1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if newvalue[0]=='[':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            nv = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for item in newvalue[1:-1].split(','):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                nv.append(float(item))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #print "nv=", nv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            newvalue = nv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw[key] = nv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print "newvalue=", nv, " kw=", kw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif key=='epdb_flag':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print "setting epdb_flag to", newvalue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw['epdb_flag'] = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif 'flag' in key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print "key=", key, ' newvalue=', newvalue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if newvalue in ['1','0']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                newvalue = int(newvalue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if newvalue =='False':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                newvalue = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if newvalue =='True':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                newvalue = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif local_search and 'about' in key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw['about'] = newvalue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw['tran0'] = newvalue     123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:         123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw[key] = newvalue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print "set ", key, " to ", newvalue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: print "calling set_docking_parameters with kw=", kw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        apply(dm.set_docking_parameters, (), kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if key not in parameter_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #special hack for output_pop_file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if key=='output_pop_file':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                parameter_list.insert(parameter_list.index('set_ga'), key)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                parameter_list.append(key) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if about_root_atoms_only:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lines = dm.ligand.parser.allLines123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for ix, lll in enumerate(lines):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if lll.find("ROOT")==0: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                root_ix = ix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if lll.find("ENDROOT")==0: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                endroot_ix = ix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                break123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        last_ix = endroot_ix - (root_ix + 1) #47-(18+1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crds = dm.ligand.allAtoms[0:last_ix].coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        about = (Numeric.add.reduce(crds)/float(len(crds))).tolist()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo['about']['value'] = (round(about[0],3), round(about[1],3), round(about[2],3))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if epdb_output:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.dpo['epdb_flag']['value'] = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.write_dpf(dpf_filename, parm_list=epdb_list4_2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: print "not epdb_output"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dm.write_dpf(dpf_filename, parameter_list, pop_seed)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#prepare_dpf42.py -l indinavir.pdbqt -r 1hsg.pdbqt -p ga_num_evals=25000000 -p ga_pop_size=150 -p ga_run=17 -i ref.dpf -o testing.dpf 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF