'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFThis script is used to generate docking result (electronic map) and calculating docking scores123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys,io,os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import wraps123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport commands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom Autodock_Config import autodock_store_dir,pythonsh_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFtemp_pdb_PREFIX = '/tmp'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#temp_pdb_PREFIX = '/home/wy/Documents/BCH_coding/pdb_data_extracter/data'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport gzip123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFWORK_DIR = os.getcwd()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFCURRENT_DIR = os.getcwd()+'/autodock_utility'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFBUFSIZE = 1024 * 8123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass GZipTool:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, bufSize):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.bufSize = bufSize123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fin = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fout = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def compress(self, src, dst):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fin = open(src, 'rb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fout = gzip.open(dst, 'wb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.__in2out()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def decompress(self, gzFile, dst):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fin = gzip.open(gzFile, 'rb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fout = open(dst, 'wb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.__in2out()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def cp(self, src ,dst):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fin = open(src,'rb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fout = open(dst,'wb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.__in2out()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __in2out(self, ):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        while True:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            buf = self.fin.read(self.bufSize)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(buf) < 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                break123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.fout.write(buf)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fin.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fout.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef pdb_to_mol2(src,tar, addH=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    convert pdb ligands into mol2 files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param src:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param tar:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if addH==True:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = 'babel -h -ipdb {} -omol2 {} '.format(src, tar)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = 'babel -ipdb {} -omol2 {} '.format(src, tar)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef set_new_folder(PDBname,storedir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param PDBname:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param storedir:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.chdir(storedir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(os.path.join(storedir,PDBname)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.mkdir(os.path.join(storedir,PDBname))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.chdir(os.getcwd())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef fn_timer(function):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    This is the decorator used for time counting issue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Need not understand this one. It has nothing to do with generating files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param function:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: no return. just print and record the time the decorated program ran.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    @wraps(function)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def function_timer(*args, **kwargs):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        t0 = time.time()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        result = function(*args, **kwargs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        t1 = time.time()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print ("Total time running %s: %s seconds" %123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF               (function.func_name, str(t1 - t0))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF               )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return function_timer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef copy_pdbfile(filepos,tarpos,zipped=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    zipped = (filepos.split('.')[-1]=='gz')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if zipped:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tool = GZipTool(BUFSIZE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tool.decompress(filepos,tarpos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise TypeError("unable to decompress at "+filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tool = GZipTool(BUFSIZE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tool.cp(filepos, tarpos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise TypeError123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF@fn_timer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef repair_pdbfile(filename,pdbname,OVERWRITE=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    repair pdbfiles with add hydrogen123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param filename:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param OVERWRITE:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #cmd =os.path.join(pythonsh_dir, 'pythonsh') + ' prepare_receptor4.py -v -r {0} -o {0}qt -A bonds_hydrogens -U nphs_lps_waters'.format(real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cmd ='babel -h {} {} '.format(filename,filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    stat ,out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #cmd = os.path.join(pythonsh_dir, 'pythonsh') + ' pdbqt_to_pdb.py -f {0}qt -o {0}'.format(real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # cmd ='obabel {} -opdb -O {} -h'.format(real_filepos,real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print stat, out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #    print out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #    return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print real_filepos123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Convert into pdb files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.system('cut -c-66 {} > {}'.format(real_filepos+'qt',real_filepos))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #os.remove(real_filepos+'qt')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #return os.path.join(os.getcwd(),real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_receptor(filedir,filename,pdbname,pdbresid='',OVERWRITE=True,repair=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prepare receptor pdbqt files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param filename: the file name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param pdbname:  pdbname (used for naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param OVERWRITE: False = not overwrite existing file , True= can overwrite123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if filename.split('.')[-1]!='pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'Error! when prepare receptor'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_dir = filedir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_filepos= os.path.join(real_dir,filename.split('/')[-1])+'qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(real_filepos) or OVERWRITE:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if repair == True:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cmd = os.path.join(pythonsh_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               'pythonsh') + ' prepare_receptor4.py -r {0} -o {1} -A bonds_hydrogens -U nphs_lps_waters'.format(filename,real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cmd =os.path.join(pythonsh_dir, 'pythonsh') + ' prepare_receptor4.py -r {0} -o {1} -U nphs_lps_waters'.format(filename, real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stat ,out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print stat,out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if stat==256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print 'Ok'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_ligand(filedir,filename,pdbname,pdbresid='',OVERWRITE=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prepare ligand pdbqt files ( note different from receptor's)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param filename: the file name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param pdbname: pdbname (used for naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param OVERWRITE: False = not overwrite existing file , True= can overwrite123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if filename.split('.')[-1]!='pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'Error! when prepare ligand'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_dir =  filedir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_filepos = os.path.join(real_dir, filename.split('/')[-1]) + 'qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(real_filepos) or OVERWRITE:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd =os.path.join(pythonsh_dir, 'pythonsh') + ' prepare_ligand4.py -A bonds_hydrogens -l {0} -o {1} -g'.format(filename, real_filepos)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stat ,out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if stat==256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print 'Ok'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF@fn_timer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef do_auto_grid(filedir,receptor,ligand,center=None,BOX_size=1,BOX_num=21):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #extract names123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rname = receptor.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lname = ligand.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbname = rname.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbresid = rname.split('_')[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(receptor) or not os.path.exists(ligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if rname.split('.')[-1]=='pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_receptor(filedir,receptor,pdbname,pdbresid):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rname+='qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if rname.split('.')[-1]!='pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if lname.split('.')[-1] == 'pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_ligand(filedir,ligand,pdbname,pdbresid):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lname+='qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if lname.split('.')[-1] != 'pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get absolute names and locations123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    naming = "".join(rname.split('.')[:-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_dir = filedir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    glg_output_dir = os.path.join(real_dir,naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rloc = os.path.join(real_dir,rname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lloc = os.path.join(real_dir,lname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # prepare gpf files with customized parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if center is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = os.path.join(pythonsh_dir, 'pythonsh') + \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF              ' prepare_gpf4.py -l {} -r {} -o {}.gpf -p spacing={} -p npts=\"{},{},{}\" '.format(lloc,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rloc,glg_output_dir,BOX_size,BOX_num,BOX_num,BOX_num)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = os.path.join(pythonsh_dir,'pythonsh') + \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  ' prepare_gpf4.py -l {} -r {} -o {}.gpf -p spacing={} ' \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  '-p npts=\"{},{},{}\" -p gridcenter=\"{},{},{}\" '.format(lloc,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    rloc ,glg_output_dir, BOX_size,BOX_num,BOX_num,BOX_num,center[0],center[1],center[2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Suppose autogrid and autodock has installed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(real_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cmd = 'autogrid4 -p {0}.gpf -l {0}.glg'.format(naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Anything goes wrong , return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if stat==256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print out123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print 'Ok'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF@fn_timer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef do_auto_dock(filedir,receptor,ligand,center=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rname = receptor.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lname = ligand.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbname = rname.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbresid = rname.split('_')[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(receptor) or not os.path.exists(ligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #first prepare auto_grid maps123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    do_auto_grid(filedir,receptor,ligand,center)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if rname.split('.')[-1] == 'pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_receptor(filedir,receptor,pdbname,pdbresid):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rname += 'qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if rname.split('.')[-1] != 'pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if lname.split('.')[-1] == 'pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_ligand(filedir,ligand,pdbname,pdbresid):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lname += 'qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if lname.split('.')[-1] != 'pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(CURRENT_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #This part is just to get the absolute direction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Because some scripts can only detect files in their direction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #which is not a good news123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    naming = "".join(rname.split('.')[:-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filedir = receptor.split('/')[:-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dlg_output_dir = os.path.join(filedir, naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rloc = os.path.join(filedir, rname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lloc = os.path.join(filedir, lname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare dpf files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cmd=os.path.join(pythonsh_dir,'pythonsh') + \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ' prepare_dpf4.py -l {} -r {} -o {}.dpf'.format(lloc, rloc, dlg_output_dir )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # If anything goes wrong , return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Suppose autogrid and autodock has installed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(filedir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Do real auto dock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cmd = 'autodock4 -p {0}.dpf -l {0}.dlg'.format(naming)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    stat, out = commands.getstatusoutput(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if stat == 256:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF@fn_timer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef do_auto_vina_score(filedir,receptor,ligand,center,Box=20):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # receptor_file_loc = os.path.join('data/',self.PDBname+'_{}_2.pdb'.format(ResId))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #extract filename we want123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rname = receptor.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lname = ligand.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbname = rname.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdbresid = rname.split('_')[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(receptor) or not os.path.exists(ligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if rname.split('.')[-1]=='pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_receptor(filedir,receptor,pdbname,pdbresid):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rname+='qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if rname.split('.')[-1]!='pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #prepare ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if lname.split('.')[-1] == 'pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print 'here'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not prepare_ligand(filedir,ligand,pdbname,pdbresid,OVERWRITE=True):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lname+='qt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if lname.split('.')[-1] != 'pdbqt':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print 'here'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get the absolute location123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    real_dir = filedir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(real_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # write config files123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with open('vina_config.txt', 'w') as f:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    receptor = {}\n'.format(rname))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    ligand = {}\n'.format(lname))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    center_x = {}\n'.format(center[0]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    center_y = {}\n'.format(center[1]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    center_z = {}\n'.format(center[2]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    size_x = {}\n'.format(Box))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    size_y = {}\n'.format(Box))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write('    size_z = {}\n'.format(Box))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #f.write('    cpu = 1\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Now do docking:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Suppose vina is installed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    command = os.popen('vina --config vina_config.txt --score_only')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.chdir(WORK_DIR)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dict_key = ('Affinity','gauss 1','gauss 2','repulsion','hydrophobic','Hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Ans = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for k in dict_key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Ans[k]='NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find the score in result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ls = command.read()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print ls123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for line in ls.split('\n'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if '#' in line:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for each in dict_key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if each in line:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # find the real number in this line123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                real_num = re.compile(r"[-+]?\d+\.\d+")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                score = real_num.search(line.split(':')[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if score:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    Ans[each]=float(score.group())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    Ans[each]='NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return Ans123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef vector_from_gridmap(mapfilename,BOX=21):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Get the123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param mapfilename:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with open(mapfilename,'rb') as f:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ct=0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            answer=[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for line in f:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ct+=1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if ct>=7:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    answer.append(float(line.rstrip('\n')))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return answer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef fetch_gridmaps(filedir, map_prefix ,BOX=21):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Convert group of gridmaps into vectors (8*21*21*21 for now)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param map_prefix: the file prefix , since autogrid's naming rules is same, so just provide anyname except .[].map123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param BOX:  Boxsize123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    type= ['A','C','d','e','HD','N','NA','OA']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    vectors= []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for each in type:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            real_dir = filedir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            real_pos= os.path.join(real_dir,map_prefix+'.'+each+'.map')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            vectors.append(vector_from_gridmap(real_pos,BOX=BOX))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return vectors123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return 'NA'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__=='__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Example on how to finish auto docking process123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    set_new_folder('1j8q','/home/wy/Documents/BCH_coding/pdb_data_extracter/result')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #protein only123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    do_auto_dock('/home/wy/Documents/BCH_coding/pdb_data_extracter/data/1j8q_147_pure.pdb',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 '/home/wy/Documents/BCH_coding/pdb_data_extracter/data/fake-ligand.pdb',center=[21.36,10.47,81.86])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #ligand only123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    do_auto_dock('/home/wy/Documents/BCH_coding/pdb_data_extracter/data/1j8q_147_ligand.pdb',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 '/home/wy/Documents/BCH_coding/pdb_data_extracter/data/fake-ligand.pdb', center=[21.36, 10.47, 81.86])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #protein-ligand complex123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    do_auto_dock('/home/wy/Documents/BCH_coding/pdb_data_extracter/data/1j8q_147_complex.pdb',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 '/home/wy/Documents/BCH_coding/pdb_data_extracter/data/fake-ligand.pdb', center=[21.36, 10.47, 81.86])