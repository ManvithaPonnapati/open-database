#!/usr/bin/env /home/wy/Application/mgltools_x86_64Linux2_1.5.6/bin/pythonsh123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# $Header: /opt/cvs/python/packages/share1.5/AutoDockTools/Utilities24/prepare_ligand4.py,v 1.10 2010/07/31 00:14:13 rhuey Exp $123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom MolKit import Read123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom AutoDockTools.MoleculePreparation import AD4LigandPreparation123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    import sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    import getopt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def usage():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        "Print helpful, accurate usage statement to stdout."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Usage: prepare_ligand4.py -l filename"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "    Description of command..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "         -l     ligand_filename (.pdb or .mol2 or .pdbq format)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "    Optional parameters:"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-v]    verbose output"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-o pdbqt_filename] (default output filename is ligand_filename_stem + .pdbqt)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-d]    dictionary to write types list and number of active torsions "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-A]    type(s) of repairs to make:\n\t\t bonds_hydrogens, bonds, hydrogens (default is to do no repairs)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-C]    do not add charges (default is to add gasteiger charges)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-p]    preserve input charges on atom type, eg -p Zn"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "               (default is not to preserve charges on any specific atom type)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-U]    cleanup type:\n\t\t nphs_lps, nphs, lps, '' (default is 'nphs_lps') "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-B]    type(s) of bonds to allow to rotate "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "               (default sets 'backbone' rotatable and 'amide' + 'guanidinium' non-rotatable)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-R]    index for root"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-F]    check for and use largest non-bonded fragment (default is not to do this)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-M]    interactive (default is automatic output)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-I]    string of bonds to inactivate composed of "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                   of zero-based atom indices eg 5_13_2_10  "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                   will inactivate atoms[5]-atoms[13] bond "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                               and atoms[2]-atoms[10] bond "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                      (default is not to inactivate any specific bonds)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-Z]    inactivate all active torsions     "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                      (default is leave all rotatable active except amide and guanidinium)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-g]    attach all nonbonded fragments "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "        [-s]    attach all nonbonded singletons: "123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                   NB: sets attach all nonbonded fragments too"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "                      (default is not to do this)"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # process command arguments123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        opt_list, args = getopt.getopt(sys.argv[1:], 'l:vo:d:A:Cp:U:B:R:MFI:Zgsh')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except getopt.GetoptError, msg:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'prepare_ligand4.py: %s' %msg123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.exit(2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # initialize required parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-l: ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_filename =  None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # optional parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    verbose = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    add_bonds = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-A: repairs to make: add bonds and/or hydrogens123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    repairs = ""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-C  default: add gasteiger charges 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    charges_to_add = 'gasteiger'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-p preserve charges on specific atom types123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preserve_charge_types=''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-U: cleanup by merging nphs_lps, nphs, lps123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cleanup  = "nphs_lps"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-B named rotatable bond type(s) to allow to rotate123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #allowed_bonds = ""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    allowed_bonds = "backbone"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-r  root123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    root = 'auto'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-o outputfilename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    outputfilename = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-F check_for_fragments123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    check_for_fragments = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-I bonds_to_inactivate123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bonds_to_inactivate = ""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-Z inactivate_all_torsions123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    inactivate_all_torsions = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-g attach_nonbonded_fragments123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    attach_nonbonded_fragments = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-s attach_nonbonded_singletons123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    attach_singletons = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-m mode 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    mode = 'automatic'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #-d dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dict = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #'l:vo:d:A:CKU:B:R:MFI:Zgs'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for o, a in opt_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print "o=", o, " a=", a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-l', '--l'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_filename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set ligand_filename to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-v', '--v'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            verbose = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set verbose to ', True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-o', '--o'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            outputfilename = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set outputfilename to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-d', '--d'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            dict = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set dict to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-A', '--A'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            repairs = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set repairs to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-C', '--C'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            charges_to_add = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'do not add charges'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-p', '--p'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            preserve_charge_types+=a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            preserve_charge_types+=','123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'preserve initial charges on ', preserve_charge_types123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-U', '--U'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cleanup  = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set cleanup to merge ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-B', '--B'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            allowed_bonds = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'allow ', a, 'bonds set to rotate'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-R', '--R'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            root = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set root to ', root123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-F', '--F'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            check_for_fragments = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set check_for_fragments to True'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-M', '--M'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            mode = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set mode to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-I', '--I'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            bonds_to_inactivate = a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set bonds_to_inactivate to ', a123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-Z', '--Z'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            inactivate_all_torsions = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set inactivate_all_torsions to ', inactivate_all_torsions123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-g', '--g'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            attach_nonbonded_fragments = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set attach_nonbonded_fragments to ', attach_nonbonded_fragments123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-s', '--s'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            attach_singletons = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if verbose: print 'set attach_singletons to ', attach_singletons123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if o in ('-h', '--'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            sys.exit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not  ligand_filename:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'prepare_ligand4: ligand filename must be specified.'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        usage()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.exit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if attach_singletons:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        attach_nonbonded_fragments = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: print "using attach_singletons so attach_nonbonded_fragments also"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    mols = Read(ligand_filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if verbose: print 'read ', ligand_filename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    mol = mols[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(mols)>1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "more than one molecule in file"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #use the one molecule with the most atoms123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ctr = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for m in mols[1:]:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ctr += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(m.allAtoms)>len(mol.allAtoms):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                mol = m123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if verbose:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print "mol set to ", ctr, "th molecule with", len(mol.allAtoms), "atoms"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    coord_dict = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for a in mol.allAtoms: coord_dict[a] = a.coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    mol.buildBondsByDistance()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if charges_to_add is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        preserved = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        preserved_types = preserve_charge_types.split(',') 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for t in preserved_types:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if not len(t): continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ats = mol.allAtoms.get(lambda x: x.autodock_element==t)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for a in ats:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if a.chargeSet is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    preserved[a] = [a.chargeSet, a.charge]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if verbose:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "setting up LPO with mode=", mode,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "and outputfilename= ", outputfilename123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "and check_for_fragments=", check_for_fragments123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "and bonds_to_inactivate=", bonds_to_inactivate123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    LPO = AD4LigandPreparation(mol, mode, repairs, charges_to_add, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            cleanup, allowed_bonds, root, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            outputfilename=outputfilename,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            dict=dict, check_for_fragments=check_for_fragments,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            bonds_to_inactivate=bonds_to_inactivate, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            inactivate_all_torsions=inactivate_all_torsions,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            attach_nonbonded_fragments=attach_nonbonded_fragments,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            attach_singletons=attach_singletons)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #do something about atoms with too many bonds (?)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #FIX THIS: could be peptide ligand (???)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #          ??use isPeptide to decide chargeSet??123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if charges_to_add is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #restore any previous charges123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for atom, chargeList in preserved.items():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            atom._charges[chargeList[0]] = chargeList[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            atom.chargeSet = chargeList[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if verbose: print "returning ", mol.returnCode 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bad_list = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for a in mol.allAtoms:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if a in coord_dict.keys() and a.coords!=coord_dict[a]: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            bad_list.append(a)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(bad_list):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print len(bad_list), ' atom coordinates changed!'    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for a in bad_list:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print a.name, ":", coord_dict[a], ' -> ', a.coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if verbose: print "No change in atomic coordinates"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if mol.returnCode!=0: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.stderr.write(mol.returnMsg+"\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.exit(mol.returnCode)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# To execute this command type:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# prepare_ligand4.py -l pdb_file -v123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF