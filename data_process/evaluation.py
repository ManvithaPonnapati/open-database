import numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,sys,re,random,copy123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFevaluation the submission use map123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef parse(input_file):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parse input into a dict, it's convenient to use dict calculate map123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param input_file: path of file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: a dict key is receptor's code, value is ligands' code123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_dict = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with open(input_file) as fr:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for line in fr:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            key,value = line.strip('\n').split(',')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            value = value.split(' ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_dict[key] =value123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return input_dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef mean_average_pricision(solution,submission,n=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Calculate mean average precision123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param solution: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        key: receptor's id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        value: list of ranked ligands' id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param submission: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        key: receptor's id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        value: list of ranked ligands' id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param n:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    aps = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for key in solution.keys():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ap = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not key in submission.keys():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # if failed to predict, return a random ranked value123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            answer = solution[key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            prediction = copy.copy(answer)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            random.shuffle(prediction)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(answer)<n:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ap = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                aps.append(ap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                for i in range(n):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ligand = prediction[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    location = answer.index(ligand) if (ligand in answer) else -1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ap += (i+1.0)/(location + 1.0) if location >= 0 else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ap/= n123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                aps.append(ap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif len(submission[key])==0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ap = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            aps.append(ap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            answer = solution[key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            prediction = submission[key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(answer)<n:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ap = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                aps.append(ap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                for i in range(n):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ligand =prediction[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    location = answer.index(ligand) if (ligand in answer) else -1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ap += (i+1.0)/(location + 1.0) if location >= 0 else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ap /=n123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                aps.append(ap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return sum(aps)/len(aps)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef eval():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    solution = './solution.txt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    submission = './logs-155999_submission.txt'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print mean_average_pricision(parse(solution),parse(submission))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF