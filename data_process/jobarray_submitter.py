import os, sys, getopt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom itertools import chain123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFThis code is used to monitor the job on Orchestra123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF1. Calculate the total number of job123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF2. Check the number of current job is less than 500 then submit new job123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF3. To submit job : create a bash file to submit jobarray123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_job_num():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get how many job are there running on Orchestra123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r = os.popen('bjobs | wc -l')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num = int(r.readline().strip('\n'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef create_jobarray(base):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create jobarray.sh to submit job on Orchestra123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Jobarray_name = 'jobarray_base_' + str(base) + '.sh'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Jobarray = os.path.join(config.JOBARRAY, Jobarray_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with open(Jobarray, 'w') as job:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#!/bin/bash\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -n 1                #each  job run on 1 core\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -W 240:00            #job run 12 hour\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -J jobArray[1-1000] #job array list goes begin,begin+1,begin+2...end\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -o /dev/null        #lsf output file\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -e /dev/null       #lsf error file\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('#BSUB -q mini         #submit to "short" queue\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('export LC_CTYPE=en_US.UTF-8\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('export LC_ALL=en_US.UTF-8\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/xl198/local/lib:/home/xl198/boost/boost_1_54_0/stage/lib\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('export OMP_NUM_THREADS=1\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('export LC_ALL="en_US.UTF-8"\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('source /home/xl198/venv/data/bin/activate\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job.write('python %s %s ${LSB_JOBINDEX} \n' % (os.path.join(config._BASE_SCRIPT, 'run_obabel.py'), base))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return Jobarray123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef submit_jobarray(Jobarray, base):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r = os.popen('bsub < %s' % (Jobarray))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    submit_info = r.readline()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write(submit_info)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write("submit job %s to %s\n\n" % (base * 1000, (base + 1) * 1000))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # os.remove(Jobarray)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef job_size():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    df = pd.read_csv('/home/xl198/remark/dec_1.csv')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return len(df)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef check_loop():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    total = job_size()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # sys.stderr.write("\nConvert mol2 into pdb\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write("total commands num : %s\n" % total)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cur = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    base = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # i = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # base = offset + 1000 if offset + 1000 <= docking_num else docking_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    while (1):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # i = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if base * 1000 >= total:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            sys.stderr.write('\nFinish\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            exit(0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num = get_job_num()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if num < 500:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            Jobarray = create_jobarray(base)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            submit_jobarray(Jobarray, base)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # end = offset + 1000 if offset + 1000 <= docking_num else docking_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            base += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        time.sleep(6)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    check_loop()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF