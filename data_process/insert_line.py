import config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# import subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    This file is used to get the result form Yi123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    and then organized them into folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    and insert newline into it otherwise it can't be read into obabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF'''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert(raw_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # convert file from mol2 into pdb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    file_name = os.path.basename(raw_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = file_name.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    output_path = os.path.join(config.BASE_CONVERT2PDB, receptor_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print output_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print os.path.exists(output_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(output_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.mkdir(output_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_file_path = os.path.join(config.BASE_CONVERT, receptor_name, file_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    output_file_path = os.path.join(output_path, file_name.split('.')[0] + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.system('obabel -i mol2 %s -o pdb -O %s' % (input_file_path, output_file_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run(input_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # mkdir folder to store converted data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    file_name = os.path.basename(input_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = file_name.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    output_path = os.path.join(config.BASE_CONVERT, receptor_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(output_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.mkdir(output_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # write a new line123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    output_file_path = os.path.join(output_path, file_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with open(input_file_path) as infile:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with open(output_file_path, 'w') as outfile:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for line in infile:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                outfile.write(line)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if line == '@<TRIPOS>MOLECULE\n':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    outfile.write('\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_all(num=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    base = config.BASE_YI123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    files = os.listdir(base)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    size = num if num != None else len(files)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write("Convert %s files\n" % size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write("first file is %s\n" % (os.path.join(base, files[0])))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i in range(size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(os.path.join(base, files[i]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.stderr.write("write %d/%d\n" % (i + 1, size))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run_convert(base, offset):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    base_path = config.BASE_YI123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    files = os.listdir(base_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # print base123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # print offset123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    index = base * 1000 + offset123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(files) > index:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(os.path.join(base_path, files[index]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        convert(os.path.join(base_path, files[index]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    args = sys.argv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    base = int(args[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    offset = int(args[2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    run_convert(base, offset)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stderr.write("run convert %s" % (base * 1000 + offset))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    main()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF