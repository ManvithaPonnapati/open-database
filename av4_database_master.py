import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time,os,re,prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass stats:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    start = time.time()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligands_parsed = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligands_failed = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# crawls the database with crystal ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# looks which of them have docked ligands - if can acquire (?) and have pdb(?) - if can acquire123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# moves all of them in a single folder with protein together123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# writes statistics123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# TODO make exceptions more informative123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert_database_to_av4(database_path,positives_folder,decoys_folder,receptors_folder):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Crawls the folder (receptors in this case) and saves every PDB it finds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    into .npy array with 1) coordinates 2) mapped to the atom name number """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # make a directory where the av4 form of the output will be written123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    output_path = str(database_path+'_av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(output_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(output_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def save_av4(filepath,labels,elements,multiframe_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        labels = np.asarray(labels,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elements = np.asarray(elements,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        multiframe_coords = np.asarray(multiframe_coords,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(multiframe_coords[:,0]) == int(len(elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if multiframe_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if not int(len(labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception ('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if not (int(len(multiframe_coords[0, 0, :]) == int(len(labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        number_of_examples = np.array([len(labels)], dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record = number_of_examples.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += labels.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += elements.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += multiframe_coords.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f = open(filepath + ".av4", 'w')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write(av4_record)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for dirpath,dirnames,filenames in os.walk(database_path +"/"+ positives_folder):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                path_to_positive = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # find path to folder with decoys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                path_to_decoys = re.sub(positives_folder,decoys_folder,str(os.path.abspath(dirpath)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # find path to the file with receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                path_to_receptor = re.sub(positives_folder,receptors_folder,str(os.path.abspath(dirpath))+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    prody_receptor = prody.parsePDB(path_to_receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    prody_positive = prody.parsePDB(path_to_positive)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # ligand_cords will store multiple frames123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    multiframe_ligand_coords = prody_positive.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    labels = np.array([1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # find all decoys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    if os.path.exists(path_to_decoys):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        for decoyname in os.listdir(path_to_decoys):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            if re.match(re.sub('.pdb', '', path_to_positive.split("/")[-1]),re.sub('.pdb', '', decoyname)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                prody_decoy = prody.parsePDB(path_to_decoys + "/" + decoyname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                # see if decoy is same as the initial ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                if not all(np.asarray(prody_decoy.getElements()) == np.asarray(prody_positive.getElements())):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    raise Exception('attempting to add ligand with different order of atoms')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                multiframe_ligand_coords = np.dstack((multiframe_ligand_coords,prody_decoy.getCoords()))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                labels = np.concatenate((labels,[0]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    if multiframe_ligand_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        raise Exception('no decoy molecules found')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    stats.ligands_failed+=1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print "ligands parsed:", stats.ligands_parsed, "ligands failed:", stats.ligands_failed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                stats.ligands_parsed += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print "ligands parsed:", stats.ligands_parsed, "ligands failed:", stats.ligands_failed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # create an output path to write binaries for protein and ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                path_to_pdb_subfolder = output_path + "/" + str(os.path.abspath(dirpath)).split("/")[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if not os.path.exists(path_to_pdb_subfolder):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    os.makedirs(path_to_pdb_subfolder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # convert atomnames to tags and write the data to disk123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                def atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    atomic_tag_number = atom_dictionary.ATM[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_elements = map(atom_to_number,prody_receptor.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_elements = map(atom_to_number,prody_positive.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_output_path = path_to_pdb_subfolder + "/" +str(os.path.abspath(dirpath)).split("/")[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                save_av4(receptor_output_path,[0],receptor_elements,prody_receptor.getCoords())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_output_path = path_to_pdb_subfolder + "/" + path_to_positive.split("/")[-1].split(".")[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                save_av4(ligand_output_path,labels,ligand_elements,multiframe_ligand_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFconvert_database_to_av4(database_path="../datasets/labeled_pdb",positives_folder="crystal_ligands",decoys_folder="docked_ligands",receptors_folder='receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    def preprocess_ligands(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        prody_ligand = prody.parsePDB(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    def ligand_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        atomic_tag_number = atom_dictionary.LIG[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        atom_numbers = map(ligand_atom_to_number, prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        coordinates_and_atoms = np.hstack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                            (prody_ligand.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        np.save(re.sub('.pdb$', '', ligand_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert_npy_to_av3(database_path,output_folder):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #crawls the folder (receptors in this case) and saves every PDB it finds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #into .npy array with 1) coordinates 2) mapped to the atom name number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def preprocess_ligands_in_folder(docked_dir,cryst_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(cryst_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    docked_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        prody_ligand = prody.parsePDB(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    def ligand_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atomic_tag_number = atom_dictionary.LIG[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atom_numbers = map(ligand_atom_to_number, prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        coordinates_and_atoms = np.hstack((prody_ligand.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    crystal_ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # walk through the folder with docked ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    pdb_name = dirpath.split("/")[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    crystal_ligand_name = filename.split(".")[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    multiframe_ligand = np.array([])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    for dirpath2, dirnames2, filenames2 in os.walk(docked_dir + "/" + pdb_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        for filename2 in filenames2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            if re.search(crystal_ligand_name, filename2) and re.search('.npy$', filename2) and re.search('_fast',filename2):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                # calculate the number of atoms123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                docked_ligand_file_path = str(os.path.abspath(dirpath2) + "/" + filename2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                docked_ligand = molecule_class(docked_ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                crystal_ligand = molecule_class(crystal_ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                # collect all of the docked ligands together in one array (numpy at the moment)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                if multiframe_ligand.size:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    multiframe_ligand = np.hstack((multiframe_ligand,docked_ligand.coords))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    multiframe_ligand = np.hstack((docked_ligand.elements.reshape(-1,1),docked_ligand.coords))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                print "next ligand"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # save the stack of ligands to disk123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # also save the protein123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # the name should be same to the crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    np.save(output_folder +"/"+ crystal_ligand_name,multiframe_ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print "saved ligand:", crystal_ligand_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    test_load = np.load(output_folder +"/"+ crystal_ligand_name + ".npy")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print "loaded ligand", test_load.shape123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            #docked_ligand_file_path = os.path.abspath(str(crystal_ligand_file_path + "/" + pdb_name + ".npy"))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    #try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    #    docked_ligand_molecule = molecule_class(docked_ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    #    crystal_ligand_molecule = molecule_class(crystal_ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    #    print docked_ligand_file_path,crystal_ligand_file_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    #except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     #   print "EXCEPTION"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     #   pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_ligands_in_folder(docked_dir=database_path + "/docked_ligands",cryst_dir=database_path + "/crystal_ligands")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    class av4_container:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        """Stores the information about the interacting protein and ligand. Writes itself to disk.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        Raises exception when several proteins are added in one record.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        Raises exception when ligand with the wrong atom order/number is added to the record123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        receptor_elements = np.array([],dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        receptor_coords = np.array([[]],dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        # ligands is stored as list of elements,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        # and coordinate frames are stacked horizontally123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        ligand_elements = np.array([],dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        ligand_coordinates = np.array([[]], dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        labels = np.array([], dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        def add_ligand(self,prody_ligand,label):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            if not labels:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                self.ligand_elements = prody_ligand.getCords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                self.ligand_coords = prody_ligand.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            if not all(np.asarray(self.ligand.getElements()) == np.asarray(prody_ligand.getElements())):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                raise Exception('attempting to add ligand with different order of atoms')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            self.frames = np.hstack((self.frames,prody_ligand.getCords))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #           self.labels = np.append(self.labels, label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       def save(self, folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF  #          pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#database_path = "../datasets/labeled_npy"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#output_folder = "../datasets/experimental_format"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# preprocess_receptors_to_npy(rec_dir=database_path + "/receptors")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#convert_npy_to_av3(database_path,output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_labeled_pdb():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_PDB_to_npy(database_path='../datasets/test_hydro')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    write_database_index_file(database_path='../datasets/test_hydro',database_index_path='../datasets/test_hydro',lig_dirs=["crystal_ligands","docked_ligands"])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    split_into_train_and_test_sets(database_index_path='../datasets/test_hydro',train_set_div=0.95,replicate_positives=20)