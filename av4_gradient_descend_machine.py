import time,re,threading123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_networks123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_main import FLAGS123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_conformation_sampler123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.saved_session = './summaries/4_netstate/saved_state-82099'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.predictions_file_path = re.sub("netstate","logs",FLAGS.saved_session)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.database_path = '../datasets/holdout_av4'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.num_epochs = 110123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.top_k = FLAGS.num_epochs123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass SamplingAgentonGPU:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, agent_name, gpu_name, filename_queue, sampling_coord, training_queue, sess):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sampling_coord = sampling_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess = sess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.filename_queue = filename_queue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ag = av4_conformation_sampler.SamplingAgent(agent_name,gpu_name,training_queue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.lig_file, _, _, self.lig_elem, self.lig_coord, self.rec_elem, self.rec_coord = \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            av4_input.read_receptor_and_ligand(filename_queue=self.filename_queue, epoch_counter=tf.constant(0))  # FIXME: change epoch counter123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "SamplingAgentonGPU:",agent_name,"successfully initialized on device:",gpu_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _count_example(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if (self.sampling_coord.run_samples is not None) and (self.sampling_coord.run_samples > 0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            with self.sampling_coord.lock:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.sampling_coord.run_samples = self.sampling_coord.run_samples - 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif (self.sampling_coord.run_samples is not None) and (self.sampling_coord.run_samples <= 0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.sampling_coord.request_stop()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _do_sampling(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # with TF. device GPU1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create an instance of a search agent that will run on this GPU123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        while not self.sampling_coord.should_stop():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # read receptor and ligand from the queue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # evaluate all positions for this ligand and receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.ag.grid_evaluate_positions(*self.sess.run([self.lig_elem,self.lig_coord,self.rec_elem,self.rec_coord]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print "next", time.sleep(0.01)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self._count_example()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as ex:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.sampling_coord.request_stop(ex=ex)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def start(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # start a thread for this agent123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tr = threading.Thread(target=self._do_sampling)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sampling_coord.threads.append(tr)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tr.start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass GradientDescendMachine:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """ Does sompling and training123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Controls sampling, infinite, or timely. Potentially, with many GPUs.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Dependencies: FLAGS.examples_in_database should be already calculated123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,side_pixels=FLAGS.side_pixels,batch_size=FLAGS.batch_size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # try to capture all of the events that happen in many background threads123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.logging.set_verbosity(tf.logging.DEBUG)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create session to compute evaluation123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess = FLAGS.main_session123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a filename queue first123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_queue,self.ex_in_database = av4_input.index_the_database_into_queue(FLAGS.database_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a very large queue of images for central parameter server123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.traning_queue = tf.FIFOQueue(capacity=1000000,dtypes=[tf.float32],shapes=[side_pixels,side_pixels,side_pixels])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a way to evaluate these images with the network123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create saver to save and load the network state123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        saver = tf.train.Saver(var_list=(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="Adam_optimizer")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                                         + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="network")))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                                         #+ tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="epoch_counter")))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        if FLAGS.saved_session is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            print "Restoring variables from sleep. This may take a while..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            saver.restore(self.sess,FLAGS.saved_session)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            print "unitialized vars:", self.sess.run(tf.report_uninitialized_variables())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # configure sampling123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sampling_coord = tf.train.Coordinator()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sampling_coord.lock = threading.Lock()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ag1 = SamplingAgentonGPU("AG1","/gpu:0",filename_queue, self.sampling_coord, self.traning_queue, self.sess )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def do_sampling(self, sample_epochs=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """ Controls all of the sampling by multiple agents123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sampling_coord.threads = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if sample_epochs is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.sampling_coord.run_samples = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.sampling_coord.run_samples = self.ex_in_database * sample_epochs123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.get_default_graph().finalize()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        threads = tf.train.start_queue_runners(sess=self.sess, coord=self.sampling_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ag1.start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # in continuous regime continue without stopping the threads123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if sample_epochs is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.sampling_coord.join(self.sampling_coord.threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.sampling_coord.clear_stop()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFa = GradientDescendMachine()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFa.do_sampling(sample_epochs=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFprint "All Done"