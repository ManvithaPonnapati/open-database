import time,re,threading123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_networks123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_main import FLAGS123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport av4_conformation_sampler123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.saved_session = './summaries/4_netstate/saved_state-82099'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.predictions_file_path = re.sub("netstate","logs",FLAGS.saved_session)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.database_path = '../datasets/holdout_av4'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.num_epochs = 2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS.top_k = FLAGS.num_epochs123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass GradientDescendMachine:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """ Does sompling and training123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Controls sampling, infinite, or timely. Potentially, with many GPUs.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Dependencies: FLAGS.examples_in_database should be already calculated123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create session to compute evaluation123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess = FLAGS.main_session123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a filename queue first123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_queue,self.ex_in_database = av4_input.index_the_database_into_queue(FLAGS.database_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # read receptor and ligand from the queue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.lig_file,_,_,self.lig_elements,self.lig_coords,self.rec_elements,self.rec_coords = \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            av4_input.read_receptor_and_ligand(filename_queue=filename_queue, epoch_counter=tf.constant(0))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a very large queue of images for central parameter server123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create a way to evaluate these images with the network123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # create saver to save and load the network state123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        saver = tf.train.Saver(var_list=(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="Adam_optimizer")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                                         + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="network")))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#                                         #+ tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="epoch_counter")))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        if FLAGS.saved_session is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            print "Restoring variables from sleep. This may take a while..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            saver.restore(self.sess,FLAGS.saved_session)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            print "unitialized vars:", self.sess.run(tf.report_uninitialized_variables())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ag1 = av4_conformation_sampler.SearchAgent("AG1")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ag2 = av4_conformation_sampler.SearchAgent("AG2")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        coord = tf.train.Coordinator()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        threads = tf.train.start_queue_runners(sess = self.sess,coord=coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def do_sampling(self, sample_epochs=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """ COntrols all of the sampling by multiple agents123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.run_samples = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if sample_epochs is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.run_samples = self.ex_in_database * sample_epochs123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def lig_rec_elems_coords():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            " Takes elements and coordinates from the next receptor and ligand"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            my_lig_file, my_lig_elements, my_lig_coords, my_rec_elements, my_rec_coords = self.sess.run(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                [self.lig_file, self.lig_elements, self.lig_coords, self.rec_elements, self.rec_coords])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "ligand file runs for sampling:", my_lig_file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return my_lig_elements, my_lig_coords, my_rec_elements, my_rec_coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def pose_samplers_stop():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if (sample_epochs is None) and (self.run_samples is None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            elif (sample_epochs is not None) and (self.run_samples > 0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.run_samples = self.run_samples - 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            elif (sample_epochs is not None) and (self.run_samples <= 0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise RuntimeError('either both or neither self.run_samples, self.sample_epochs should be None')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def search_agent_1():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # with TF. device GPU1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # create an instance of a search agent that will run on this GPU123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            while not pose_samplers_stop():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # def grid_evaluate_positions(self, my_lig_elements, my_lig_coords, my_rec_elements, my_rec_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_elems, lig_coords, rec_elems, rec_coords = lig_rec_elems_coords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.ag1.grid_evaluate_positions(lig_elems, lig_coords, rec_elems, rec_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def search_agent_2():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # with TF. device GPU2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # create an instance of a search agent that will run on this GPU123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            while not pose_samplers_stop():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_elems, lig_coords, rec_elems, rec_coords = lig_rec_elems_coords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self.ag2.grid_evaluate_positions(lig_elems, lig_coords, rec_elems, rec_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # start threads for conformation sampling123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        t1 = threading.Thread(target=search_agent_1).start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        t2 = threading.Thread(target=search_agent_2).start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#Class TrainingController:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    def __init__(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        for i in range(100):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            print "doing training"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#coord = tf.train.Coordinator()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#threads = tf.train.start_queue_runners(sess =FLAGS.main_session,coord=coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFa = GradientDescendMachine()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFa.do_sampling(sample_epochs=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#search_agent1 = av4_conformation_sampler.SearchAgent()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFprint "All Done"