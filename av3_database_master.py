import numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,re, random,prody,time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom itertools import chain123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av2_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# database master123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 1) crawls directories and writes a human-readable database_index.csv file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 2) splits the data into training and testing sets123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 3) parses proteins and writes useful data in them into .npy formatted arrays123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 3) later it's much faster to read from npy arrays123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo there is a problem with multiframe PDBs that is supposed to be fixed with Xiao's update of the database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo some error handling and loggig123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo add time.time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# FIXME write .npy files for pdb now123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef preprocess_PDB_to_npy(database_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """crawls the folder (receptors in this case) and saves every PDB it finds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    into .npy array with 1) coordinates 2) mapped to the atom name number """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class statistics:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_ligands_overlap = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_ligands_not_overlap = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def preprocess_ligands(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        prody_ligand = prody.parsePDB(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    def ligand_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atomic_tag_number = atom_dictionary.LIG[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atom_numbers = map(ligand_atom_to_number, prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        coordinates_and_atoms = np.hstack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            (prody_ligand.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        np.save(re.sub('.pdb$', '', ligand_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def preprocess_receptors(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    receptor_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    prody_receptor = prody.parsePDB(receptor_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    def receptor_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atomic_tag_number = atom_dictionary.REC[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atom_numbers = map(receptor_atom_to_number, prody_receptor.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        coordinates_and_atoms = np.hstack((prody_receptor.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        np.save(re.sub('.pdb$', '', receptor_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_ligands(database_path + "/docked_ligands/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_ligands(database_path + "/crystal_ligands/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #preprocess_receptors(database_path + "/receptors/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef assign_label_from_path(ligand_file_path):                                                                         # todo123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """assigns label to be used for training."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 1 for the crystal structure123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 0 for fast docked structure123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    label = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if re.search('/crystal_ligands/', ligand_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('can not assign two labels to one example:')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if re.search('/docked_ligands/',ligand_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('can not assign two labels to one example:')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if re.search('/ligands/',ligand_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label = random.randint(0,1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('can not assign two labels to one example:')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception("can not assign any labels to:",ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return label123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef write_database_index_file(database_path,database_index_path,lig_dirs,label_gen_func=assign_label_from_path,rec_dir="receptors"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """crowls the database of the structure we are using and indexes it"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_file = open(database_index_path + "/database_index.csv", "w")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    step = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # walking across the ligand folders123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #for dirpath, dirnames, filenames in chain(os.walk(database_path + "/" + lig_dirs[0]),os.walk(database_path + "/" + lig_dirs[1])):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for lig_dir in lig_dirs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(database_index_path + "/" + lig_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # first look if what we found is a ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                pdb_name = dirpath.split("/")[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.npy$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # second see if we can find a corresponding protein123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    label = label_gen_func(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    if label is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        print "added to database", step, "label:", label123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        step += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        receptor_file_path = os.path.abspath(str(database_path + "/" + rec_dir + "/" + pdb_name + ".npy"))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        if os.path.exists(receptor_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            database_index_file.write(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                str(label) + "," + ligand_file_path + "," + receptor_file_path + "\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            print "WARNING: missing receptor"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_file.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_into_train_and_test_sets(database_index_path,train_set_div,replicate_positives=1):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """splits the database textfile into training and testing sets.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    can replicate positive examples to do oversampling"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create a unique pdb list, and randomly assign every pdb to the training or to the testing set123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_lines = open(database_index_path + "/database_index.csv").readlines()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def return_pdb(string):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return string.split("/")[-1].strip("\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_names = np.array(map(return_pdb,database_index_lines))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unique_pdb_names = np.unique(pdb_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # now split according to the group123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    test_set = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    train_set = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def randomly_assign_and_retrieve_example(unique_pdb_name,pdb_names=pdb_names,train_set_div=train_set_div,database_index_lines=database_index_lines):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Given a pdb name randomly assign it either to the training or to the testing set keeping the probability.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Retrieve all of the examples with this pdb name from the database and write into training/testing file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # TODO swap "random" to test only123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if (random.random() > train_set_div):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for index in np.where(pdb_names == unique_pdb_name)[0]:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                test_set.append(database_index_lines[index])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for index in np.where(pdb_names == unique_pdb_name)[0]:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                label = float(database_index_lines[index].split(",")[0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if (label == 1.0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    [train_set.append(database_index_lines[index]) for i in range(replicate_positives)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    train_set.append(database_index_lines[index])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    map(randomly_assign_and_retrieve_example,unique_pdb_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (train_set_div==1):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        random.shuffle(test_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        open(database_index_path + "/test_set.csv", "w").writelines(test_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (train_set_div==0):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        random.shuffle(train_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        open(database_index_path + "/train_set.csv", "w").writelines(train_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef docked_ligand_overlaps_with_crystal(database_path,docked_lig_path,tanimoto_cutoff=0.75,clash_cutoff_A=4,clash_size_cutoff=0.3):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """This script takes docked ligand, and searches crystal ligands to find if doked position has a chance to be correct123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    (overlaps). And in that case returns one."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def tanimoto_similarity(cryst_lig_path, docked_lig_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        command = os.popen('babel -d {} {} -ofpt -xfFP4'.format(cryst_lig_path, docked_lig_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ls = command.read()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tanimoto_similarity = re.split('=|\n', ls)[2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return tanimoto_similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def calculate_clash(cryst_lig_path, docked_lig_path,clash_cutoff_A=clash_cutoff_A):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """calculates the ratio of atoms between two molecules that appear within van Der Waals cutoff of 4A"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # calculate atom to atom distances123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody_docked_ligand = prody.parsePDB(docked_lig_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody_cryst_ligand = prody.parsePDB(cryst_lig_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def atom_clashing(index):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # calculate distance to all atoms in the other molecule and check if any of them falls below cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if any(np.sum((prody_cryst_ligand[index,:] - prody_docked_ligand)**2,axis=1)**0.5 < clash_cutoff_A):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_mask = map(atom_clashing,np.arange(len(prody_cryst_ligand[:, 0])))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return np.average(clash_mask)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash_found = False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # walk through /crystal/ligands and see if any of them are similar123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # there should be at least one123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for dirpath, dirnames, filenames in os.walk(database_path + "/crystal_ligands/" + docked_lig_path.split("/")[-2]):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                cryst_lig_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if tanimoto_similarity(cryst_lig_path,docked_lig_path) > tanimoto_cutoff:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    # if ligand in crystal is similar to the docked ligand, calculate clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    if (calculate_clash(cryst_lig_path,docked_lig_path) > clash_size_cutoff):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        clash_found = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return clash_found123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_labeled_pdb():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_PDB_to_npy(database_path='../datasets/test_hydro')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    write_database_index_file(database_path='../datasets/test_hydro',database_index_path='../datasets/test_hydro',lig_dirs=["crystal_ligands","docked_ligands"])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    split_into_train_and_test_sets(database_index_path='../datasets/test_hydro',train_set_div=0.95,replicate_positives=20)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_labeled_npy():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    write_database_index_file(database_path='../datasets/labeled_npy',database_index_path='../datasets/labeled_npy',lig_dirs=["crystal_ligands","docked_ligands"])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    split_into_train_and_test_sets(database_index_path='../datasets/labeled_npy',train_set_div=1,replicate_positives=20)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_unlabeled_npy():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    write_database_index_file(database_path='../datasets/unlabeled_npy',database_index_path='../datasets/unlabeled_npy',lig_dirs=["ligands"])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    split_into_train_and_test_sets(database_index_path='../datasets/unlabeled_npy',train_set_div=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFprepare_labeled_pdb()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#prepare_labeled_npy()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#prepare_unlabeled_npy()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF