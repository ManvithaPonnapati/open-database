import numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,re, random,prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom itertools import chain123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av2_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# database master123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 1) crawls directories and writes a human-readable database_index.csv file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 2) splits the data into training and testing sets123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 3) parses proteins and writes useful data in them into .npy formatted arrays123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# 3) later it's much faster to read from npy arrays123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo there is a problem with multiframe PDBs that is supposed to be fixed with Xiao's update of the database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo some error handling and loggig123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# todo add time.time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef preprocess_PDB_to_npy(database_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """crawls the folder (receptors in this case) and saves every PDB it finds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    into .npy array with 1) coordinates 2) mapped to the atom name number """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def preprocess_ligands(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        prody_ligand = prody.parsePDB(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    def ligand_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atomic_tag_number = atom_dictionary.LIG[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atom_numbers = map(ligand_atom_to_number, prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        coordinates_and_atoms = np.hstack((prody_ligand.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        np.save(re.sub('.pdb$', '', ligand_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def preprocess_receptors(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    receptor_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    prody_receptor = prody.parsePDB(receptor_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    def receptor_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atomic_tag_number = atom_dictionary.REC[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        atom_numbers = map(receptor_atom_to_number, prody_receptor.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        coordinates_and_atoms = np.hstack((prody_receptor.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        np.save(re.sub('.pdb$', '', receptor_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_ligands(database_path + "/crystal_ligands/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_ligands(database_path + "/docked_ligands/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    preprocess_receptors(database_path + "/receptors/")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef assign_label(ligand_file_path):                                                                         # todo123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """assigns label to be used for training. Returns "NONE" when the molecule should not be used for training"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 1 for the crystal structure123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # 0 for bad fast docking123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # NONE for good fast docking123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    label = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if re.search('crystal_ligands', ligand_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('can not assign two labels to one example')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if re.search('docked_ligands',ligand_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('can not assign two labels to one example')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if label == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception("can not assign label")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return label123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # TODO if both have been assigned123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # check if one of the labels has been assigned123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #random_label = int(round(random.random()))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #return random_label123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef write_database_index_file(database_path,database_index_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """crowls the database of the structure we are using and indexes it"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_file = open(database_index_path + "/database_index.csv", "w")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    step = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # walking across the ligand folders123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for dirpath, dirnames, filenames in chain(os.walk(database_path +"/crystal_ligands"),os.walk(database_path +"/docked_ligands")):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # first look if what we found is a ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pdb_name = dirpath.split("/")[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if re.search('.npy$',filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                # second see if we can find a corresponding protein123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                label = assign_label(ligand_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if label is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    print "added to database",step,"label:",label123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    step +=1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    receptor_file_path = os.path.abspath(str(database_path + "/receptors/" + pdb_name + ".npy"))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    if os.path.exists(receptor_file_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        database_index_file.write(str(label) + "," + ligand_file_path + "," + receptor_file_path + "\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        print "WARNING: missing receptor"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_file.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_into_train_and_test_sets(database_index_path,train_set_div):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """splits the database textfile into training and testing sets. Takes into account that some of the PDBs123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    are multimers. All multimers go i"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create a unique pdb list, and randomly assign every pdb to the training or to the testing set123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    database_index_lines = open(database_index_path + "/database_index.csv").readlines()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def return_pdb(string):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return string.split("/")[-1].strip("\n")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_names = np.array(map(return_pdb,database_index_lines))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unique_pdb_names = np.unique(pdb_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # now split according to the group123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    test_set = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    train_set = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def randomly_assign_and_retrieve_example(unique_pdb_name,pdb_names=pdb_names,train_set_div=train_set_div,database_index_lines=database_index_lines):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Given a pdb name randomly assign it either to the training or to the testing set keeping the probability.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Retrieve all of the examples with this pdb name from the database and write into training/testing file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for index in np.where(pdb_names == unique_pdb_name)[0]:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if (random.random() < train_set_div):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                test_set.append(database_index_lines[index])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                train_set.append(database_index_lines[index])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    map(randomly_assign_and_retrieve_example,unique_pdb_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    random.shuffle(train_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    open(database_index_path + "/test_set.csv", "w").writelines(train_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    random.shuffle(test_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    open(database_index_path + "/train_set.csv", "w").writelines(test_set)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef prepare_database_for_av3(database_path,train_set_div,convert_to_npy,write_index,split):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if convert_to_npy:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        preprocess_PDB_to_npy(database_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if write_index:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        write_database_index_file(database_path,database_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if split:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        split_into_train_and_test_sets(database_path,train_set_div)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFprepare_database_for_av3(database_path='../datasets/labeled_npy',train_set_div=0.8,convert_to_npy=False,write_index=True,split=True)