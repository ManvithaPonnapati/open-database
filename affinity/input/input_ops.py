import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,time,sys,re,logging,threading123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFsys.path.append("../../")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.geom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport input_lib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass _InputPipeTypes(object):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    A wrapper used to declare data types that would be supplied into self assembling input queue of the InputPipeBase.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Input data _shape and _dtype should be declared as a class variable under .init, _target is a target tensor that123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    should be declared (and connected) separately as an instance variable.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,dtype,shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._dtype = dtype123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._shape = shape123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._target = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def connect_target(self,target):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._target = target123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass InputPipeBase(object):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    A class style object that helps to organize all data input pipes.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    A self-assembling queue; usage example:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_pipe = af.input.InputPipeVDS1(*params)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_q = input_pipe.self_assemble("lig_elems","lig_coords") # returns a queue with ligand elements and coordinates123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_elems,lig_coords = input_q.dequeue()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_q.start_threads() # start enqueue workers123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    while input_queue.epoch_counter < 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print sess.run([lig_elems,lig_coords])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    input_q.stop_threads # stop enqueue workers123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    In addition, any data type can be accessed regardless of queue assembly at any time:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    example_receptor_coords = sess.run(input_q.input.rec_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Creating input pipe Example:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        InputPipeVDS1(InputPipeBase)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_elems = _InputPipeTypes(tf.int32,[None]) # declare shape and data type123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            def __init__():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                .....123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                epoch_counter = .....123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ....123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_elems.connect_target(ligand_elements_tensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                .....123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                super(InputPipeVDS1, self).__init__() # call the __init__ of the pipe base123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # new input pipe should be ready now123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Variables that have to be defined at run time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    epoch_counter = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,sess,coord,num_threads):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Performs a health-check of the downstream InputPipe. In particular, checks and removes any attribute under123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        .input and substitutes it with a target tensor. Before InputPipeBase is initialized any function in .init123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        should be _InputPipeTypes, init substitutes it with target tensor so that one can call123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sess.run(my_input_pipe.input.lig_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param sess: session123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param coord: coordinator123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param num_threads: number of input threads to fill the queue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Raises:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Value Error when the epoch counter was not declared in the downstream pipe.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Value Error when no inputs were declared under .input in the downstream pipe.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Value Error if any other than _InputPipeTypes class variables are declared in .input of the downstream pipe123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Value Error of one or more data types are declared in class but not connected to any tensor at runtime123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.sess = sess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.coord = coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.num_threads = num_threads123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._threads = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._inp_names = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._inp_dtypes = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._inp_shapes = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._inp_targets = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._q_dtypes = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._q_shapes = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._q_targets = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.epoch_counter == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('self.epoch_counter was not declared below InputPipeBase and is required.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # find names of the declared attributes in .input of the downstream pipe123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        inp_names = [inp_name for inp_name in dir(self.input) if not inp_name.startswith("__")]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if inp_names == []:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('No inputs were declared in InputPipe.input ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for inp_name in inp_names:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            inp_attr = getattr(self.input,inp_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if not isinstance(inp_attr,_InputPipeTypes):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise AttributeError("only _InputPypeTypes declarations are allowed in InputPipeBase.input.")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            elif inp_attr._target is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise AttributeError(inp_name + " :was declared in InputPipe.input but was not connected.")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self._inp_names.append(inp_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self._inp_dtypes.append(inp_attr._dtype)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self._inp_shapes.append(inp_attr._shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                self._inp_targets.append(inp_attr._target)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                delattr(self.input,inp_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                setattr(self.input,inp_name,inp_attr._target)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def self_assemble(self,*args):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """Self-assembles a queue with the input data and creates queue runnerrs.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        *args - list of strings - names of the instances declared in .input of type _InputPipeTypes123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if args ==():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('InputPipeBase won\'t allow self_assemble with no arguments.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not all([getattr(self,'_q_shapes')==[],getattr(self,'_q_dtypes')==[],getattr(self,'_q_targets')==[]]):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('It seems like pipe has already been assembled.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # assemble attributes for the queue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for arg in args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try: inp_idx = self._inp_names.index(arg)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except ValueError: raise ValueError("Requested",arg,"ss not in known _InputPipeTypes:", self._inp_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self._q_dtypes.append(self._inp_dtypes[inp_idx])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self._q_shapes.append(self._inp_shapes[inp_idx])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self._q_targets.append(self._inp_targets[inp_idx])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._q = tf.PaddingFIFOQueue(capacity=25*self.num_threads,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      dtypes=self._q_dtypes,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      shapes=self._q_shapes)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        enq_op = self._q.enqueue(self._q_targets)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        qr = tf.train.QueueRunner(self._q, [enq_op] * self.num_threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._threads = qr.create_threads(sess=self.sess, coord=self.coord, start=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self._q123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def start_threads(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tr in self._threads:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tr.start()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            logging.debug("thread" + str(tr) + "started")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            logging.debug("InputPipeBase queue size:" + str(self.sess.run(self._q.size())))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def stop_threads(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.coord.request_stop()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.coord.join(self._threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self._threads = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass InputPipeVDS1(InputPipeBase):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    InputPipe for Vina Docking Set 1 (VDS1).123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_file tf.string,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_epoch tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_label tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file = _InputPipeTypes(tf.string,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_epoch = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_label = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,sess,coord,pairlist_dist,bindsite_radii,db_path,num_threads,lig_frame):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_q, self.ex_in_db = input_lib.index_vds_database_into_q(db_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with tf.variable_scope("epoch_counter"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ex_counter = tf.Variable(0).count_up_to(np.iinfo(np.int32).max)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.epoch_counter = tf.div(ex_counter,self.ex_in_db)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file, lig_epoch, lig_label, lig_elem, lig_coord, rec_elem, rec_coord = \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_lib.read_rec_and_lig_VDS1(filename_q, self.epoch_counter, lig_frame=lig_frame)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_file.connect_target(lig_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_epoch.connect_target(lig_epoch)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_label.connect_target(lig_label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_elem.connect_target(lig_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_coord.connect_target(lig_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem, rec_coord = input_lib.crop_binding_site(lig_coord, rec_elem, rec_coord, crop_radii=bindsite_radii)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_elem.connect_target(rec_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_coord.connect_target(rec_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs, ll_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_pairs.connect_target(ll_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_rel_coords.connect_target(ll_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs, lr_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_pairs.connect_target(lr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_rel_coords.connect_target(lr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs, rr_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_rel_coords.connect_target(rr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_pairs.connect_target(rr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs, rl_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_pairs.connect_target(rl_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_rel_coords.connect_target(rl_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(InputPipeVDS1, self).__init__(sess, coord, num_threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass InputPipeARS1(InputPipeBase):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    InputPipe for Affinity regression set (ARS1).123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_file tf.string,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_epoch tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_label tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file = _InputPipeTypes(tf.string,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_epoch = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_label = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,sess,coord,pairlist_dist,bindsite_radii,db_path,num_threads):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_q, self.ex_in_db = input_lib.index_ars_database_into_q(db_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with tf.variable_scope("epoch_counter"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ex_counter = tf.Variable(0).count_up_to(np.iinfo(np.int32).max)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.epoch_counter = tf.div(ex_counter,self.ex_in_db)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file, lig_epoch, lig_label, lig_elem, lig_coord, rec_elem, rec_coord = \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_lib.read_rec_and_lig_ARS1(filename_q, self.epoch_counter)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_file.connect_target(lig_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_epoch.connect_target(lig_epoch)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_label.connect_target(lig_label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_elem.connect_target(lig_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_coord.connect_target(lig_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem, rec_coord = input_lib.crop_binding_site(lig_coord, rec_elem, rec_coord, crop_radii=bindsite_radii)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_elem.connect_target(rec_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_coord.connect_target(rec_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs, ll_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_pairs.connect_target(ll_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_rel_coords.connect_target(ll_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs, lr_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_pairs.connect_target(lr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_rel_coords.connect_target(lr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs, rr_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_rel_coords.connect_target(rr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_pairs.connect_target(rr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs, rl_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_pairs.connect_target(rl_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_rel_coords.connect_target(rl_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(InputPipeARS1, self).__init__(sess, coord, num_threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass InputPipeARS1_DUD_temp(InputPipeBase):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """ InputPipe for Affinity Regression Set Directory of Useful Decoys. Since we don't have this dataset,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    this pipe insted mimics decoys by choosing a random ligand from the dataset.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_file tf.string,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_epoch tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_label tf.int32,[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lig_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_elem tf.int32,[None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rec_coord tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: ll_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: lr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rr_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_pairs tf.int32,[None,2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     params: rl_rel_coords tf.float32,[None,3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file = _InputPipeTypes(tf.string,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_epoch = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_label = _InputPipeTypes(tf.int32,[])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem = _InputPipeTypes(tf.int32,[None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs = _InputPipeTypes(tf.int32,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_rel_coords = _InputPipeTypes(tf.float32,[None,3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,sess,coord,pairlist_dist,bindsite_radii,db_path,num_threads,match_prob):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_q, self.ex_in_db = input_lib.index_ars_database_into_q(db_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with tf.variable_scope("epoch_counter"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ex_counter = tf.Variable(0).count_up_to(np.iinfo(np.int32).max)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.epoch_counter = tf.div(ex_counter,self.ex_in_db)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_file, lig_epoch, lig_label, lig_elem, lig_coord, rec_elem, rec_coord = \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_lib.read_rec_and_lig_ARS1(filename_q, self.epoch_counter)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # FIXME: this is the part of the pipeline that makes it temporary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # keep protein when random number is less than match prob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rand = tf.random_uniform([], minval=0, maxval=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def match_pair():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return rec_elem,rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def mismatch_pair():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            _,_,_,_,_, rec_elem, rec_coord = input_lib.read_rec_and_lig_ARS1(filename_q, self.epoch_counter)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return rec_elem,rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem,rec_coord = tf.case({rand<match_prob:match_pair},mismatch_pair)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # it's not enough to escape bias, but I am randomly translating my ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rand_tforms = affinity.geom.gen_affine_tform(10000)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rand_tform = tf.Variable(tf.gather(rand_tforms,tf.random_uniform([], minval=0, maxval=10000-1,dtype=tf.int32)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coord,_ = affinity.geom.affine_tform(lig_coord,rand_tform)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_file.connect_target(lig_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_epoch.connect_target(lig_epoch)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_label.connect_target(lig_label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_elem.connect_target(lig_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_coord.connect_target(lig_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem, rec_coord = input_lib.crop_binding_site(lig_coord, rec_elem, rec_coord, crop_radii=bindsite_radii)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_elem.connect_target(rec_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_coord.connect_target(rec_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs, ll_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_pairs.connect_target(ll_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_rel_coords.connect_target(ll_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs, lr_rel_coords = affinity.geom.pointcloud_pairlist(lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_pairs.connect_target(lr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_rel_coords.connect_target(lr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs, rr_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_rel_coords.connect_target(rr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_pairs.connect_target(rr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs, rl_rel_coords = affinity.geom.pointcloud_pairlist(rec_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    lig_coord,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    pairlist_dist=pairlist_dist,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    order='NAME',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                    keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_pairs.connect_target(rl_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_rel_coords.connect_target(rl_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(InputPipeARS1_DUD_temp, self).__init__(sess, coord, num_threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass InputPipeVRS1(InputPipeBase):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """InputPipe for DeepChem's data dataset dataset downloaded from DeepChem AWS server.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    params: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_nbr_idx: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_nbr_atoms: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem: tf.int32, [None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_nbr_idx: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_nbr_atoms: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem: tf.int32, [None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_nbr_idx: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_nbr_atoms: tf.int32, [None, 12]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_elem: tf.int32, [None]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs: tf.int32, [None, 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs: tf.int32, [None, 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_rel_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs: tf.int32, [None, 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs: tf.int32, [None, 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_rel_coords: tf.float32, [None, 3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        label: tf.float64, []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        epoch: tf.int32, []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class input:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coords = _InputPipeTypes(tf.float32, [None, 3])        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_nbr_idx = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_nbr_atoms = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem = _InputPipeTypes(tf.int32, [None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coords = _InputPipeTypes(tf.float32, [None, 3])        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_nbr_idx = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_nbr_atoms = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem = _InputPipeTypes(tf.int32, [None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_coords = _InputPipeTypes(tf.float32, [None, 3])        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_nbr_idx = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_nbr_atoms = _InputPipeTypes(tf.int32, [None, 12])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        comp_elem = _InputPipeTypes(tf.int32, [None])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs = _InputPipeTypes(tf.int32, [None, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords = _InputPipeTypes(tf.float32, [None, 3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs = _InputPipeTypes(tf.int32, [None, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_rel_coords = _InputPipeTypes(tf.float32, [None, 3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs = _InputPipeTypes(tf.int32, [None, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords = _InputPipeTypes(tf.float32, [None, 3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs = _InputPipeTypes(tf.int32, [None, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_rel_coords = _InputPipeTypes(tf.float32, [None, 3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        epoch = _InputPipeTypes(tf.int32, [])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        label = _InputPipeTypes(tf.float64, [])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, sess, coord, db_path, num_threads, pairlist_dist=5):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filename_q, self.ex_in_db = input_lib.index_vrs_database_into_q(db_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ex_counter = tf.Variable(0).count_up_to(np.iinfo(np.int32).max)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.epoch_counter = tf.div(ex_counter, self.ex_in_db)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        (lig_coords, lig_nbr_idx, lig_nbr_atoms, lig_elem,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rec_coords, rec_nbr_idx, rec_nbr_atoms, rec_elem,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            comp_coords, comp_nbr_idx, comp_nbr_atoms, comp_elem, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label) = input_lib.read_data_vrs(filename_q)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_coords.connect_target(lig_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_nbr_idx.connect_target(lig_nbr_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_nbr_atoms.connect_target(lig_nbr_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lig_elem.connect_target(lig_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_coords.connect_target(rec_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_nbr_idx.connect_target(rec_nbr_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_nbr_atoms.connect_target(rec_nbr_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rec_elem.connect_target(rec_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.comp_coords.connect_target(comp_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.comp_nbr_idx.connect_target(comp_nbr_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.comp_nbr_atoms.connect_target(comp_nbr_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.comp_elem.connect_target(comp_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs, ll_rel_coords = affinity.geom.poincloud_pairlist(lig_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        	lig_coords, pairlist_dist, order='NAME', keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lr_pairs, lr_rel_coords = affinity.goem.pointcloud_pairlist(lig_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        	rec_coords, pairlist_dist, order='NAME', keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs, rr_rel_coords = affinity.geom.pointcloud_pairlist(rec_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        	rec_coords, pairlist_dist, order='NAME', keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rl_pairs, rl_rel_coords = affinity.geom.pointcloud_pairlist(rec_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        	lig_coords, pairlist_dist, order='NAME', keep_null_src=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_pairs.connect_target(ll_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.ll_rel_coords.connect_target(ll_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_pairs.connect_target(lr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.lr_rel_coords.connect_target(lr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_pairs.connect_target(rr_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rr_rel_coords.connect_target(rr_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_pairs.connect_target(rl_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.rl_rel_coords.connect_target(rl_rel_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.epoch.connect_target(self.epoch_counter)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.input.label.connect_target(label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(InputPipeVRS1, self).__init__(sess, coord, num_threads)