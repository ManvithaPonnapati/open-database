import time, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.geom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.nn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.networks123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# telling tensorflow how we want to randomly initialize weights123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef weight_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.truncated_normal(shape, stddev=0.005)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef bias_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.constant(0.01, shape=shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass SiameseAlexNet(affinity.networks.AtomicNetworks):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,b_size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # variables for concat Graham convolution 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b_size = b_size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.w1 = weight_variable([5, 5, 5, 1, 20])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.w2 = weight_variable([3, 3, 3, 20, 30])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.w3 = weight_variable([2, 2, 2, 30, 40])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.w4 = weight_variable([2, 2, 2, 40, 50])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.w5 = weight_variable([2, 2, 2, 50, 60])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b1 = bias_variable([20])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b2 = bias_variable([30])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b3 = bias_variable([40])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b4 = bias_variable([50])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b5 = bias_variable([60])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc1w = weight_variable([60000, 1024])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc1b = bias_variable([1024])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc2w = weight_variable([1024, 256])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc2b = bias_variable([256])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc3w = weight_variable([256, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc3b = bias_variable([2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(SiameseAlexNet, self).__init__(self.b_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _single_ex_pipeline(self,input_q):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        transit pars are not required by the network123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param input_q:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _batch_pipeline(self,b_feat):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param b_feat:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc1 = tf.nn.relu(tf.matmul(b_feat, self.fc1_w) + self.fc1_b)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc2 = tf.matmul(h_fc1, self.fc2_w) + self.fc2_b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return h_fc2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def compute_output(self,input_q):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_net_feats,b_transit_pars = self._make_batch(input_q)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_l_atomsum = b_net_feats[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_r_atomsum = b_net_feats[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_atomsum = tf.concat([b_l_atomsum,b_r_atomsum],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_logits = self._batch_pipeline(b_atomsum)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return b_logits,b_transit_pars123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF