import time, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.geom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.nn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.networks123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# telling tensorflow how we want to randomly initialize weights123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef weight_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.truncated_normal(shape, stddev=0.005)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef bias_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.constant(0.01, shape=shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass CatNet(affinity.networks.AtomicNetworks):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self,b_size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # variables for concat Graham convolution 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.k_size_1 = [21,21,21]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.pix_size_1 = 0.3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conc_ll_w1 = weight_variable([21 * 21 * 21, 2, 200])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conc_rr_w1 = weight_variable([21 * 21 * 21, 2, 100])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conc_ll_b1 = bias_variable([200])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conc_rr_b1 = bias_variable([100])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc_l_w = weight_variable([200,10000])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc_r_w = weight_variable([100,10000])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc_l_b = bias_variable([10000])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc_r_b = bias_variable([10000])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc1_b = bias_variable([10000])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc2_w = weight_variable([10000, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.fc2_b = bias_variable([2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.b_size = b_size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        super(CatNet, self).__init__(self.b_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _single_ex_pipeline(self,input_q):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param input_q:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param keep_prob:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_stream = input_q.dequeue()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elem = input_stream[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coord = input_stream[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elem = input_stream[2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = input_stream[3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_pairs = input_stream[4]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ll_rel_coords = input_stream[5]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_pairs = input_stream[6]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rr_rel_coords = input_stream[7]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        transit_pars = input_stream[8:]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        l_feat_0 = tf.to_float(tf.expand_dims(lig_elem, 1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        r_feat_0 = tf.to_float(tf.expand_dims(rec_elem, 1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        l_feat_1,_ = affinity.nn.concat_nonlinear_conv3d(k_size=self.k_size_1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 pix_size=self.pix_size_1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 s_feat=l_feat_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 d_feat=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_pairs=ll_pairs,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_rel_coords=ll_rel_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_w=self.conc_ll_w1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_b=self.conc_ll_b1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_b=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_b=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_b=None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        r_feat_1,_ = affinity.nn.concat_nonlinear_conv3d(k_size=self.k_size_1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 pix_size=self.pix_size_1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 s_feat=r_feat_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 d_feat=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_pairs=rr_pairs,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_pairs=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_rel_coords=rr_rel_coords,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_rel_coords=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_w=self.conc_rr_w1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_w=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ss_b=self.conc_rr_b1,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 sd_b=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 dd_b=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                 ds_b=None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        l_act_1 = tf.nn.relu(l_feat_1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        r_act_1 = tf.nn.relu(r_feat_1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        l_atomsum = tf.reduce_max(l_act_1, reduction_indices=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        r_atomsum = tf.reduce_max(r_act_1, reduction_indices=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return [l_atomsum,r_atomsum],transit_pars123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def _batch_pipeline(self,b_l_feat,b_r_feat):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param b_feat:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc_l = tf.nn.relu(tf.matmul(b_l_feat, self.fc_l_w) + self.fc_l_b)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc_r = tf.nn.relu(tf.matmul(b_r_feat, self.fc_r_w) + self.fc_r_b)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc_cos = h_fc_l * h_fc_r123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc1_drop = tf.nn.dropout(h_fc_cos,self.keep_prob)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        h_fc2 = tf.matmul(h_fc1_drop, self.fc2_w) + self.fc2_b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return h_fc2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def compute_output(self,input_q,keep_prob):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param input_q:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :param keep_prob:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.keep_prob = keep_prob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_net_feats,b_transit_pars = self._make_batch(input_q)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_l_atomsum = b_net_feats[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_r_atomsum = b_net_feats[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        b_logits = self._batch_pipeline(b_l_atomsum,b_r_atomsum)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return b_logits,b_transit_pars