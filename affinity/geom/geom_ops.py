import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,sys,time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# instead of int_repeat and int_sequence libraries it's possible to use int_sequence and int_repeat from av4_utils123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#int_repeat_module = tf.load_op_library(os.path.dirname(__file__) + '/c_comp/int_repeat.so')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#int_sequence_module = tf.load_op_library(os.path.dirname(__file__) + '/c_comp/int_sequence.so')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#sys.path.append("../")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#import affinity as af123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity.c_lib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef gen_affine_tform(num_frames):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Generates a very big batch of affine transform matrices in 3D. The first dimension is batch, the other two123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    describe typical affine transform matrices. Deep affine transform can be generated once in the beginning123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    of training, and later slices can be taken from it randomly to speed up the computation."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # shift range is hard coded to 10A because that's how the proteins look like123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # rotation range is hardcoded to 360 degrees123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shift_range = tf.constant(10, dtype=tf.float32)  # FIXME123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotation_range = tf.cast(tf.convert_to_tensor(np.pi * 2), dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly shift along X,Y,Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_shift = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32) * shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_shift = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32) * shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_shift = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32) * shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [1, 0, 0, random_x_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, random_y_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, random_z_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # try to do the following:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # generate nine tensors for each of them123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # concatenate and reshape sixteen tensors123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = x_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = y_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = z_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_matrix = tf.transpose(tf.reshape(xyz_shift_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along X123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32) * rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[1, 0, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, cos(x_rot),-sin(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, sin(x_rot),cos(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.cos(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = -tf.sin(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.sin(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.cos(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot_matrix = tf.transpose(tf.reshape(x_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along Y123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32, seed=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                              name=None) * rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [cos(y_rot), 0,sin(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [-sin(y_rot), 0,cos(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0 ,0 ,1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.cos(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.sin(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = -tf.sin(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.cos(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot_matrix = tf.transpose(tf.reshape(y_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot = tf.random_uniform([num_frames], minval=-1, maxval=1, dtype=tf.float32) * rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[cos(z_rot), -sin(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [sin(z_rot), cos(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.cos(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = -tf.sin(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.sin(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.cos(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot_matrix = tf.transpose(tf.reshape(z_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_xyz_rot = tf.matmul(tf.matmul(tf.matmul(xyz_shift_matrix, x_rot_matrix), y_rot_matrix), z_rot_matrix)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return xyz_shift_xyz_rot123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef affine_tform(coordinates,transition_matrix):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Applies affine transform to the array of XYZ coordinates. By default generates a random affine transform matrix.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    coordinates_with_ones = tf.concat([coordinates, tf.cast(tf.ones([tf.shape(coordinates)[0],1]),tf.float32)],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    transformed_coords = tf.matmul(coordinates_with_ones,tf.transpose(transition_matrix))[0:,:-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return transformed_coords,transition_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef deep_affine_tform(coords,deep_transition_matrix):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Applies multiple affine transformations to the array of X,Y,Z coordinates."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # TODO generate random affine transform matrix by default123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    depth_dimensions = tf.shape(deep_transition_matrix)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    coords_with_ones = tf.concat([coords, tf.cast(tf.ones([tf.shape(coords)[0],1]),tf.float32)],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    broadcast_coords_with_ones = tf.reshape(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.tile(coords_with_ones,[depth_dimensions,1]),[depth_dimensions,tf.shape(coords)[0],4])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    transformed_coords = tf.batch_matmul(broadcast_coords_with_ones,tf.transpose(deep_transition_matrix,[0,2,1]))[:,:,:3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return transformed_coords,deep_transition_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef gen_spaced_affine_tform(shift_ranges=[10,10,10],shift_deltas=[1,1,1],rot_ranges=[360,360,360]):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """By default,makes shifts by 1, in X,Y,Z directions"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # shift along X,Y,Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_shift = tf.range(start=-shift_ranges[0],limit=shift_ranges[0],delta=shift_deltas[0],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_shift = tf.range(start=-shift_ranges[1],limit=shift_ranges[1],delta=shift_deltas[1],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_shift = tf.range(start=-shift_ranges[2],limit=shift_ranges[2],delta=shift_deltas[2],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [1, 0, 0, random_x_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, random_y_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, random_z_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get affine transformation shifts along X123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_frames = tf.shape(x_shift)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = x_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_shift_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_shift_matrix = tf.transpose(tf.reshape(x_shift_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get affine transformations along Y123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = y_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_shift_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_shift_matrix = tf.transpose(tf.reshape(y_shift_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get affine transformations along Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = z_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_shift_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_shift_matrix = tf.transpose(tf.reshape(z_shift_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # combine X,Y,Z shifts together123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    broadcast_x = tf.tile(x_shift_matrix, [tf.shape(y_shift_matrix)[0], 1, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    broadcast_y = tf.reshape(tf.tile(y_shift_matrix, [1, tf.shape(x_shift_matrix)[0], 1]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                             shape=[tf.shape(x_shift_matrix)[0] * tf.shape(y_shift_matrix)[0], 4, 4])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xy_shift_matrix = tf.matmul(broadcast_x,broadcast_y)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    broadcast_xy = tf.tile(xy_shift_matrix, [tf.shape(z_shift_matrix)[0], 1, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    broadcast_z = tf.reshape(tf.tile(z_shift_matrix, [1, tf.shape(xy_shift_matrix)[0], 1]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                             shape=[tf.shape(xy_shift_matrix)[0] * tf.shape(z_shift_matrix)[0], 4, 4])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_matrix = tf.matmul(broadcast_xy, broadcast_z)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return xyz_shift_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef gen_identity_tform(num_frames):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param num_frames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    identity_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.transpose(tf.reshape(identity_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef gen_affine_tform_with_labels(num_frames, x_shift_range=0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      y_shift_range=0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      z_shift_range=0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      x_rot_range=tf.cast(tf.convert_to_tensor(0 * np.pi), tf.float32),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      y_rot_range=tf.cast(tf.convert_to_tensor(0 * np.pi), tf.float32),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      z_rot_range=tf.cast(tf.convert_to_tensor(0 * np.pi), tf.float32),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      shift_partitions=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      rot_partitions=None,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                      abs=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    A highly tunable version of deep affine transform generator. Allows to generate both continuous and discrete123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotations and translations.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param num_frames: number of frames for affine transform123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param x_shift_range: maximum shift by X +/-123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param y_shift_range: maximum shift by Y +/-123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param z_shift_range: maximum shift by Z +/-123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param x_rot_range: rotation around X by +/- in Pi123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param y_rot_range: rotation around Y by +/- in Pi123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param z_rot_range: rotation around Z by +/- in Pi123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param shift_partitions: discretize the shift into shift_partition bins123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param rot_partitions: discretize the rotation into rot_partitions bins123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param abs: take absolute values of shift and rotation partitions123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: num_frames x 4 x 4 matrix of affine transformation matrices stacked along 1st dimension123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF     a num_frames x 6 matrix of [x_shift, y_shift, z_shift, x_rot, y_rot, z_rot]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if shift_partitions is None and not abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_shift = tf.random_uniform([num_frames], minval=-x_shift_range, maxval=x_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_shift = tf.random_uniform([num_frames], minval=-y_shift_range, maxval=y_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_shift = tf.random_uniform([num_frames], minval=-z_shift_range, maxval=z_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif shift_partitions is None and abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_shift = tf.random_uniform([num_frames], minval=0, maxval=x_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_shift = tf.random_uniform([num_frames], minval=0, maxval=y_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_shift = tf.random_uniform([num_frames], minval=0, maxval=z_shift_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif shift_partitions is not None and not abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-shift_partitions, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  x_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-shift_partitions, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  y_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-shift_partitions, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  z_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif shift_partitions is not None and abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=0, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  x_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=0, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  y_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_shift = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=0, maxval=shift_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  z_shift_range / shift_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise ValueError("combination of shift partitions and abs is not in a list of allowed values")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if rot_partitions is None and not abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_rot = tf.random_uniform([num_frames], minval=-x_rot_range, maxval=x_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_rot = tf.random_uniform([num_frames], minval=-y_rot_range, maxval=y_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_rot = tf.random_uniform([num_frames], minval=-z_rot_range, maxval=z_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif rot_partitions is None and abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_rot = tf.random_uniform([num_frames], minval=0, maxval=x_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_rot = tf.random_uniform([num_frames], minval=0, maxval=y_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_rot = tf.random_uniform([num_frames], minval=0, maxval=z_rot_range, dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif rot_partitions is not None and not abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_rot = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-rot_partitions, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                x_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_rot = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-rot_partitions, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                y_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_rot = tf.to_float(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            tf.random_uniform([num_frames], minval=-rot_partitions, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                z_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif rot_partitions is not None and abs:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_rot = tf.to_float(tf.random_uniform([num_frames], minval=0, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        x_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_rot = tf.to_float(tf.random_uniform([num_frames], minval=0, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        y_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_rot = tf.to_float(tf.random_uniform([num_frames], minval=0, maxval=rot_partitions + 1, dtype=tf.int32)) * (123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        z_rot_range / rot_partitions)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise ValueError("combination of rot partitions and abs is not in a list of allowed values")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [1, 0, 0, random_x_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, random_y_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, random_z_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # try to do the following:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # generate nine tensors for each of them123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # concatenate and reshape sixteen tensors123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = x_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = y_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = z_shift123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_matrix = tf.transpose(tf.reshape(xyz_shift_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along X123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[1, 0, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, cos(x_rot),-sin(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, sin(x_rot),cos(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.cos(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = -tf.sin(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.sin(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.cos(x_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot_matrix = tf.transpose(tf.reshape(x_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along Y123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [cos(y_rot), 0,sin(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [-sin(y_rot), 0,cos(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0 ,0 ,1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.cos(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.sin(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = -tf.sin(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.cos(y_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot_matrix = tf.transpose(tf.reshape(y_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[cos(z_rot), -sin(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [sin(z_rot), cos(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_0 = tf.cos(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_1 = -tf.sin(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn0_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_0 = tf.sin(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_1 = tf.cos(z_rot)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn1_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_2 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn2_3 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_0 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_1 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_2 = tf.zeros([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    afn3_3 = tf.ones([num_frames])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot_stick = tf.stack(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        [afn0_0, afn0_1, afn0_2, afn0_3, afn1_0, afn1_1, afn1_2, afn1_3, afn2_0, afn2_1, afn2_2, afn2_3, afn3_0,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF         afn3_1, afn3_2, afn3_3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot_matrix = tf.transpose(tf.reshape(z_rot_stick, [4, 4, num_frames]), perm=[2, 0, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_xyz_rot = tf.matmul(tf.matmul(tf.matmul(xyz_shift_matrix, x_rot_matrix), y_rot_matrix), z_rot_matrix)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_labels = tf.transpose(tf.reshape(tf.stack([x_shift, y_shift, z_shift, x_rot, y_rot, z_rot]), [6, num_frames]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                              perm=[1, 0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(xyz_shift_xyz_rot), tf.Variable(xyz_labels)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef pointcloud_pairlist(source_points,dest_points,cutoffs_xyz,order,keep_null_src=False):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param source_points:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param dest_points:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param cutoffs_xyz:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param order:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param keep_null_src:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param abs_cutoff:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo assert fits;123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo: acceleration123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo: validate gather indices123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo: keep source point even when no neighbor points are around123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # convert to canonical float 32 (assert fits float32 for points)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_coords = tf.to_float(source_points)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_coords = tf.to_float(dest_points)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cutoffs_xyz = tf.to_float(cutoffs_xyz)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    point_mean = tf.reduce_mean(tf.concat([srcpnt_coords,destpnt_coords],0),reduction_indices=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_coords = srcpnt_coords - point_mean123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_coords = destpnt_coords - point_mean123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # index source and destination points123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_srcpnt = tf.shape(srcpnt_coords)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_idx = tf.to_int64(tf.range(num_srcpnt))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_destpnt = tf.shape(destpnt_coords)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_idx = tf.to_int64(tf.range(num_destpnt))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # define a grid of the size cutoff around both of the point clouds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_coords = tf.to_int64((source_points / cutoffs_xyz)+0.5)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_coords = tf.to_int64((dest_points / cutoffs_xyz)+0.5)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # sort both source and destination clouds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_stensor = tf.SparseTensor(indices=srcgrid_coords,values=srcpnt_idx,dense_shape=[1,1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_stensor = tf.sparse_reorder(srcgrid_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_stensor = tf.SparseTensor(indices=destgrid_coords,values=destpnt_idx,dense_shape=[1,1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_stensor = tf.sparse_reorder(destgrid_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_coords = tf.cast(srcgrid_stensor.indices,tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_order = srcgrid_stensor.values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_coords = tf.cast(destgrid_stensor.indices,tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_order = destgrid_stensor.values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find the number of points in every grid (start + end)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_names = tf.bitcast(tf.concat([srcgrid_coords,tf.zeros([num_srcpnt,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_srcgrid_names,srcgrid_ids,srcgrid_counts = tf.unique_with_counts(srcgrid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_starts = tf.segment_min(srcpnt_idx,srcgrid_ids)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_names = tf.bitcast(tf.concat([destgrid_coords,tf.zeros([num_destpnt,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_destgrid_names,destgrid_ids,destgrid_counts = tf.unique_with_counts(destgrid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_starts = tf.segment_min(destpnt_idx,destgrid_ids)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # generate all possible 27 grid neighbors of each of the source grids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_srcgrids = tf.shape(unq_srcgrid_names)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_idx = tf.to_int64(tf.range(num_srcgrids))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_srcgrid_coords = tf.bitcast(unq_srcgrid_names,tf.int16)[:,0:3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_destgrids = tf.shape(unq_destgrid_names)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # itself            (1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # face neighbors    (6)  : +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # edge neighbors    (12) : +/-1 +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # vertex neighbors  (8)  : +/-1 +/-1 +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    neighbor_shift = tf.constant([[0,0,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,0,1],[0,1,0],[1,0,0],[0,0,-1],[0,-1,0],[-1,0,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,1,1],[1,0,1],[1,1,0],[0,-1,-1],[-1,0,-1],[-1,-1,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,1,-1],[1,0,-1],[1,-1,0],[0,-1,1],[-1,0,1],[-1,1,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [1,1,1],[1,1,-1],[1,-1,1],[-1,1,1],[1,-1,-1],[-1,1,-1],[-1,-1,1],[-1,-1,-1]],tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    neighbor_shifts = tf.tile(neighbor_shift,[num_srcgrids,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_nhb_coords = tf.reshape(tf.tile(unq_srcgrid_coords,[1,27]),[-1,3]) + neighbor_shifts123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_nhb_names = tf.bitcast(tf.concat([srcgrid_nhb_coords,tf.zeros([num_srcgrids*27,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_of_srcgrid = tf.reshape(tf.tile(tf.expand_dims(srcgrid_idx, 1), [1, 27]), [-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find grid if grid neighbors of the source grids exist in destination grids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    all_grid_names = tf.concat([unq_destgrid_names,srcgrid_nhb_names],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    _,all_grid_ids,_ = tf.unique_with_counts(all_grid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_of_srcgrid = tf.slice(all_grid_ids,[num_destgrids],[num_srcgrids*27])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filter_notempty = destgrid_of_srcgrid < num_destgrids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_of_srcgrid = tf.boolean_mask(srcgrid_of_srcgrid, filter_notempty)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_of_srcgrid = tf.boolean_mask(destgrid_of_srcgrid, filter_notempty)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_slices = tf.stack([tf.to_int32(tf.gather(srcgrid_starts,srcgrid_of_srcgrid,validate_indices=True)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               tf.gather(srcgrid_counts,srcgrid_of_srcgrid)],axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_slices = tf.stack([tf.to_int32(tf.gather(destgrid_starts,destgrid_of_srcgrid,validate_indices=True)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                tf.gather(destgrid_counts,destgrid_of_srcgrid)],axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # convert the slices of the gerid cells into back into the points123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_1 = affinity.c_lib.int_sequence(srcgrid_slices[:,0], srcgrid_slices[:, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_2 = affinity.c_lib.int_repeat(destgrid_slices[:,1], srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = affinity.c_lib.int_repeat(src_pairs_1, src_pairs_2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_1 = affinity.c_lib.int_repeat(destgrid_slices[:,0],srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_2 = affinity.c_lib.int_repeat(destgrid_slices[:,1],srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = affinity.c_lib.int_sequence(dest_pairs_1,dest_pairs_2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = tf.gather(srcgrid_order,src_pairs, validate_indices=True) # map to the initial order of coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = tf.gather(destgrid_order,dest_pairs, validate_indices=True) # map to the initial order of coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # calculate the exact distance between every pair of points, and crop points that do not fit123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_coords = tf.gather(srcpnt_coords, src_pairs,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_coords = tf.gather(destpnt_coords, dest_pairs,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rel_coords = dest_pairs_coords - src_pairs_coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    in_radii_of_src = tf.reduce_all(tf.abs(rel_coords) < cutoffs_xyz,1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rel_coords = tf.boolean_mask(rel_coords,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = tf.boolean_mask(src_pairs,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = tf.boolean_mask(dest_pairs,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # add back missing source points if necessary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if keep_null_src:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        now_srcpnt_idx = tf.expand_dims(tf.unique(src_pairs).y,0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        missing_src = tf.sets.set_difference(tf.expand_dims(srcpnt_idx,0),now_srcpnt_idx).values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        src_pairs = tf.concat([src_pairs,missing_src],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_miss_src = tf.shape(missing_src)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # set destination pairs as -1 and rel_coords as 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_pairs = tf.concat([dest_pairs,-tf.ones([num_miss_src],tf.int64)],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rel_coords = tf.concat([rel_coords,tf.zeros([num_miss_src,3])],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if order is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif order == 'NAME':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # order by name of the source point only123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_pairs = tf.shape(src_pairs)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_idx = tf.range(0, num_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.SparseTensor(tf.expand_dims(tf.to_int64(src_pairs),1),pairs_idx,dense_shape=[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.sparse_reorder(pairs_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        src_pairs = pairs_stensor.indices[:,0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_pairs = tf.gather(dest_pairs,pairs_stensor.values,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rel_coords = tf.gather(rel_coords,pairs_stensor.values,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif order == 'DIST':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # FIXME: multiplier is unstable123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # order by the source point (first) and by the distance (second)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_pairs = tf.shape(src_pairs)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_idx = tf.range(0, num_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_rel_dist = tf.reduce_sum(rel_coords **2,reduction_indices=1)**0.5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_int_dist = tf.to_int64((pairs_rel_dist / tf.reduce_mean(cutoffs_xyz)) * 1000000)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor_idx = tf.concat([tf.expand_dims(src_pairs,1),tf.expand_dims(pairs_int_dist,1)],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.SparseTensor(pairs_stensor_idx,pairs_idx,dense_shape=[1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.sparse_reorder(pairs_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        src_pairs = pairs_stensor.indices[:,0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_pairs = tf.gather(dest_pairs,pairs_stensor.values,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rel_coords = tf.gather(rel_coords,pairs_stensor.values,validate_indices=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise NotImplementedError("can't order point pairs by",order)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    point_pairs = tf.concat([tf.expand_dims(src_pairs, 1), tf.expand_dims(dest_pairs, 1)], 1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return point_pairs,rel_coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #return num_pairs,num_pairs