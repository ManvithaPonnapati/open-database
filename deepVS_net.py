import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#---------------------------------HYPERPARAMETERS---------------------------------#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#atom type embedding size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFd_atm = 200123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#amino acid embedding size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFd_amino = 200123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#charge embedding size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFd_chrg = 200123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#distance embedding size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFd_dist = 200123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number convolutional filters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFcf = 400123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number hidden units123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFh = 50123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#learning rate123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFl = 0.075123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number of neighbor atoms from ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFk_c = 6123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number of neighbor atoms from protein123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFk_p = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number of atom types123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFATOM_TYPES = 7123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#number of distance bins123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFDIST_BINS = 18123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFDIST_INTERVAL = 0.3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#-------------------------------LAYER CONSTRUCTION--------------------------------#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# telling tensorflow how we want to randomly initialize weights123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef weight_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.truncated_normal(shape, stddev=0.005)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef bias_variable(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    initial = tf.constant(0.01, shape=shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.Variable(initial)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef variable_summaries(var, name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """attaches a lot of summaries to a tensor."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with tf.name_scope('summaries'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mean = tf.reduce_mean(var)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.summary.scalar('mean/' + name, mean)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with tf.name_scope('stddev'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.summary.scalar('stddev/' + name, stddev)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.summary.scalar('max/' + name, tf.reduce_max(var))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.summary.scalar('min/' + name, tf.reduce_min(var))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tf.summary.histogram(name, var)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef embed_layer(layer_name, input_tensor):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""performs feature embedding on the input tensor, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	transforming numbers to 200D vectors.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	Input: tensor of shape k_c * 2 * m123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	Output: tensor of shape [k_c, d_dist + d_atm, m, 1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with tf.name_scope(layer_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		with tf.name_scope('atom_weights'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			W_atom = weight_variable([ATOM_TYPES, d_atm])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		with tf.name_scope('dist_weights'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			W_dist = weight_variable([DIST_BINS, d_dist])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		h_embed = tf.nn.embedding_lookup([W_atom, W_dist], input_tensor, name='embed_layer')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		h_embed = tf.transpose(h_embed, perm=[0, 1, 3, 2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		h_embed = tf.reshape(h_embed, [1, k_c, d_atm+d_dist, -1, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	print layer_name, "output dimensions:", h_embed.get_shape()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return h_embed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef conv_layer(layer_name, input_tensor, filter_size, strides=[1,1,1,1,1], padding='SAME'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""makes a simple face convolutional layer"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with tf.name_scope(layer_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		with tf.name_scope('weights'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			W_conv = weight_variable(filter_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			variable_summaries(W_conv, layer_name + '/weights')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		with tf.name_scope('biases'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			b_conv = bias_variable([filter_size[3]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			variable_summaries(b_conv, layer_name + '/biases')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		h_conv = tf.nn.conv3d(input_tensor, W_conv, strides=strides, padding=padding) + b_conv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		tf.summary.histogram(layer_name + '/pooling_output', h_conv)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	print layer_name,"output dimensions:", h_conv.get_shape()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return h_conv123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef fc_layer(layer_name,input_tensor,output_dim):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""makes a simple fully connected layer"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	input_dim = int((input_tensor.get_shape())[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with tf.name_scope(layer_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		weights = weight_variable([input_dim, output_dim])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		variable_summaries(weights, layer_name + '/weights')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with tf.name_scope('biases'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		biases = bias_variable([output_dim])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		variable_summaries(biases, layer_name + '/biases')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with tf.name_scope('Wx_plus_b'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		h_fc = tf.matmul(input_tensor, weights) + biases123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		tf.summary.histogram(layer_name + '/fc_output', h_fc)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	print layer_name, "output dimensions:", h_fc.get_shape()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return h_fc123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#-----------------------------------NETWORK----------------------------------------#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass Z(object):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def __init__(self, ligand_atoms, ligand_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		""" Takes input ligand_atoms, ligand_coords in the form of lists. Transforms ligand_coords into 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		a dictionary and constructs z, a [m * kc * 2] matrix. """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		self.ligand_atoms = ligand_atoms123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		ligand_coords_dict = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		for i in range(len(ligand_atoms)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			ligand_coords_dict[i] = ligand_coords[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		self.ligand_coords = ligand_coords_dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		self.z = self.build_z()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def build_z(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		#returns matrix of dimensions [m * kc * 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		raw_z = self.get_raw_z()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		for atom_index in range(len(raw_z)): #iterate over atoms dimension (m)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			for neighbor_index in range(len(raw_z[0])): #iterate over neighbors (kc)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				atom, distance = raw_z[atom_index][neighbor_index]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				raw_z[atom_index][neighbor_index][0] = self.ligand_atoms[raw_z[atom_index][neighbor_index][0]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				raw_z[atom_index][neighbor_index][1] = int(distance//DIST_INTERVAL + 1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		return raw_z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def get_raw_z(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		#returns matrix of dimensions [m * kc * 2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		raw_z = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		for atom_index in range(len(self.ligand_atoms)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			kc_neighbors_dict = self.get_closest_atoms_and_distances(atom_index)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			kc_neighbors_list = [[neighbor, distance] for neighbor, distance in kc_neighbors_dict.items()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			kc_neighbors_list.sort(key=lambda x: x[1]) #sort by distance123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			raw_z.append(kc_neighbors_list) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		return raw_z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def get_closest_atoms_and_distances(self, atom_index):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		distances = self.convert_coords_to_distances(atom_index)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		closest = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		for _ in range(k_c):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			closest_atom = min(distances, key=distances.get)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			closest[closest_atom] = distances[closest_atom]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			del distances[closest_atom]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		return closest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def convert_coords_to_distances(self, atom_index):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		ligand_distances = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		atom_coord = self.ligand_coords[atom_index]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		for neighbor in self.ligand_coords:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			ligand_distances[neighbor] = self.distance(self.ligand_coords[neighbor], atom_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		return ligand_distances123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	def distance(self, coord1, coord2):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		x1, y1, z1 = coord1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		x2, y2, z2 = coord2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		return ((x1-x2) ** 2 + (y1-y2) ** 2 + (z1-z2) ** 2) ** 0.5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef construct_z(ligand_atoms, ligand_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	""" Returns the z, that has not done feature embedding. Returns array. """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return Z(ligand_atoms, ligand_coords).z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef deepVS_net(input_tensor, keep_prob):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""input_tensor is a tensor of shape [k_c * 2 * m]"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#do the feature embedding to get a tensor with shape [k_c, d_dist+d_atm, m, 1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_embed = embed_layer('embedding', input_tensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#convolutional layer - padding = 'VALID' prevents 0 padding123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_conv = conv_layer('face_conv', input_tensor=z_embed, filter_size=[k_c, d_atm+d_dist, 1, 1, cf], padding='VALID')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#max pool along the columns (corresponding to each convolutional filter)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_pool = tf.reduce_max(z_conv, axis=[3], keep_dims=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#pool gives us batch*1*1*1*cf tensor; flatten it to get a tensor of length cf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#NOTE: THIS IS ACTUALLY 2D in batch!123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_flattened = tf.reshape(z_pool, [-1, cf])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#fully connected layer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_fc1 = fc_layer(layer_name='fc1', input_tensor=z_flattened, output_dim=h)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#dropout123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	#output layer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	z_output = fc_layer(layer_name='out_neuron', input_tensor=z_fc1, output_dim=2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return z_output