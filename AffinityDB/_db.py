"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFcreate database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sqlite3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport base64 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport json123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import lock 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import lockit, param_equal 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport csv 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple, OrderedDict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom database_table import basic_tables, tables123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass AffinityDatabase:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    A simple warpper for sqlite3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.db_path = config.db_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.tables = tables123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(os.path.dirname(self.db_path)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.makedirs(os.path.dirname(self.db_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(self.db_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.backup_and_reset_db()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.connect_db()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def connect_db(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conn = sqlite3.connect(self.db_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.connect = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "connect to %s" % self.db_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def backup_db(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        backup_db_path = self.db_path.replace('.', '_'+time.strftime("%Y-%m-%d-%H:%M:%S", time.gmtime()) +'.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if os.path.exists(self.db_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cmd = 'cp %s %s' % (self.db_path , backup_db_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "backup database %s" % backup_db_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def backup_and_reset_db(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        backup current database and create a new one123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if os.path.exists(self.db_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            backup_db_path = self.db_path.replace('.', '_' + time.strftime("%Y-%m-%d-%H:%M:%S", time.gmtime()) + '.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.rename(self.db_path, backup_db_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.connect_db()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.init_table()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def next_table_sn(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select count(*) from sqlite_master where type="table";'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_num = cursor.fetchone()[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sn = table_num - len(basic_tables.keys()) + 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return sn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def create_table(self, table_name, table_type, parameter, dependence):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        encoded_param = base64.b64encode(json.dumps(parameter))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tab = self.tables[table_type]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'create table ' + table_name + ' ('        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for key in tab.columns.keys():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            stmt += key + ' ' + tab.columns[key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if key in tab.primary_key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                stmt += ' not null ,'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                stmt += ' ,'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt += 'primary key(' + ','.join(tab.primary_key) + '));'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conn.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        create_time = time.strftime("%Y-%m-%d", time.gmtime())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        values =[table_name, table_type, create_time, encoded_param]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.insert('db_info',[values])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for depend_table in dependence:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.insert('dependence',[[depend_table, table_name]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conn.commit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def depend_source_for(self, table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select source from dependence where ' + 'dest="%s"; ' % table_name 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        source = cursor.fetchall()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(source):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            source = map(lambda x:x[0], source)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return list(source)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def depend_dest_for(self, table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select dest from dependence where' + 'source="%s";' % table_name 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest = cursor.fetchall()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(dest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            dest = map(lambda x:x[0], dest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return list(dest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def table_type(self, table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select type from db_info where name="%s";' % table_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        value = cursor.fetchone()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if value is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("table %s doesn't exists" % table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return value[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_depend_table(self, table_name, table_type):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend_tables = self.depend_source_for(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend_tables:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if self.table_type(tab) == table_type:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                return tab 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception("Cannot find depend table of type {} for table {}" %(table_type, table_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_table(self, table_type, dependence, parameter):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not table_type in self.tables.keys():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("Cannot create table of type {}\n".format(table_type),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        + "available table type {}\n".format(list(self.tables.keys())))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select name, parameter from db_info where type="%s"' % table_type123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        values = cursor.fetchall()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_table = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(values) > 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for name, param in values:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                decoded_param = base64.b64decode(param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                parsed_param = json.loads(decoded_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print param_equal(parameter, parsed_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if param_equal(parameter,parsed_param):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    dest_table = name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    break123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if dest_table is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            depend_list = self.depend_source_for(dest_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print depend_list 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print dependence123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if not sorted(depend_list) == sorted(dependence):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                dest_table = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if dest_table is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            table_sn = self.next_table_sn()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            table_name = '{}_{}'.format(table_type,table_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.create_table(table_name, table_type, parameter, dependence)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            dest_table = table_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return dest_table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def insert(self, table_name, values, head=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.insert_or_replace(table_name, values, head)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def insert_or_replace(self, table_name, values, head=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db_value = lambda x:'"%s"' % x if type(x).__name__ in ['str','unicode'] else str(x)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db_values = [ map(db_value, value) for value in values ]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sql_values = [ '(' + ','.join(value) + ')' for value in db_values ]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'replace into ' + table_name + ' '123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if head is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            stmt += '(' + ','.join(head) + ')'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt += ' values '123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt += ','.join(sql_values)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt += ';'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print stmt123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conn.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.conn.commit()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def primary_key_for(self, table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select type from db_info where name="%s";' % table_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        value = cursor.fetchone()[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return tables[value].primary_key123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_all_success(self, table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = self.primary_key_for(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt = 'select ' + ','.join(primary_key) + ' from ' + table_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        stmt += ' where state=1;'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor = self.conn.cursor()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cursor.execute(stmt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        values = cursor.fetchall()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def init_table(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'init'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in basic_tables.values():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            stmt = 'create table '+ tab.type + ' ('123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for key in tab.columns.keys():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                stmt += key + ' ' + tab.columns[key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if key in tab.primary_key:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    stmt += ' not null ,'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    stmt += ' ,'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            stmt += 'primary key(' + ','.join(tab.primary_key) + '));'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print "create ",tab.type123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.conn.execute(stmt)