"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport multiprocessing123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport argparse123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import partial123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import log, smina_param, timeit, count_lines123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sqlite3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom profilehooks import profile123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom db import database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdb = database()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFmkdir = lambda path: os.system('mkdir -p {}'.format(path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFligand_name_of = lambda x:os.path.basename(x).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFreceptor_of = lambda x:os.path.basename(x).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFreceptor_path_of = lambda x:os.path.join(config.splited_receptors_path, receptor_of(x)+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download_pdb(pdb_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Download pdb file from rcsb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(os.path.join(config.pdb_download_path, pdb_name + '.pdb')):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_address = 'https://files.rcsb.org/download/{}.pdb'.format(pdb_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('wget -P {}  {}'.format(config.pdb_download_path, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Download ", pdb_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_structure(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Split downloaded pdb into receptor and ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record pdb's resolution123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record ligand's heavy atom num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_name = os.path.basename(pdb_path).split('.')[0].lower()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [pdb_name, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('split_state',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print 'insert'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_failed.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(pdb_name, str(e)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [ pdb_name, header['experiment'], header['resolution']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('resolution',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('resolution.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(pdb_name, header['resolution']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='pdb,resolution')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [pdb_name, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('split_state',data, head)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_header_failed.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           '{},{}'.format(pdb_name, str(e)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    hetero = parsed.select(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '(hetero and not water) or resname ATP or resname ADP or resname AMP or resname GTP or resname GDP or resname GMP')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor = parsed.select('protein or nucleic')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if receptor is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [pdb_name, 0, "No receptor found"]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('split_state',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "No receptor found")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if hetero is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [pdb_name, 0, "No ligand found"]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [[data]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('SPLIT_STATE',data, head)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "No ligand found")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # write ligand into file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for each in prody.HierView(hetero).iterResidues():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResId = each.getResindex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResName = each.getResname()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_path = os.path.join(config.splited_ligands_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   pdb_name,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   "{}_{}_{}_ligand.pdb".format(pdb_name, ResName, ResId))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.writePDB(ligand_path, each)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_num = each.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = ["{}_{}_{}".format(pdb_name, ResName, ResId), 'ligand', atom_num]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('atom_num',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('atom_num.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}_{}_{},{}".format(pdb_name, ResName, ResId, atom_num),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,atom_num')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, pdb_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody.writePDB(receptor_path, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_atom_num = receptor.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [pdb_name, 'receptor', receptor_atom_num]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    db.insert_or_replace('atom_num', data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [pdb_name, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    db.insert_or_replace('split_state',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log('success_split_pdb.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '{},success'.format(pdb_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='pdb,status')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef reorder_ligand(input_dir, output_dir, smina_pm, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    smina output file change the order of atom,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    inorder to get correct rmsd value, we just read the123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal ligand and write it by smina to keep the 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atom order the same as docking result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lignad_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = receptor_path_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = receptor_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    out_ligand_path = ligand_path.replace(input_dir, output_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'receptor':receptor_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'ligand'  :ligand_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'out'     :out_ligand_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(out_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(out_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cont = cl.communicate()[0].strip().split('\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        terms = [line.strip().split(' ')[2:] for line in cont if line.startswith('##')]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = map(lambda x:x.replace(',',' '),terms[0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = ['ligand','position'] + map(lambda x:'"%s"' % x, head)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [ligand_name, 0] + map(lambda x:float(x),terms[1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('scoring_terms',data,head)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_similar_ligands(ligand_path,finger_print='FP4'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate tanimoto similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return the ligands with high tanimoto similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligand = os.path.join(config.smina_std_path, receptor, '_'.join([receptor, lig, resid, 'ligand.pdb']))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligands_list = glob(os.path.join(os.path.dirname(crystal_ligand), '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligands_for_same_receptor = list(set(ligands_list) - set([crystal_ligand]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    similar_ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for lig_path in ligands_for_same_receptor:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = 'babel -d {} {} -ofpt -xf{}'.format(ligand_path, lig_path, finger_print)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ls = os.popen(cmd).read()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        tanimoto_similarity = re.split('=|\n', ls)[2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print tanimoto_similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_pair = [ligand_name_of(ligand_path), ligand_name_of(lig_path)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_pair = lig_pair if lig_pair[0]<lig_pair[1] else [lig_pair[1],lig_pair[0]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = lig_pair + [finger_print, tanimoto_similarity]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('similarity',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('tanimoto_similarity.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{},{}'.format(ligand_name_of(ligand_path), ligand_name_of(lig_path), tanimoto_similarity),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='lig_a,lig_b,finger_print, tanimoto')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if tanimoto_similarity > config.tanimoto_cutoff:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            similar_ligands.append([lig_path, tanimoto_similarity, finger_print])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return crystal_ligand, similar_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_same_ligands(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    get the path of ligands, they are the same ligand docked to the same receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    but different binding site.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    same_ligands = glob(os.path.join(config.smina_std_path,receptor, '{}_{}_*.pdb'.format(receptor, lig)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return same_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_clash(docked_ligand, crystal_ligand, similarity):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for all position in docked_ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate if they are clash with crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param docked_ligand: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param crystal_ligand: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked = prody.parsePDB(docked_ligand).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{},{}".format(ligand_name_of(docked_ligand), str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal = prody.parsePDB(crystal_ligand).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{},{}".format(ligand_name_of(crystal_ligand), str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    expanded_docked = np.expand_dims(docked, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    diff = expanded_docked - crystal123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    distance = np.sqrt(np.sum(np.power(diff, 2), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    all_clash = (distance < config.clash_cutoff_A).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atom_clash = (np.sum(all_clash, axis=-1) > 0).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash = np.mean(atom_clash, axis=-1) > config.clash_size_cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash_ratio = np.mean(atom_clash, axis=-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash_ratio = sum(position_clash.astype(float))/len(position_clash)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash = position_clash.astype(int).astype(str)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i,ratio in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = [ligand_name_of(docked_ligand), ligand_name_of(crystal_ligand), i+1, ratio]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data.append(datum)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    db.insert_or_replace('overlap',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    head = ['docked_ligand','crystal_ligand','similarity','positon','precent_of_overlaping_atom']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    datum = [ligand_name_of(docked_ligand), ligand_name_of(crystal_ligand), str(similarity)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i, pcr in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data.append(','.join(datum+[str(i+1), str(pcr)]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("ligand_pair_overlap.csv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = ','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #   log("single_overlap.tsv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       '\t'.join([ligand_name_of(docked_ligand), ligand_name_of(crystal_ligand), str(clash_ratio), ','.join(clash)]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       head='\t'.join(['docked_ligand','crystal_ligand','overlap_ratio','overlap_status']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef detect_overlap(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if docked result overlap with other crystal ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    splited from the same receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    note crystal ligand should reordered by smina123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligand, similar_ligands = get_similar_ligands(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(similar_ligands) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_ligand_skip.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}, doesn't have similar ligands".format(ligand_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for lig_path, similarity, finger_print in similar_ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cur_position_clash = calculate_clash(ligand_path, lig_path, similarity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if position_clash == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            position_clash = cur_position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            position_clash += cur_position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #print similar_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash = list(position_clash.astype(int).astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash_ratio = sum(position_clash.astype(float))/len(position_clash)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("overlap.tsv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '\t'.join([ligand_name, str(clash_ratio), ','.join(clash)]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='\t'.join(['ligand','overlap_ratio','overlap_status']))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef count_rotable_bond(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    count the number of rotable bond in ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    obConversion = openbabel.OBConversion()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    OBligand = openbabel.OBMol()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rot_bond = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not obConversion.ReadFile(OBligand, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("rotbond_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}, cannot parse by openbabel".format(ligand_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for bond in openbabel.OBMolBondIter(OBligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if  not bond.IsSingle() or bond.IsAmide() or bond.IsInRing():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif bond.GetBeginAtom().GetValence() == 1 or bond.GetEndAtom().GetValence() == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rot_bond += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [ligand_name, rot_bond]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    db.insert_or_replace('rotable_bond',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("rotbond.csv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        "{},{}".format(ligand_name, rot_bond),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='ligand,rotbond')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_rmsd(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate rmsd between docked ligands and crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    note when calculate rmsd, crystal ligand should be reordered by smina123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligands = get_same_ligands(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(ligand_path).select('not hydrogen').getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for crystal_ligand in crystal_ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            crystal_coord = prody.parsePDB(crystal_ligand).select('not hydrogen').getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rmsd = np.sqrt(np.mean(np.sum(np.square(docked_coords - crystal_coord), axis=-1), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i,rd in enumerate(rmsd):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                datum = [ligand_name, ligand_name_of(crystal_ligand), i+1, rd ]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data.append(datum)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            db.insert_or_replace('rmsd',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data = [ligand_name, ligand_name_of(crystal_ligand), 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            db.insert_or_replace('rmsd_state',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rmsd_str = ','.join(rmsd.astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head = ['ligand','crystal_ligand','rmsd']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            log('rmsd.tsv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                '\t'.join([ligand_name, ligand_name_of(crystal_ligand), rmsd_str]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                head=','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('rmsd_failed.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(ligand_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_native_contact(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate native contact between the ligand and receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    notice when calculating native contact, we ignore all hydrogen123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print ligand_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, res_name, res_id, _  = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligand_dir = os.path.dirname(ligand_path).replace('/docked_ligands/','/crystal_ligands/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligand_path = os.path.join(crystal_ligand_dir,'_'.join([receptor, res_name, res_id, 'ligand.pdb']) )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = receptor_path_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_ligands = prody.parsePDB(ligand_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_crystal = prody.parsePDB(crystal_ligand_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_receptor = prody.parsePDB(receptor_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_atom_num = parsed_crystal.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_atom_num = parsed_ligands.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert cry_atom_num == ligand_atom_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_coords = parsed_ligands.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = parsed_crystal.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_coord = parsed_receptor.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_crystal_coord = np.expand_dims(crystal_coord, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_diff = exp_crystal_coord - receptor_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_distance = np.sqrt(np.sum(np.square(cry_diff), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_ligands_coords = np.expand_dims(ligands_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_diff = exp_ligands_coords - receptor_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_distance = np.sqrt(np.sum(np.square(lig_diff),axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_native_contact = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for threshold in np.linspace(4,8,9):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cry_contact = ( cry_distance < threshold ).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_contact = np.sum(cry_contact).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lig_contact = (lig_distance < threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            contact_ratio = np.sum(cry_contact * lig_contact, axis=(-1,-2)) / num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if num_native_contact is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                num_native_contact = contact_ratio123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                num_native_contact = np.dstack((num_native_contact, contact_ratio))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # after dstack shape become [1, x, y]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_native_contact = num_native_contact[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, nts in enumerate(num_native_contact):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            datum = [ligand_name, i+1, nts[0], nts[1]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('native_contact',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = ['ligand','heavy_atom_num', 'position'] + list(np.linspace(4,8,9).astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in range(len(num_native_contact)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(','.join([ligand_name, str(ligand_atom_num)  ,str(i+1)]+ list(num_native_contact[i].astype(int).astype(str))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #log("native_contact.csv", ','.join([ligand_name, str(ligand_atom_num)  ,str(i+1)]+ list(num_native_contact[i].astype(int).astype(str))), head=','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #log("ratio_native_contact.csv", ','.join([ligand_name, str(i+1)]+ list(ratio_native_contact[i].astype(str))), head=','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('native_contact.csv', data, head= ','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('native_contact_failed.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{},{}'.format(receptor_of(ligand_name), ligand_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head=','.join(['receptor','ligand','exception']))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef add_hydrogen(input_dir, output_dir, input_file):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    add hydrogens to molecule123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_file = input_file.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_file = input_file.replace(input_dir, output_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(os.path.dirname(output_file)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            mkdir(os.path.dirname(output_file))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(output_file):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cmd = 'obabel -ipdb {} -opdb -O {} -h'.format(input_file, output_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef smina_dock(input_dir, output_dir, smina_pm, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dock ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = receptor_path_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = ligand_name.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_name = os.path.basename(ligand_path).replace('ligand', smina_pm.name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_path = os.path.join(output_dir, receptor_name, docked_ligand_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'receptor':receptor_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'ligand'  :ligand_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'autobox_ligand' : ligand_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'out'     :docked_ligand_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if os.path.exists(docked_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(docked_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(docked_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        c_cmd = 'wc -l'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef clean_empty_ligand(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for some reason, dock failed and nothing in the output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    remove empty file, and change dock status to failure123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not count_lines(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = 'rm %s' % ligand_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [ligand_name, 0, 'empty']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_or_replace('dock_state',data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF@profile123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run(target_list, func):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    func(target_list[3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool = multiprocessing.Pool(config.process_num)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.map_async(func, target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.initdb:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.backup_and_reset_db()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.download:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Downloading pdb from rcsb..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_list = open(config.list_of_PDBs_to_download).readline().strip().split(', ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.pdb_download_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(download_list, download_pdb)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.split:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Spliting receptor and ligand..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        structure_list = glob(os.path.join(config.pdb_download_path, '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.splited_receptors_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(structure_list, split_structure)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.reorder:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Reorder ligands atom..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.ser_smina(config.smina)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_name('reorder')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.load_param(*config.reorder_pm['arg'], **config.reorder_pm['kwarg'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligand_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, reorder_ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rotbond:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Counting rotable bonds..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, count_rotable_bond)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.cleanempty:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Cleaning empty docking result"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path,'docked_ligands' , '*' ,'*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, clean_empty_ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.overlap:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Overlap detecting..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path,'docked_ligands', '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #ligands_list = ['/home/xander/affinityDB/data/vinardo/1a0b/1a0b_ZN_117_vinardo.pdb']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, detect_overlap)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rmsd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Calculating rmsd..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path,'docked_ligands', '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, calculate_rmsd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.contact:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Calculating native contact between receptor and ligand..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path,'docked_ligands', '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, calculate_native_contact)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print "Calculating native contact between ligands..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #run(ligands_list, ligands_pair_native_contact)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.addh:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to receptor..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptors_list = glob(os.path.join(config.splited_receptors_path,'*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_receptors_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(receptors_list,partial(add_hydrogen, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to original ligands ..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligands_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(add_hydrogen, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to smina ligands ..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.smina_std_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.smina_std_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(add_hydrogen, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.vinardo:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Reorder ligands atom..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_smina(config.smina)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_name('reorder')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.load_param(*config.reorder_pm['arg'], **config.reorder_pm['kwarg'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligands_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = os.path.join(config.vinardo_docked_path,'crystal_ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = output_dir.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(reorder_ligand, input_dir, output_dir, smina_pm))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Smina Vinardo dokcing..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_smina(config.smina)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_name('vinardo')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.load_param(*config.vinardo_pm['arg'],**config.vinardo_pm['kwarg'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligands_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = os.path.join(config.vinardo_docked_path,'docked_ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = output_dir.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(smina_dock, input_dir, output_dir, smina_pm))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser = argparse.ArgumentParser("Database Create Option")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--download', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--split', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--vinardo', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rotbond', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--reorder', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--overlap', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rmsd', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--contact', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--addh', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--initdb', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--cleanempty', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #parser.add_argument('--dock', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    FLAGS, unparsed = parser.parse_known_args()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    main()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF