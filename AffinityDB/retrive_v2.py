import os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numbers 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom database_action import db 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport six 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFsys.path.append('..')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _receptor(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return os.path.basename(path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atomic_tag_number = atom_dictionary.ATM[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef save_av4(filepath,labels,elements,multiframe_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.asarray(labels,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elements = np.asarray(elements,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    multiframe_coords = np.asarray(multiframe_coords,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (int(len(multiframe_coords[:,0]) == int(len(elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if multiframe_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not int(len(labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception ('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(multiframe_coords[0, 0, :]) == int(len(labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    number_of_examples = np.array([len(labels)], dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record = number_of_examples.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += labels.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += elements.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += multiframe_coords.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f = open(filepath, 'w')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f.write(av4_record)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert_data_to_av4(base_dir, rec_path, lig_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_dir = os.path.join(base_dir, _receptor(rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(dest_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_receptor = prody.parsePDB(rec_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_ligand = prody.parsePDB(lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    multiframe_ligand_coords = prody_ligand.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    multiframe_ligand_coords = np.expand_dims(multiframe_ligand_coords,-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.array([1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_elements = map(atom_to_number,prody_receptor.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_elements = map(atom_to_number,prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return None, None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_name = os.path.basename(rec_path).replace('.pdb','.av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_name = os.path.basename(lig_path).replace('.pdb','.av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_rec_path = os.path.join(dest_dir,rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_lig_path = os.path.join(dest_dir,lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_av4(av4_rec_path,[0], receptor_elements, prody_receptor.getCoords())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_av4(av4_lig_path, labels , ligand_elements, multiframe_ligand_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return av4_rec_path, av4_lig_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass table(pd.DataFrame):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def apply_rest(self, key, val):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if isinstance(val, numbers.Number) or isinstance(val, six.string_types):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = self[self[key] == val]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, list):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] >= minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] <= maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, tuple):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] > minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] < maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif val is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("Restrictions type {} doesn't support.".format(type(val).__name__))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return table(self)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __and__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self = self.merge(other).drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return table(self)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __or__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self = self.merge(other, how='outer').drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __sub__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        s = set(map(tuple, list(slef.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        o = set(map(tuple, list(other.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = s - o123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        columns = self.columns123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(diff):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = table(list(diff), columns=columns)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = table()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass retrive_av4:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, folder_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.folder_name = folder_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def receptor(self, receptor_sn):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, rec = db.get_success_data(receptor_sn, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(receptor_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec = rec[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.rec = table(rec)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_folder = db.get_folder(receptor_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.rec_folder = '{}_{}'.format(receptor_sn, rec_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def crystal(self, crystal_sn):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, cry = db.get_success_data(crystal_sn, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(crystal_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry = cry[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.cry = table(cry)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_folder = db.get_folder(crystal_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.cry_folder = '{}_{}'.format(crystal_sn, cry_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def norm_affinity(self, affinity_sn, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, affinity = db.get_success_data(affinity_sn, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        affinity = table(affinity).apply_rest('norm_affinity',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        affinity = affinity[primary_key+['norm_affinity']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.affinity is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.affinity = table(affinity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.affinity = self.affinity and table(affinity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def log_affinity(self, affinity_sn, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, affinity = db.get_success_data(affinity_sn, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        affinity = table(affinity).apply_rest('log_affinity',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_sn)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        affinity = affinity[primary_key+['log_affinity']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.affinity is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.affinity = table(affinity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.affinity = self.affinity and table(affinity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_receptor_and_ligand(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        valid = self.affinity & self.rec & self.cry 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        collection = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in range(len(valid)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            item = valid.ix[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rec = item['receptor']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            file = '{}_{}_{}_{}'.format(*item[['receptor', 'chain', 'resnum', 'resname']])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            receptor_path = os.path.join(config.data_dir, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    self.rec_folder, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    item['receptor'],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    file+'_receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                       self.cry_folder ,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                       item['receptor'],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                       file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if 'log_affinity' in valid.columns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = item['log_affinity']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = item['norm_affinity']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            collection.append([receptor_path, ligand_path, affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print(set(map(lambda x:len(x),collection)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(config.table_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.makedirs(config.table_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(collection,columns=['receptor','ligand','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(config.table_dir,'raw.csv'), index=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        export_dir = os.path.join(config.database_root, self.folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        index = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for rec, lig, aff in collection:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rec_path, lig_path = convert_data_to_av4(export_dir, rec, lig)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if rec_path is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            index.append([rec_path, lig_path, aff])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(index, columns=['receptor','ligand','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(config.table_dir,'index.csv'), index=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef test():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra = retrive_av4('av4') # output's filder name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.receptor(2) # splited receptor table sn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.crystal(3) # splited ligand table sn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.log_affinity(4, [None,-27]) # affinity table sn , [minimum, maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.get_receptor_and_ligand() # convert file into av4 format