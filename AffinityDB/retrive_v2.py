import os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numbers 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom database_action import db 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport six 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFsys.path.append('..')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _receptor(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return os.path.basename(path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atomic_tag_number = atom_dictionary.ATM[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef save_av4(filepath,labels,elements,multiframe_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.asarray(labels,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elements = np.asarray(elements,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    multiframe_coords = np.asarray(multiframe_coords,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (int(len(multiframe_coords[:,0]) == int(len(elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if multiframe_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not int(len(labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception ('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(multiframe_coords[0, 0, :]) == int(len(labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    number_of_examples = np.array([len(labels)], dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record = number_of_examples.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += labels.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += elements.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_record += multiframe_coords.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f = open(filepath, 'w')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f.write(av4_record)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    f.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert_data_to_av4(base_dir, rec_path, lig_path, doc_path, position, affinity):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_dir = os.path.join(base_dir, _receptor(rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(dest_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_receptor = prody.parsePDB(rec_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_ligand = prody.parsePDB(lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_elem = prody_receptor.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_elem =prody_ligand.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_coords = prody_ligand.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.array([affinity], dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(position):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # docked list not empty123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody_docked = prody.parsePDB(doc_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_elem = prody_docked.getElemens()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert all(np.asarray(docked_elem) == np.asarray(ligand_elem))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody_docked.getCoordsets()[position]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for docked_coord in docked_coords:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_coords = np.dstack((ligand_coords, docked_coord))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            labels = np.concatenate((labels, [1.]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_coords = np.expand_dims(ligand_coords,-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_elements = map(atom_to_number,receptor_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_elements = map(atom_to_number,ligand_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return None, None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_name = os.path.basename(rec_path).replace('.pdb','.av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_name = os.path.basename(lig_path).replace('.pdb','.av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_rec_path = os.path.join(dest_dir,rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    av4_lig_path = os.path.join(dest_dir,lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_av4(av4_rec_path,[0], receptor_elements, prody_receptor.getCoords())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_av4(av4_lig_path, labels , ligand_elements, ligand_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return av4_rec_path, av4_lig_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass table(pd.DataFrame):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def apply_rest(self, key, val):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if isinstance(val, numbers.Number) or isinstance(val, six.string_types):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = self[self[key] == val]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, list):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] >= minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] <= maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, tuple):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] > minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    self = self[self[key] < maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif val is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("Restrictions type {} doesn't support.".format(type(val).__name__))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return table(self)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __and__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self = self.merge(other).drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return table(self)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __or__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self = self.merge(other, how='outer').drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __sub__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        s = set(map(tuple, list(slef.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        o = set(map(tuple, list(other.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = s - o123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        columns = self.columns123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(diff):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = table(list(diff), columns=columns)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self = table()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass retrive_av4:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self, folder_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.folder_name = folder_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.export_dir = os.path.join(config.export_dir, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        while os.path.exists(self.export_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            timestr = time.strftime('%m_%d_%H', time.gmtime())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.export_dir = self.export_dir + '_' + timestr123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ligand = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.position = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.receptor_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ligand_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.docked_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def receptor(self, receptor_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(receptor_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(receptor_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand  = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand and df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name = db.get_folder(receptor_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.receptor_folder = '{}_{}'.format(receptor_idx, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def crystal(self, crystal_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df  = db.get_success_data(crystal_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(crystal_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name  = db.get_folder(crystal_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ligand_folder = '{}_{}'.format(crystal_idx, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def docked(self, docked_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(docked_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(docked_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name = db.get_folder(docked_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.docked_folder = '{}_{}'.format(docked_idx, folder_name )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def overlap(self, overlap_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(overlap_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(overlap_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('overlap',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.docked & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def rmsd(self, rmsd_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(crystal_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(rmsd_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df= df[primary_key + ['rmsd']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('rmsd',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.position & df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def native_contact(self, native_contact_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(native_contact_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(native_contact_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key + ['native_contact']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('native_contact',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.position & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def norm_affinity(self, affinity_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = 'norm_affinity'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(affinity_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+[self.affinity_key]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest(self.affinity_key,rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def log_affinity(self, affinity_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = 'log_affinity'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(affinity_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+[self.affinity_key]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest(self.affinity_key,rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def get_receptor_and_ligand(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            valid = self.ligand 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            collection = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i in range(len(valid)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                item = valid.ix[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor = item['receptor']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                file = '_'.join(item[['receptor', 'chain', 'resnum', 'resname']])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_path = os.path.join(config.data_dir, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.receptor_folder, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.ligand_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                docked_path = ''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                positions = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = item[self.affinity_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                collection.append([receptor_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                ligand_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                docked_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                positions, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            valid = self.ligand and self.position  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            collection =[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for keys, group in valid.groupby(['receptor','chain','resnum','resname', aff_key]):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor = keys[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                file = '_'.join(keys[:4])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_path = os.path.join(config.data_dir, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.receptor_folder, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.ligand_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                docked_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.docked_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                positions = sorted(group['position'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = list(set(group[self.affinity_key]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                assert len(affinity) == 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = affinity[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                collection.append([receptor_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   ligand_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   docked_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   positions, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print(set(map(lambda x:len(x),collection)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        export_table_dir = os.path.join(self.export_dir,'index')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(export_table_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.makedirs(export_table_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(collection,columns=['receptor','ligand','docked','position','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(export_table_dir,'raw.csv'), index=False, sep='\t')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data_export_dir = os.path.join(self.export_dir,'data')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        index = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for receptor, ligand, docked, position, aff in collection:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rec_path, lig_path = convert_data_to_av4(data_export_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     ligand,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     docked,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     position,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     aff)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if rec_path is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            index.append([rec_path, lig_path, affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(index, columns=['receptor','ligand','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(export_table_dir,'index.csv'), index=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef test():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra = retrive_av4('av4') # output's filder name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.receptor(2) # splited receptor table sn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.crystal(3) # splited ligand table sn123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.log_affinity(9, [None,0.2]) # affinity table idx , [minimum, maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.get_receptor_and_ligand() # convert file into av4 format123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    test()