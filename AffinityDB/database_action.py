"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import partial123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import log, smina_param, timeit, count_lines123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import data_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom db_v2 import AffinityDatabase123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdb = AffinityDatabase()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _makedir(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = datum    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = param['folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name = '{}_{}'.format(table_sn, folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_dir = os.path.join(data_dir, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(dest_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            download_address = 'https://files.rcsb.org/download/{}.pdb'.format(receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system('wget -P {} {}'.format(dest_dir, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = [receptor,header['experiment'], header['resolution'], 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = [datum,'unk',0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_ligand(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(datum,).__name__ in ['tuple','list']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            datum = datum[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = param['folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = '{}_{}'.format(table_sn, folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_folder = param['download_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_dir = os.path.join(data_dir, download_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(pdb_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_dir = os.path.join(data_dir, folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(lig_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chem in header['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            chain, resnum, resname = chem.chain, chem.resnum, chem.resname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligands.append([chain, str(resnum), resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig = parsed.select('chain {} resnum {}'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = lig.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_name = '_'.join([receptor,chain,resnum,resname,'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(lig_dir, lig_name), lig)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [receptor, chain, resnum, resname, heavy_atom, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data =  [receptor, chain, resnum, resname, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception(str(e))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_receptor(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(datum).__name__ in ['tuple','list']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            datum = datum[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = param['folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = '{}_{}'.format(table_sn, folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_folder = param['download_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_dir = os.path.join(data_dir,download_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(pdb_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(rec_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chem in header['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            chain, resnum, resname = chem.chain, chem.resnum, chem.resname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligands.append([chain, str(resnum), resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = parsed.select('not (chain {} resnum {})'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = rec.select('not water')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = rec.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(rec_dir, rec_name), rec)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                datum = [receptor, chain, resnum, resname, heavy_atom, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                datum = [receptor, chain, resnum, resname, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_sn, data) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception(str(e))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef reorder(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = param['folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = '{}_{}'.format(table_sn, folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_folder = param['ligand_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_folder = param['receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(param['smina_param'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_dir = os.path.join(data_dir, folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(out_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_name = '_'.join(datum +  ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_path = os.path.join(out_dir, out_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_dir = os.path.join(data_dir, lig_folder , receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join(datum + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_path = os.path.join(lig_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, rec_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join(datum + ['receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path = os.path.join(rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'receptor': rec_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'ligand': lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'autobox_ligand':lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'out':out_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.parsePDB(out_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)      123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef smina_dock(table_sn,param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = param['folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder = '{}_{}'.format(table_sn, folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_folder = param['ligand_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_folder = param['receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(param['smina_param'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_dir = os.path.join(data_dir, folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(out_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_name = '_'.join(datum +  ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_path = os.path.join(out_dir, out_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_dir = os.path.join(data_dir, lig_folder , receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join(datum + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_path = os.path.join(lig_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, rec_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join(datum + ['receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path = os.path.join(rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'receptor': rec_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'ligand': lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'autobox_ligand':lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'out':out_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.parsePDB(out_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef overlap(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname =datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_folder = param['docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_folder = param['crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_cutoff_A = param['clash_cutoff_A']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_size_cutoff = param['clash_size_cutoff']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir, docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir,crystal_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked = prody.parsePDB(docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal = prody.parsePDB(crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        expanded_docked = np.expand_dims(docked, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = expanded_docked - crystal123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance = np.sqrt(np.sum(np.power(diff, 2), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_clash = (distance < config.clash_cutoff_A).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_clash = (np.sum(all_clash, axis=-1) > 0).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position_clash = np.mean(atom_clash, axis=-1) > config.clash_size_cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position_clash_ratio = np.mean(atom_clash, axis=-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, ratio in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum+[i+1,ratio, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef rmsd(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_folder = param['docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_folder = param['crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir,docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir, crystal_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = prody.parsePDB(crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rmsd = np.sqrt(np.mean(np.sum(np.square(docked_coords - crystal_coord), axis=01), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, rd in enumerate(rmsd):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum+[i+1, rd, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef native_contact(table_sn, param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_folder = param['docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_folder = param['crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_folder = param['receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance_threshold = param['distance_threshold']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir, docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir, crystal_folder , receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, rec_folder ,receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path = os.path.join(rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_docked =  prody.parsePDB(docked_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_crystal = prody.parsePDB(crystal_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_rec = prody.parsePDB(rec_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_atom_num = parsed_crystal.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_atom_num = parsed_docked.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert cry_atom_num == lig_atom_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = parsed_docked.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = parsed_crystal.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = parsed_rec.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_crystal_coord = np.expand_dims(crystal_coord, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_diff = exp_crystal_coord - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_distance = np.sqrt(np.sum(np.square(cry_diff), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_docked_coords = np.expand_dims(docked_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_diff = exp_docked_coords - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_distance = np.sqrt(np.sum(np.square(docked_diff),axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_contact = (cry_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_contact = np.sum(cry_contact).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_contact = (docked_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        contact_ratio = np.sum(cry_contact * lig_contact, axis=(-1,-2)) / num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i , nt in enumerate(contact_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum + [i+1, nt, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 0, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_sn, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFDatabaseAction={123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'download':download,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'split_ligand':split_ligand,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'split_receptor':split_receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'reorder':reorder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'smina_dock':smina_dock,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'overlap':overlap,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'rmsd':rmsd,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'native_contact':native_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF}