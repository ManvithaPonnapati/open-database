import os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef mkdir(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # make directory recursive, doesn't have warry info when path exists123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    os.system('mkdir -p {}'.format(path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef log(log_file, log_content, head=None, lock=None):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    write down log information123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param log_file: name of log file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param log_content: string or list of string, log content123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param head: head for csv or tsv output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiprocess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lock.acquire()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if isinstance(log_content, str):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log_content = [log_content]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    mkdir(config.log_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log_file_path = os.path.join(config.log_folder, log_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(log_file_path) and not head is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with open(log_file_path, 'w') as fout:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            fout.write(head+'\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with open(log_file_path, 'a') as fout:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for cont in log_content:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            fout.write(cont+'\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lock.release()