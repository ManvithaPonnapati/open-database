"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport argparse 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport multiprocessing123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import partial123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import log, smina_param, timeit, count_lines123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import lock 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom db import database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import data_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom _db import AffinityDatabase123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdb = AffinityDatabase()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _makedir(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _table_folder(table_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    splited = table_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table_type = '_'.join(splited[:-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table_sn = splited[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return '_'.join([table_sn, table_type])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download_pdb(param,receptor):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_dir = os.path.join(data_dir, _table_folder(table_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(dest_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            download_address = 'https://files.rcsb.org/download/{}.pdb'.format(receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system('wget -P {} {}'.format(dest_dir, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = [receptor,header['experiment'], header['resolution'], 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name=param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = [receptor,'unk',0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_pdb(param,receptor):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(receptor).__name__ in ['tuple','list']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            receptor = receptor[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_table = param['lig_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_table = param['rec_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_table = param['download_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_dir = os.path.join(data_dir,_table_folder(download_table))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(pdb_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_dir = os.path.join(data_dir, _table_folder(lig_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(lig_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print lig_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, _table_folder(rec_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(rec_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chem in header['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            chain, resnum, resname = chem.chain, chem.resnum, chem.resname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligands.append([chain, str(resnum), resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig = parsed.select('chain {} resnum {}'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = lig.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_name = '_'.join([receptor,chain,resnum,resname,'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(lig_dir, lig_name), lig)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [receptor, chain, resnum, resname, heavy_atom, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(lig_table, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data =  [receptor, chain, resnum, resname, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [data]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(lig_table, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = parsed.select('not (chain {} resnum {})'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = rec.select('not water')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = rec.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(rec_dir, rec_name), rec)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                datum = [receptor, chain, resnum, resname, heavy_atom, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(rec_table, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                datum = [receptor, chain, resnum, resname, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(rec_table, data) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception(str(e))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef smina_dock(param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_table = param['lig_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_table = param['rec_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = param['smina_pm']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_dir = os.path.join(data_dir, _table_folder(table_name), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(out_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_name = '_'.join(datum +  ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_path = os.path.join(out_dir, out_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_dir = os.path.join(data_dir, _table_folder(lig_table) , receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join(datum + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_path = os.path.join(lig_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, _table_folder(rec_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join(datum + ['receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path = os.path.join(rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'receptor': rec_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'ligand': lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'out':out_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not smina_pm.name == 'reorder':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            kw.update({'autobox_ligand': lig_path})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.parsePDB(out_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef overlap_with_ligand(param,datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname =datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_table = param['docked_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_table = param['crystal_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_cutoff_A = param['clash_cutoff_A']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_size_cutoff = param['clash_size_cutoff']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir, _table_folder(docked_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir,_table_folder(crystal_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked = prody.parsePDB(docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal = prody.parsePDB(crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        expanded_docked = np.expand_dims(docked, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = expanded_docked - crystal123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance = np.sqrt(np.sum(np.power(diff, 2), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_clash = (distance < config.clash_cutoff_A).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_clash = (np.sum(all_clash, axis=-1) > 0).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position_clash = np.mean(atom_clash, axis=-1) > config.clash_size_cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position_clash_ratio = np.mean(atom_clash, axis=-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, ratio in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum+[i+1,ratio, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_rmsd(param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_table = param['docked_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_table = param['crystal_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir,_table_folder(docked_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir,_table_folder(crystal_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = prody.parsePDB(crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rmsd = np.sqrt(np.mean(np.sum(np.square(docked_coords - crystal_coord), axis=01), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, rd in enumerate(rmsd):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum+[i+1, rd, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_native_contact(param, datum):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = datum123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_table = param['docked_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_table = param['crystal_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_table = param['rec_table']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance_threshold = param['distance_threshold']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_dir = os.path.join(data_dir,_table_folder(docked_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_path = os.path.join(docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_dir = os.path.join(data_dir,_table_folder(crystal_table), receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_path = os.path.join(crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_dir = os.path.join(data_dir, _table_folder(rec_table),receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path = os.path.join(rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_docked =  prody.parsePDB(docked_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_crystal = prody.parsePDB(crystal_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_rec = prody.parsePDB(rec_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_atom_num = parsed_crystal.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_atom_num = parsed_docked.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert cry_atom_num == lig_atom_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = parsed_docked.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = parsed_crystal.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = parsed_rec.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_crystal_coord = np.expand_dims(crystal_coord, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_diff = exp_crystal_coord - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_distance = np.sqrt(np.sum(np.square(cry_diff), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_docked_coords = np.expand_dims(docked_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_diff = exp_docked_coords - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_distance = np.sqrt(np.sum(np.square(docked_diff),axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_contact = (cry_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_contact = np.sum(cry_contact).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_contact = (docked_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        contact_ratio = np.sum(cry_contact * lig_contact, axis=(-1,-2)) / num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i , nt in enumerate(contact_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(datum + [i+1, nt, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = param['table_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        datum = datum + [ 0, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [datum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_name, data)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run_multiprocess(target_list, func):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        target_list = map(list, target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print len(target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pool = multiprocessing.Pool(config.process_num)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pool.map_async(func, target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pool.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pool.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.download:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Downloading pdb fro rcsb..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_list = open(config.list_of_PDBs_to_download).readline().strip().split(', ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'datasource':'rcsb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('download',[],table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        downloaded = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'table_name':table_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(set(download_list)-set(downloaded), partial(download_pdb, job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.split:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Split ligand and receptor..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('split option depend on download data')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'depend':depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_table = db.get_table('splited_receptor',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_table = db.get_table('splited_ligand',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'rec_table':rec_table,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'lig_table':lig_table,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'download_table':depend[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_list = db.get_all_success(depend[0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(pdb_list, partial(split_pdb, job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.reorder:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'reorder ligand'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('reorder optiom depend on splited ligands and receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = { }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = { }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'splited_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'lig_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'splited_receptor':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'rec_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(table_param.keys()) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('reorder optiom depend on splited ligands and receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update(table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param('reorder')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(config.reorder_pm)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'smina_pm':smina_pm})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param.update({'smina_param':smina_pm.param_dump()})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('reorder_ligand',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'table_name':table_name})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_list = db.get_all_success(table_param['rec_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_list = db.get_all_success(table_param['lig_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        finish_list = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        reorder_list = list(set(rec_list) & set(lig_list) - set(finish_list))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(reorder_list,partial(smina_dock,job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.vinardo_dock:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'docking by vinardo ligand'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('reorder optiom depend on reorder ligands and splited receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = { }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = { }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'reorder_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'lig_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'splited_receptor':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'rec_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(table_param.keys()) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('dock optiom depend on reorder ligands and splited receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update(table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param('vinardo')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(config.vinardo_pm)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'smina_pm':smina_pm})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param.update({'smina_param':smina_pm.param_dump()})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('docked_ligand',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'table_name':table_name})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_list = db.get_all_success(table_param['rec_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_list = db.get_all_success(table_param['lig_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        finish_list = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        reorder_list = list(set(rec_list) & set(lig_list) - set(finish_list))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(reorder_list,partial(smina_dock,job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.overlap:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'calculate overlap'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('overlap calculate depend on docked ligands and reorder ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'reorder_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'crystal_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'docked_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'docked_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(table_param.keys()) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('overlap calculate depend on docked ligands and reorder ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param.update(config.overlap_default)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('overlap',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = table_param 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'table_name':table_name})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_list = db.get_all_success(table_param['crystal_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_list = db.get_all_success(table_param['docked_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        finish_list = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rest_list = list(set(cry_list) & set(lig_list) - set(finish_list))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(rest_list,partial(overlap_with_ligand,job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rmsd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'calculate rmsd'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('rmsd calculate depend on docked ligands and reorder ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'reorder_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'crystal_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'docked_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'docked_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(table_param.keys()) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('rmsd calculate depend on docked ligands and reorder ligands')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('rmsd',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = table_param 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'table_name':table_name})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_list = db.get_all_success(table_param['crystal_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_list = db.get_all_success(table_param['docked_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        finish_list = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rest_list = list(set(cry_list) & set(lig_list) - set(finish_list))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(rest_list,partial(calculate_rmsd,job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.native_contact:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'calculate native contact'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(depend) == 3:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('native contact calculate depend on docked ligands reorder ligands and splited receptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for tab in depend:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'reorder_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'crystal_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'docked_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'docked_table':tab})         123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if db.table_type(tab) == 'splited_receptor':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                table_param.update({'rec_table':tab})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not len(table_param.keys()) == 3:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('native contact calculate depend on docked ligands reorder ligands and splited receptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param.update(config.native_contace_default)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name = db.get_table('native_contact',depend,table_param)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param = table_param 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        job_param.update({'table_name':table_name})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_list = db.get_all_success(table_param['rec_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_list = db.get_all_success(table_param['crystal_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_list = db.get_all_success(table_param['docked_table'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        finish_list = db.get_all_success(table_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rest_list = list(set(rec_list) & set(cry_list) & set(lig_list) - set(finish_list))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run_multiprocess(rest_list, partial(calculate_native_contact, job_param))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.test:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print 'calculate native contact'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        depend = FLAGS.depend123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(depend).__name__ == 'list':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            depend = depend[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not db.table_type(depend) == 'docked_ligand':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("native contace calculate depend docked ligands")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_param = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'docked_table':depend,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'crystal_table':db.get_depend_table(depend,'reorder_ligand'),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'rec_table':db.get_depend_table(depend,'spleted_receptor')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser = argparse.ArgumentParser("Database Create Option")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--download', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--split', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--reorder', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--vinardo_dock', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--smina_dock', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--overlap', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rmsd', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--native_contact', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--depend', nargs='*')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--test', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    FLAGS, unparsed = parser.parse_known_args()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    main()