"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport multiprocessing123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport argparse123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import mkdir, log123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download_pdb(pdb_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Download pdb file from rcsb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(os.path.join(config.pdb_download_path, pdb_name + '.pdb')):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_address = 'https://files.rcsb.org/download/{}.pdb'.format(pdb_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('wget -P {}  {}'.format(config.pdb_download_path, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Download ", pdb_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_structure(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Split downloaded pdb into receptor and ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record pdb's resolution123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record ligand's heavy atom num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_name = os.path.basename(pdb_path).split('.')[0].lower()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_failed.log', '{},{}'.format(pdb_name, str(e)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('resolution.csv', '{},{}'.format(pdb_name, header['resolution']))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_header_failed.log', '{},{}'.format(pdb_name, str(e)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    hetero = parsed.select(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '(hetero and not water) or resname ATP or resname ADP or resname AMP or resname GTP or resname GDP or resname GMP')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor = parsed.select('protein or nucleic')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if receptor is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "{},doesn't have receptor.".format(pdb_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if hetero is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "{},doesn't have ligand.".format(pdb_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # write ligand into file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for each in prody.HierView(hetero).iterResidues():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResId = each.getResindex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResName = each.getResname()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_path = os.path.join(config.splited_ligands_path, pdb_name, "{}_{}_{}_ligand.pdb".format(pdb_name, ResName, ResId))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.writePDB(ligand_path, each)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_num = each.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('atom_num.csv', "{}_{}_{},{}".format(pdb_name, ResName, ResId, atom_num))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, pdb_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody.writePDB(receptor_path, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log('success_ligand.log', '{} success'.format(pdb_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef reorder_ligand(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    use smina to read and write ligands, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    make sure the atom order is the same as docking result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = os.path.basename(ligand_path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, receptor_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    std_ligand_path = ligand_path.replace(config.splited_ligands_path, config.smina_std_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(std_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = '{} -r {} -l {} --custom_scoring {} --score_only -o {}'\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            .format(config.smina, receptor_path, ligand_path, config.scoring_terms, std_ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(std_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cont = cl.communicate()[0].strip().split('\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        terms = [ line.strip().split(' ')[2:] for line in cont if line.startswith('##')]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [ligand_name, '0'] + terms[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('crystal_ligands_term_score.csv',','.join(data))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef vinardo_dock_ligand(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docking ligand by smina with vinardo123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = os.path.basename(ligand_path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, receptor_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_name = os.path.basename(ligand_path).replace('ligand', 'vinardo')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_path = os.path.join(config.vinardo_docked_path, receptor_name, docked_ligand_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(docked_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = '{} -r {} -l {} --autobox_ligand {} --autobox_add 12 -o {} --num_modes=400 --exhaustiveness 64 --scoring vinardo --cpu=1 '\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            .format(config.smina, receptor_path, ligand_path, ligand_path, docked_ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(vinardo_docked_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef count_rotable_bond(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    count the number of rotable bond in ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    obConversion = openbabel.OBConversion()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    OBligand = openbabel.OBMol()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rot_bond = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not obConversion.ReadFile(OBligand, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("rotbond_failed.log", "{}, cannot parse by openbabel".format(ligand_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for bond in openbabel.OBMolBondIter(OBligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if  not bond.IsSingle() or bond.IsAmide() or bond.IsInRing():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif bond.GetBeginAtom().GetValence() == 1 or bond.GetEndAtom().GetValence() == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rot_bond += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("rotbond.log","{},{}".format(ligand_name, rot_bond))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run(target_list, func):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool = multiprocessing.Pool(config.process_num)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.map_async(func, target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.download:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Downloading pdb from rcsb..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_list = open(config.target_list_file).readline().strip().split(', ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.pdb_download_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(download_list, download_pdb)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.split:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Spliting receptor and ligand..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        structure_list = glob(os.path.join(config.pdb_download_path, '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.splited_receptors_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(structure_list, split_structure)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.reorder:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Reorder ligands atom..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, reorder_ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.vinardo:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Smina vinardo docking..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, vinardo_dock_ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rotbond:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Counting rotable bonds..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, count_rotable_bond)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser = argparse.ArgumentParser("Database Master Option")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--download', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--split', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--vinardo', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rotbond', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--reorder', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    FLAGS, unparsed = parser.parse_known_args()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    main()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF