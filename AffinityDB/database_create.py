"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport multiprocessing123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport argparse123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import partial123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import log, smina_param123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFFLAGS = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFmkdir = lambda path: os.system('mkdir -p {}'.format(path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFligand_name_of = lambda x:os.path.basename(x).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFreceptor_of = lambda x:os.path.basename(x).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFreceptor_path_of = lambda x:os.path.join(config.splited_receptors_path, receptor_of(x)+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download_pdb(lock, pdb_name):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Download pdb file from rcsb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(os.path.join(config.pdb_download_path, pdb_name + '.pdb')):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_address = 'https://files.rcsb.org/download/{}.pdb'.format(pdb_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('wget -P {}  {}'.format(config.pdb_download_path, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Download ", pdb_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_structure(lock, pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Split downloaded pdb into receptor and ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record pdb's resolution123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Record ligand's heavy atom num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_name = os.path.basename(pdb_path).split('.')[0].lower()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_failed.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(pdb_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('resolution.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(pdb_name, header['resolution']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='pdb,resolution',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('parse_header_failed.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(pdb_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    hetero = parsed.select(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '(hetero and not water) or resname ATP or resname ADP or resname AMP or resname GTP or resname GDP or resname GMP')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor = parsed.select('protein or nucleic')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if receptor is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "{},doesn't have receptor.".format(pdb_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if hetero is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("select_failed.log", "{},doesn't have ligand.".format(pdb_name))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # write ligand into file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for each in prody.HierView(hetero).iterResidues():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResId = each.getResindex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ResName = each.getResname()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_path = os.path.join(config.splited_ligands_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   pdb_name,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   "{}_{}_{}_ligand.pdb".format(pdb_name, ResName, ResId))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.writePDB(ligand_path, each)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_num = each.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('atom_num.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}_{}_{},{}".format(pdb_name, ResName, ResId, atom_num),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,atom_num',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, pdb_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody.writePDB(receptor_path, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log('success_split_pdb.log',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '{},success'.format(pdb_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='pdb,status',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef reorder_ligand(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    use smina to read and write ligands, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    make sure the atom order is the same as docking result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = os.path.basename(ligand_path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, receptor_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    std_ligand_path = ligand_path.replace(config.splited_ligands_path, config.smina_std_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(std_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = '{} -r {} -l {} --custom_scoring {} --score_only -o {}'\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            .format(config.smina, receptor_path, ligand_path, config.scoring_terms, std_ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(std_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cont = cl.communicate()[0].strip().split('\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        terms = [line.strip().split(' ')[2:] for line in cont if line.startswith('##')]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = '\t'.join(['ligand', 'position'] + terms[0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = [ligand_name, '0'] + terms[1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('crystal_ligands_term_score.tsv', '\t'.join(data), head=head, lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef vinardo_dock_ligand(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docking ligand by smina with vinardo123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = os.path.basename(ligand_path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = os.path.join(config.splited_receptors_path, receptor_name + '.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_name = os.path.basename(ligand_path).replace('ligand', 'vinardo')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_path = os.path.join(config.vinardo_docked_path, receptor_name, docked_ligand_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(docked_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = '{} -r {} -l {} --autobox_ligand {} --autobox_add 12 -o {} --num_modes=400 --exhaustiveness 64 --scoring vinardo --cpu=1 '\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            .format(config.smina, receptor_path, ligand_path, ligand_path, docked_ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(docked_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#def crystal_ligand_for_same_receptor(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    get the ligands splited from same pdb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    note ligands should be reordered by smina123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    crystal_ligand = os.path.join(config.smina_std_path, receptor, '_'.join([receptor, lig, resid, 'ligand.pdb']))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligands_list = glob(os.path.join(os.path.dirname(crystal_ligand), '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    other_ligands = list(set(ligands_list) - set([crystal_ligand]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    return crystal_ligand, other_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#def get_similar_ligands(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    calculate tanimoto similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    return the ligands with high tanimoto similarity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    :param lock: multiprocess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligand_name = ligand_name_of(ligand_path)#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    crystal_ligand = os.path.join(config.smina_std_path, receptor, '_'.join([receptor, lig, resid, 'ligand.pdb']))#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligands_list = glob(os.path.join(os.path.dirname(crystal_ligand), '*.pdb'))#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    ligands_for_same_receptor = list(set(ligands_list) - set([crystal_ligand]))#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    similar_ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    for lig_path in ligands_for_same_receptor:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        cmd = 'babel -d {} {} -ofpt '.format(ligand_path, lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        ls = os.popen(cmd).read()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        tanimoto_similarity = re.split('=|\n', ls)[2]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        print ls123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        log('tanimoto_similarity.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            '{},{},{}'.format(ligand_name_of(ligand_path), ligand_name_of(lig_path), tanimoto_similarity),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            head='lig_a,lig_b,tanimoto',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#        if tanimoto_similarity > config.tanimoto_cutoff:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#            similar_ligands.append([tanimoto_similarity,lig_path])#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#    return crystal_ligand, similar_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_same_ligands(ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    get the path of ligands, they are the same ligand docked to the same receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    but different binding site.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    same_ligands = glob(os.path.join(config.smina_std_path,receptor, '{}_{}_*.pdb'.format(receptor, lig)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return same_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_clash(lock, docked_ligand, crystal_ligand, similarity):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for all position in docked_ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate if they are clash with crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiprocess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param docked_ligand: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param crystal_ligand: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked = prody.parsePDB(docked_ligand).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{},{}".format(ligand_name_of(docked_ligand), str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal = prody.parsePDB(crystal_ligand).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{},{}".format(ligand_name_of(crystal_ligand), str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    expanded_docked = np.expand_dims(docked, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    diff = expanded_docked - crystal123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    distance = np.sqrt(np.sum(np.power(diff, 2), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    all_clash = (distance < config.clash_cutoff_A).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atom_clash = (np.sum(all_clash, axis=-1) > 0).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash = np.mean(atom_clash, axis=-1) > config.clash_size_cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash_ratio = np.mean(atom_clash, axis=-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash_ratio = sum(position_clash.astype(float))/len(position_clash)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash = position_clash.astype(int).astype(str)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print 'r'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    head = ['docked_ligand','crystal_ligand','similarity','positon','precent_of_overlaping_atom']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print 'data'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    datum = [ligand_name_of(docked_ligand), ligand_name_of(crystal_ligand), str(similarity)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i, pcr in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data.append(','.join(datum+[str(i+1), str(pcr)]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("ligand_pair_overlap.csv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = ','.join(head),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #   log("single_overlap.tsv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       '\t'.join([ligand_name_of(docked_ligand), ligand_name_of(crystal_ligand), str(clash_ratio), ','.join(clash)]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       head='\t'.join(['docked_ligand','crystal_ligand','overlap_ratio','overlap_status']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF #       lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef detect_overlap(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if docked result overlap with other crystal ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    splited from the same receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    note crystal ligand should reordered by smina123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiprocess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligand, similar_ligands = get_similar_ligands(lock, ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(similar_ligands) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("overlap_ligand_skip.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}, doesn't have similar ligands".format(ligand_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    position_clash = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for similarity, lig_path in similar_ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cur_position_clash = calculate_clash(lock, ligand_path, lig_path, similarity)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if position_clash == None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            position_clash = cur_position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            position_clash += cur_position_clash123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print similar_ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash = list(position_clash.astype(int).astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    clash_ratio = sum(position_clash.astype(float))/len(position_clash)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("overlap.tsv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '\t'.join([ligand_name, str(clash_ratio), ','.join(clash)]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='\t'.join(['ligand','overlap_ratio','overlap_status']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef count_rotable_bond(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    count the number of rotable bond in ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiporcess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    import openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = os.path.basename(ligand_path).split('.')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    obConversion = openbabel.OBConversion()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    OBligand = openbabel.OBMol()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rot_bond = 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not obConversion.ReadFile(OBligand, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log("rotbond_failed.log",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            "{}, cannot parse by openbabel".format(ligand_name),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for bond in openbabel.OBMolBondIter(OBligand):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if  not bond.IsSingle() or bond.IsAmide() or bond.IsInRing():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif bond.GetBeginAtom().GetValence() == 1 or bond.GetEndAtom().GetValence() == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rot_bond += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    log("rotbond.csv",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        "{},{}".format(ligand_name, rot_bond),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head='ligand,rotbond',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_rmsd(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate rmsd between docked ligands and crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    note when calculate rmsd, crystal ligand should be reordered by smina123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiprocess lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor, lig, resid, _ = ligand_name.split('_')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    crystal_ligands = get_same_ligands(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(ligand_path).select('not hydrogen').getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for crystal_ligand in crystal_ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            crystal_coord = prody.parsePDB(crystal_ligand).select('not hydrogen').getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rmsd = np.sqrt(np.mean(np.sum(np.square(docked_coords - crystal_coord), axis=-1), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rmsd_str = ','.join(rmsd.astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head = ['ligand','crystal_ligand','rmsd']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            log('rmsd.tsv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                '\t'.join([ligand_name, ligand_name_of(crystal_ligand), rmsd_str]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                head=','.join(head),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('rmsd_failed.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{}'.format(ligand_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head='ligand,exception',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef calculate_native_contact(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate native contact between the ligand and receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    notice when calculating native contact, we ignore all hydrogen123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: multiprocessing lock123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = receptor_path_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_ligands = prody.parsePDB(ligand_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_receptor = prody.parsePDB(receptor_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_atom_num = parsed_ligands.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_coords = parsed_ligands.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_coord = parsed_receptor.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_ligands_coords = np.expand_dims(ligands_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = exp_ligands_coords - receptor_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance = np.sqrt(np.sum(np.square(diff),axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_native_contact = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for threshold in np.linspace(1,5,9):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            contact = ( distance < threshold ).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_contact = np.sum(contact, axis=(-1,-2))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if num_native_contact is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                num_native_contact = num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                num_native_contact = np.dstack((num_native_contact, num_contact))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # after dstack shape become [1, x, y]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_native_contact = num_native_contact[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        head = ['ligand','heavy_atom_num', 'position'] + list(np.linspace(1,5,9).astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in range(len(num_native_contact)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data.append(','.join([ligand_name, str(ligand_atom_num)  ,str(i+1)]+ list(num_native_contact[i].astype(int).astype(str))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #log("native_contact.csv", ','.join([ligand_name, str(ligand_atom_num)  ,str(i+1)]+ list(num_native_contact[i].astype(int).astype(str))), head=','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            #log("ratio_native_contact.csv", ','.join([ligand_name, str(i+1)]+ list(ratio_native_contact[i].astype(str))), head=','.join(head))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('native_contact.csv', data, head= ','.join(head), lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('native_contact_failed.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            '{},{},{}'.format(receptor_of(ligand_name), ligand_name, str(e)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head=','.join(['receptor','ligand','exception']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef ligands_pair_native_contact(lock, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    calculate native contact between native atom and the ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param lock: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :param ligand_path: path 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_ligand, similar_ligands = get_similar_ligands(lock, ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_ligands = prody.parsePDB(ligand_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_coords = parsed_ligands.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_ligands_coords = np.expand_dims(ligands_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for similarity, lig_path in [[1,crystal_ligand]] + similar_ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            parsed_lig = prody.parsePDB(lig_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lig_coord = parsed_lig.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            diff = exp_ligands_coords - lig_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            distance = np.sqrt(np.sum(np.square(diff), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_native_contact = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for threshold in np.linspace(4, 8, 9):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                contact = (distance < threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                num_contact = np.sum(contact, axis=(-1, -2))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if num_native_contact is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    num_native_contact = num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    num_native_contact = np.dstack((num_native_contact, num_contact))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            # after dstack shape become [1, x, y]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_native_contact = num_native_contact[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head = ['ligand', 'crystal_ligand', 'similarity', 'position'] + list(np.linspace(4, 8, 9).astype(str))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            data = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i in range(len(num_native_contact)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                data.append(','.join([ligand_name, ligand_name_of(lig_path), str(similarity) ,str(i + 1)] + list(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    num_native_contact[i].astype(int).astype(str))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            log('ligand_pair_native_contact.csv', data, head=','.join(head), lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        log('ligand_pair_native_contact_failed.csv',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ','.join([ligand_name, str(e)]),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            head = ','.join(['liand','exception']),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            lock=lock)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef add_hydrogen(lock, input_dir, output_dir, input_file):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    add hydrogens to molecule123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_file = input_file.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_file = input_file.replace(input_dir, output_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(os.path.dirname(output_file)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            mkdir(os.path.dirname(output_file))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(output_file):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            cmd = 'obabel -ipdb {} -opdb -O {} -h'.format(input_file, output_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef dock(lock, input_dir, output_dir, smina_pm, ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dock ligands123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_path = ligand_path.strip()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name = ligand_name_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_path = receptor_path_of(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_name = ligand_name.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_name = os.path.basename(ligand_path).replace('ligand', smina_pm.name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docked_ligand_path = os.path.join(output_dir, receptor_name, docked_ligand_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'receptor':receptor_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'ligand'  :ligand_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'autobox_ligand' : ligand_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        'out'     :docked_ligand_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(docked_ligand_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(os.path.dirname(docked_ligand_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system(cmd)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef run(target_list, func):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #func(target_list[0])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool = multiprocessing.Pool(config.process_num)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.map_async(func, target_list)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pool.join()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    m = multiprocessing.Manager()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    l = m.Lock()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.download:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Downloading pdb from rcsb..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_list = open(config.list_of_PDBs_to_download).readline().strip().split(', ')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.pdb_download_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(download_list, partial(download_pdb, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.split:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Spliting receptor and ligand..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        structure_list = glob(os.path.join(config.pdb_download_path, '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        mkdir(config.splited_receptors_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(structure_list, partial(split_structure, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.reorder:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Reorder ligands atom..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(reorder_ligand, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rotbond:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Counting rotable bonds..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(count_rotable_bond, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.overlap:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Overlap detecting..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #ligands_list = ['/home/xander/affinityDB/data/vinardo/1a0b/1a0b_ZN_117_vinardo.pdb']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(detect_overlap, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.rmsd:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Calculating rmsd..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(calculate_rmsd, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.contact:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Calculating native contact between receptor and ligand..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.vinardo_docked_path, '*', '*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(calculate_native_contact, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Calculating native contact between ligands..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(ligands_pair_native_contact, l))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.addh:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to receptor..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptors_list = glob(os.path.join(config.splited_receptors_path,'*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_receptors_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(receptors_list,partial(add_hydrogen, l, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to original ligands ..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligands_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(add_hydrogen, l, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Add Hydrogens to smina ligands ..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.smina_std_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.smina_std_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = input_dir + '_hydrogens'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(add_hydrogen, l, input_dir, output_dir))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if FLAGS.vinardo:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print "Smina Vinardo dokcing..."123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_smina(config.smina)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.set_name('vinardo')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.load_param(*config.vinardo_pm['arg'],**config.vinardo_pm['kwarg'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands_list = glob(os.path.join(config.splited_ligands_path,'*','*.pdb'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_dir = config.splited_ligands_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_dir = config.vinardo_docked_path.rstrip('/')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        run(ligands_list, partial(dock, l, input_dir, output_dir, smina_pm))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser = argparse.ArgumentParser("Database Create Option")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--download', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--split', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--vinardo', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rotbond', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--reorder', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--overlap', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--rmsd', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--contact', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    parser.add_argument('--addh', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #parser.add_argument('--dock', action='store_true')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    FLAGS, unparsed = parser.parse_known_args()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    main()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF