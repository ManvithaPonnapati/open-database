import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# TODO:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# generate one very large tensor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# take slices from that tensor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# use slices to find good affine transform123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# generate a smaller tensor, use the whole one,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# regenerate it every epoch.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef random_transition_matrix():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """returns a random transition matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotation range - determines random rotations along any of X,Y,Z axis123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shift_range determines allowed shifts along any of X,Y,Z axis """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # shift range is hard coded to 10A because that's how the proteins look like123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # rotation range is hardcoded to 360 degrees123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shift_range = tf.constant(10,dtype=tf.float32) # FIXME123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotation_range = tf.cast(tf.convert_to_tensor(np.pi*2),dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly shift along X,Y,Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_shift = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32)* shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_shift = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32)* shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_shift = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32)* shift_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [1, 0, 0, random_x_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, random_y_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, random_z_shift],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_matrix = tf.concat(0,[[tf.concat(0,[[1.0],[0.0],[0.0],[x_shift]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[1.0],[0.0],[y_shift]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[1.0],[z_shift]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[0.0],[1.0]])]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         ])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along X123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32, seed=None, name=None)*rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[1, 0, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, cos(x_rot),-sin(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, sin(x_rot),cos(x_rot),0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]],dtype=tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rot_matrix = tf.concat(0,[[tf.concat(0,[[1.0],[0.0],[0.0],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[tf.cos(x_rot)],[-tf.sin(x_rot)],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[tf.sin(x_rot)],[tf.cos(x_rot)],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[0.0],[1.0]])]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         ])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly rotate along Y123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32, seed=None, name=None) * rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [cos(y_rot), 0,sin(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 1, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [-sin(y_rot), 0,cos(y_rot), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0 ,0 ,1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rot_matrix = tf.concat(0,[[tf.concat(0,[[tf.cos(y_rot)],[0.0],[tf.sin(y_rot)],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[1.0],[0.0],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[-tf.sin(y_rot)],[0.0],[tf.cos(y_rot)],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[0.0],[1.0]])]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         ])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot = tf.random_uniform([], minval=-1, maxval=1, dtype=tf.float32, seed=None, name=None) * rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [[cos(z_rot), -sin(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [sin(z_rot), cos(z_rot), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 1, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rot_matrix = tf.concat(0,[[tf.concat(0,[[tf.cos(z_rot)],[-tf.sin(z_rot)],[0.0],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[tf.sin(z_rot)],[tf.cos(z_rot)],[0.0],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[1.0],[0.0]])],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         [tf.concat(0,[[0.0],[0.0],[0.0],[1.0]])]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                         ])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    random_affine_transform_matrix = tf.matmul(tf.matmul(tf.matmul(xyz_shift_matrix,x_rot_matrix),y_rot_matrix),z_rot_matrix)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return random_affine_transform_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef affine_transform(coordinates,transition_matrix=random_transition_matrix()):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """applies affine transform to the array of coordinates. By default generates a random affine transform matrix."""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    coordinates_with_ones = tf.concat(1, [coordinates, tf.cast(tf.ones([tf.shape(coordinates)[0],1]),tf.float32)])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    transformed_coords = tf.matmul(coordinates_with_ones,tf.transpose(transition_matrix))[0:,:-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return transformed_coords,transition_matrix