123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tempfile123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#import chembl123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport xml.dom.minidom123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFBLASTDB = '/n/scratch2/xl198/download/db/'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef mkpml(tdir, lig_path, rec_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	pml_path = os.path.join(tdir, 'script.pml')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	f_path = os.path.join(tdir,'around.fasta')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	with open('script.pml','w') as f:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		f.write('cmd.load("ligand.pdb")\n'.format(lig_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		f.write('cmd.load("receptor.pdb")\n'.format(rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		f.write('cmd.select("bbnear","receptor w. 10 of ligand")\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		f.write('cmd.select("res","br. bbnear")\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		f.write('cmd.save("around.fasta","res")\n'.format(f_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	return pml_path, f_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef parse_PDB(PDBname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	Parse the structure from Protein Data Bank123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	args: PDBname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		  4 letters identifier for the strcuture123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	cdir = os.getcwd()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	tdir = tempfile.mkdtemp()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	os.chdir(tdir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	PDBHead = prody.parsePDBHeader(PDBname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	PDB = prody.parsePDB(PDBname)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	for chem in PDBHead['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		ligands.append([chem.chain, str(chem.resnum), chem.resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# select the receptor and the ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			receptor = PDB.select('not (chain {} resnum {})'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			ligand = PDB.select('chain {} resnum {}'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# save the receptor and the ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			prody.writePDB('receptor.pdb', receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			prody.writePDB('ligand.pdb', ligand)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			lig_path = os.path.join(tdir, 'ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			rec_path = os.path.join(tdir, 'receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# create the script to select the amino acid sequence around123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			pml_path, f_path = mkpml(tdir, lig_path, rec_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			cl = subprocess.Popen('pymol -qc script.pml', shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# balst to find similar sequence123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			cmd = 'blastp -db {}nr -query around.fasta -outfmt 5 -out result'.format(BLASTDB)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# parse the blast result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			dtree = xml.dom.minidom.parse("result")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			collection = dtree.documentElement123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			hits = collection.getElementsByTagName("Hit")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			blast_result = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			for hit in hits:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				hit_id = hit.getElementsByTagName('Hit_id')[0].childNodes[0].data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				hsps = hit.getElementsByTagName('Hit_hsps')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				bit_score = hsps.getElementsByTagName('Hsp_bit-score')[0].childNodes[0].data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				score = hsps.getElementsByTagName('Hsp_score')[0].childNodes[0].data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				evalue = hsps.getElementsByTagName('Hsp_evalue')[0].childNodes[0].data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				blast_result.append([hit_id, bit_score, score, evalue])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			# save the balst result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			with open(os.path.join(cdir,'blast_result'),'w') as fout:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF				for result in blast_result:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF					fout.write(','.join(result)+'\n')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF		except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF			print (e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF	parse_PDB('3eml')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF