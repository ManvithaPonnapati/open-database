import math123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom random import randint123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom PIL import Image, ImageDraw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport nshapegenflags123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFDIM = nshapegenflags.DIM  # Shorter123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFCOLOR = nshapegenflags.COLOR123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFRANDOM_COLOR = nshapegenflags.RANDOM_COLOR123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef set_dim(dim):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nshapegenflags.DIM = dim123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef set_color(color):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nshapegenflags.COLOR = color123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef generate_image_pairs(n):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i in range (1, n + 1):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if (i % 100 == 99):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print str(i + 1) + " / " + str(n)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_image_pair(randint(0, 2), i)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef save_image_pair(shape, id):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    (top, bottom) = get_image_pair(shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bottom.save("images/" + str(id) + "_L.png")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    top.save("images/" + str(id) + "_K.png")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_image_pair(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = get_shape_image(shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Crop the top part of the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    top = im.crop((0, 0, DIM, DIM / 2))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    top.load()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Crop the bottom part of the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bottom = im.crop((0, DIM / 2, DIM, DIM))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bottom.load()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Pad the images to 100x100123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    top = full_size(top)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bottom = full_size(bottom)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Rotate randomly123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if nshapegenflags.ROTATE:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        top = top.rotate(random_angle_degrees(0 - nshapegenflags.ROTATE_MAX_DEGREES, nshapegenflags.ROTATE_MAX_DEGREES))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bottom = bottom.rotate(random_angle_degrees(0 - nshapegenflags.ROTATE_MAX_DEGREES, nshapegenflags.ROTATE_MAX_DEGREES))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return (top, bottom)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# Based on https://stackoverflow.com/a/11143078123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef full_size(image, dimensions=(DIM, DIM)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    new_size = dimensions123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    new_im = Image.new("RGB", new_size)  # Black by default123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    new_im.paste(image, ((new_size[0] - image.size[0]) / 2,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                          (new_size[1] - image.size[1]) / 2))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return new_im123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_shape_image(shape):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = Image.new('RGB', (DIM, DIM))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if shape == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        im = ellipse(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif shape == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        im = triangle(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif shape == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        im = square(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return im123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_color():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return random_color() if RANDOM_COLOR else COLOR123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef square(im, size=0.6 * DIM):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Square in the center of the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    vertices = [(DIM / 2 - size / 2, DIM / 2 - size / 2), (DIM / 2 - size / 2, DIM / 2 + size / 2),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                (DIM / 2 + size / 2, DIM / 2 + size / 2), (DIM / 2 + size / 2, DIM / 2 - size / 2)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # vertices = rotate(vertices, random_angle())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Draw it on the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw = ImageDraw.Draw(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    color = get_color()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw.polygon(vertices, fill=color, outline=color)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    del draw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = im.rotate(random_angle_degrees())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return im123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef triangle(im, size=0.6 * DIM):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Triangle in the center of the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    vertices = [(DIM / 2 - size / 2, DIM / 2 + size * math.sqrt(3) / 4),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                (DIM / 2 + size / 2, DIM / 2 + size * math.sqrt(3) / 4), (DIM / 2, DIM / 2 - size * math.sqrt(3) / 4)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # vertices = rotate(vertices, random_angle())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Draw it on the image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw = ImageDraw.Draw(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    color = get_color()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw.polygon(vertices, fill=color, outline=color)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    del draw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = im.rotate(random_angle_degrees())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return im123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef ellipse(im):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Generate random bounds of ellipse; avoid having ellipses that are too narrow123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    e_x = randint(math.floor(0.2 * DIM), math.floor(0.8 * DIM))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    e_y = randint(DIM - e_x, 0.8 * DIM)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Draw ellipse123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bbox = (DIM / 2 - e_x / 2, DIM / 2 - e_y / 2, DIM / 2 + e_x / 2, DIM / 2 + e_y / 2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw = ImageDraw.Draw(im)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    color = get_color()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    draw.ellipse(bbox, fill=color, outline=color)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    del draw123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = im.rotate(random_angle_degrees())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return im123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef rotate(points, angle):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    result = list()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Generate rotation matrix based on angle123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotation_matrix = np.matrix([[math.cos(angle), 0 - math.sin(angle)], [math.sin(angle), math.cos(angle)]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Loop through every point in the list of vertices123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for point in points:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Create a vector out of the point: (while setting center to origin)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #   [[x]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #    [y]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        point_vector = np.transpose(np.matrix([point[0] - DIM / 2, point[1] - DIM / 2]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Multiply the rotation matrix by the point vector123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rotated = np.matmul(rotation_matrix, point_vector)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Reshape matrix into coordinate pair (and move origin back to origin from center)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rotated_vertices = (math.floor(rotated.item((0, 0))) + DIM / 2, math.floor(rotated.item((1, 0))) + DIM / 2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Add rotated vertex to list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        result.append(rotated_vertices)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return result123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef random_angle():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return randint(0, 359) * math.pi / 180  # randint is inclusive, so 0 to 359123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef random_color():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return randint(0, 255), randint(0, 255), randint(0, 255)  # Inclusive123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef random_angle_degrees(min=0, max=359):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return randint(min, max)