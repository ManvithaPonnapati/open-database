from __future__ import absolute_import123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import division123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import print_function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom random import randint123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom six.moves import xrange  # pylint: disable=redefined-builtin123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# Process images of this size. Note that this differs from the original CIFAR123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# image size of 32 x 32. If one alters this number, then the entire model123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# architecture will change and any model would need to be retrained.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFIMAGE_SIZE = 100123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# Global constants describing the MSHAPES data set.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFNUM_CLASSES = 2  # Match/no match123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFNUM_EXAMPLES_PER_EPOCH_FOR_TRAIN = 50000123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFNUM_EXAMPLES_PER_EPOCH_FOR_EVAL = 10000123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef read_cifar10(lock_queue, key_queue, match_queue):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Make a queue of file names including all the JPEG images files in the relative123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # image directory.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # lock_queue = tf.train.string_input_producer(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #     tf.train.match_filenames_once("MSHAPES/images/*_L.png"))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # key_queue = tf.train.string_input_producer(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #     tf.train.match_filenames_once("MSHAPES/images/*_K.png"))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    class MShapeRecord(object):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    image_reader = tf.WholeFileReader()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Read a whole file from the queue, the first returned value in the tuple is the123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # filename which we are ignoring.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    _, lock_image_file = image_reader.read(lock_queue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    _, key_image_file = image_reader.read(key_queue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Decode the image as a JPEG file, this will turn it into a Tensor which we can123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # then use in training.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lock_image = tf.image.decode_png(lock_image_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    key_image = tf.image.decode_png(key_image_file)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    image = tf.concat([lock_image, key_image], axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    read_input = MShapeRecord()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    read_input.uint8image = image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # read_input.label = match_queue.dequeue()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # print("Label in read function:", read_input.label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # read_input.label.set_shape([1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # print("Label in read function:", read_input.label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    read_input.label = [1] #TODO: Make the labels match what is passed in match_or_not123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return read_input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _generate_image_and_label_batch(image, label, min_queue_examples,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                    batch_size, shuffle):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Construct a queued batch of images and labels.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      image: 3-D Tensor of [height, width, 3] of type.float32.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      label: 1-D Tensor of type.int32123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      min_queue_examples: int32, minimum number of samples to retain123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        in the queue that provides of batches of examples.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      batch_size: Number of images per batch.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      shuffle: boolean indicating whether to use a shuffling queue.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      images: Images. 4D tensor of [batch_size, height, width, 3] size.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      labels: Labels. 1D tensor of [batch_size] size.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Create a queue that shuffles the examples, and then123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # read 'batch_size' images + labels from the example queue.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_preprocess_threads = 16123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if shuffle:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        images, label_batch = tf.train.shuffle_batch(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            [image, label],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            batch_size=batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_threads=num_preprocess_threads,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            capacity=min_queue_examples + 3 * batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            min_after_dequeue=min_queue_examples)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        images, label_batch = tf.train.batch(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            [image, label],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            batch_size=batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            num_threads=num_preprocess_threads,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            capacity=min_queue_examples + 3 * batch_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Display the training images in the visualizer.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.summary.image('images', images)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return images, tf.reshape(label_batch, [batch_size])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef inputs(eval_data, data_dir, batch_size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Construct input for CIFAR evaluation using the Reader ops.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      eval_data: bool, indicating if one should use the train or eval data set.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      data_dir: Path to the CIFAR-10 data directory.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      batch_size: Number of images per batch.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      images: Images. 4D tensor of [batch_size, IMAGE_SIZE, IMAGE_SIZE, 3] size.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      labels: Labels. 1D tensor of [batch_size] size.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    match_or_not = np.random.choice(2, 100000)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not eval_data:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        locks = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        keys = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in xrange(1, 30000):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            match = match_or_not[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            locks.append(os.path.join(data_dir, 'images/%d_L.png' % i))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if match == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                j = randint(1, 29999)  # TODO: Make sure i is not randomly picked by accident123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                j = i + 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            keys.append(os.path.join(data_dir, 'images/%d_K.png' % j))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_examples_per_epoch = NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        locks = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        keys = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in xrange(30001, 49500):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            match = match_or_not[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            locks.append(os.path.join(data_dir, 'images/%d_L.png' % i))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if match == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                j = randint(30001, 49500)  # TODO: Make sure i is not randomly picked by accident123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                j = i + 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            keys.append(os.path.join(data_dir, 'images/%d_K.png' % j))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_examples_per_epoch = NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for f in locks:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not tf.gfile.Exists(f):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('Failed to find file: ' + f)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for f in keys:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not tf.gfile.Exists(f):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise ValueError('Failed to find file: ' + f)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Create a queue that produces the filenames to read.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lock_queue = tf.train.string_input_producer(locks)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    key_queue = tf.train.string_input_producer(keys)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    match_queue = tf.FIFOQueue(capacity=10000, dtypes=tf.uint8)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    match_queue.enqueue(match_or_not)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Read examples from files in the filename queue.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    read_input = read_cifar10(lock_queue, key_queue, match_queue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    reshaped_image = tf.cast(read_input.uint8image, tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    height = IMAGE_SIZE123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    width = IMAGE_SIZE123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Image processing for evaluation.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Crop the central [height, width] of the image.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    resized_image = tf.image.resize_image_with_crop_or_pad(reshaped_image,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                           height, width)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Subtract off the mean and divide by the variance of the pixels.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    float_image = tf.image.per_image_standardization(resized_image)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Set the shapes of tensors.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    float_image.set_shape([height, width, 3])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print("Label:", read_input.label)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Ensure that the random shuffling has good mixing properties.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    min_fraction_of_examples_in_queue = 0.4123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    min_queue_examples = int(num_examples_per_epoch *123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                             min_fraction_of_examples_in_queue)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Generate a batch of images and labels by building up a queue of examples.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return _generate_image_and_label_batch(float_image, read_input.label,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                           min_queue_examples, batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                           shuffle=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF