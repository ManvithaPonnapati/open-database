#!/usr/bin/env python123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# -*- coding: utf-8 -*-123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport importlib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pwd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport socket123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport zipfile123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport urllib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom random import randint123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport requests123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom time import gmtime, strftime123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom PIL import Image123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom six.moves import urllib as smurllib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport FLAGS, PARAMS123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_username():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return pwd.getpwuid(os.getuid()).pw_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef check_dependencies_installed():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Checks whether the needed dependencies are installed.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    :return: a list of missing dependencies123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    missing_dependencies = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        import importlib123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except ImportError:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        missing_dependencies.append("importlib")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dependencies = ["termcolor",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "colorama",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "tensorflow",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "numpy",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "PIL",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "six",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "tarfile",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "zipfile",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    "requests"]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for dependency in dependencies:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not can_import(dependency):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            missing_dependencies.append(dependency)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return missing_dependencies123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef can_import(some_module):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        importlib.import_module(some_module)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except ImportError:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return False123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef maybe_download_and_extract():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """Downloads and extracts the zip from en, if necessary"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_directory = FLAGS.data_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(dest_directory):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(dest_directory)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filename = PARAMS.DATA_URL.split('/')[-1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filepath = os.path.join(dest_directory, filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(filepath):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        def _progress(count, block_size, total_size):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            sys.stdout.write('\r>> Downloading %s %.1f%%' % (filename,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                             float(count * block_size) / float(total_size) * 100.0))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            sys.stdout.flush()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filepath, _ = smurllib.request.urlretrieve(PARAMS.DATA_URL, filepath, _progress)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        statinfo = os.stat(filepath)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print('Successfully downloaded', filename, statinfo.st_size, 'bytes.')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    extracted_dir_path = os.path.join(dest_directory, 'cifar-10-batches-bin')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(extracted_dir_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        zip_ref = zipfile.ZipFile(filepath, 'r')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        zip_ref.extractall(dest_directory)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        zip_ref.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef verify_dataset():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    which = randint(1, 10000)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    where = os.path.join(FLAGS.data_dir, 'images/%d_L.png' % which)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    im = Image.open(where)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    width, height = im.size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # print("w, h: " + str(width) + ", " + str(height))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (width == 100 and height == 100):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception("Dataset appears to have been corrupted. (Check " + where + ")")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef notify(message, subject="Notification", email=FLAGS.NOTIFICATION_EMAIL):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    params = {'message': "[" + get_time_string() + "]: " + message, 'subject': subject, 'email': email}123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    encoded_params = urllib.urlencode(params)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    response = requests.get('https://electronneutrino.com/affinity/notify/notify.php?' + encoded_params)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print (response.status_code)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print (response.content)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_time_string():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return strftime("%Y-%m-%d %H:%M:%S", gmtime()) + " GMT"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef get_hostname():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return socket.gethostname()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef print_progress_bar(iteration, total, prefix='', suffix='', decimals=1, length=100, fill="â–ˆ"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Call in a loop to create terminal progress bar. Based on https://stackoverflow.com/a/34325723123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    @params:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        iteration   - Required  : current iteration (Int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        total       - Required  : total iterations (Int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prefix      - Optional  : prefix string (Str)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        suffix      - Optional  : suffix string (Str)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        decimals    - Optional  : positive number of decimals in percent complete (Int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        length      - Optional  : character length of bar (Int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        fill        - Optional  : bar fill character (Str)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filled_length = int(length * iteration // total)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    bar = fill * filled_length + '-' * (length - filled_length)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stdout.write('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix) + '\r')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sys.stdout.flush()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Print New Line on Complete123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if iteration == total:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sys.stdout.write()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF