import numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os,re, random,prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom itertools import chain123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom atom_dict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef generate_random_transition_matrix(shift_range=20,rotation_range=np.pi*2):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """returns a random transition matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rotation range - determines random rotations along any of X,Y,Z axis123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shift_range determines allowed shifts along any of X,Y,Z axis """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # REMARK: shift range is hard coded to 10A because that's how the proteins look like123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # randomly shift along X,Y,Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_shift_matrix = np.matrix([[1 ,0 , 0, random.random()*shift_range],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                 [0, 1, 0, random.random()*shift_range],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                 [0, 0, 1, random.random()*shift_range],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                 [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ## randomly rotate along X123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rand_x = random.random()*rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    x_rotate_matrix = np.matrix([[1, 0, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               [0, np.cos(rand_x), - np.sin(rand_x), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               [0, np.sin(rand_x), np.cos(rand_x), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ## randomly rotate along Y123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rand_y = random.random()*rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    y_rotate_matrix = np.matrix([[np.cos(rand_y), 0, np.sin(rand_y), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                [0, 1, 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                [-np.sin(rand_y), 0, np.cos(rand_y), 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                [0, 0 ,0 ,1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ## randomly rotate along Z123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rand_z = random.random()*rotation_range123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    z_rotate_matrix = np.matrix([[np.cos(rand_z), -np.sin(rand_z), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               [np.sin(rand_z), np.cos(rand_z), 0, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                               [0, 0, 1, 0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                [0, 0, 0, 1]])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # combining all matrices into one by multiplication123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # nice property of the matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    xyz_rotate_shift_matrix =  xyz_shift_matrix * x_rotate_matrix * y_rotate_matrix * z_rotate_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return xyz_rotate_shift_matrix123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef affine_transform(coordinate_array):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """applies transition to every point of the array"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_center_of_mass = np.average(coordinate_array, axis=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    relative_coords = coordinate_array - ligand_center_of_mass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    relative_matrix = np.matrix(relative_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    raw_of_ones = np.matrix(np.ones(len(relative_matrix[:, 0])))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    transition_matrix = generate_random_transition_matrix()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    transformed_coord = (transition_matrix * np.vstack((relative_matrix.transpose(), raw_of_ones)))[0:3, :].transpose()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    final_coord = transformed_coord+ligand_center_of_mass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return np.array(final_coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef generate(ligand_path,rotate_num=10000):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destPath = '/home/ubuntu/xiao/data/random_gen/ligands'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_name =os.path.basename(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    pdb_name = ligand_name.split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destFilepath = os.path.join(destPath,pdb_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(destFilepath):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.mkdir(destFilepath)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody_ligand = prody.parsePDB(ligand_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand_atom_to_number = lambda atomname:atom_dictionary.LIG[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_numbers = map(ligand_atom_to_number,prody_ligand.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        coordinates = prody_ligand.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i in range(rotate_num):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            transformed_coords = affine_transform(coordinates)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            coordinates_and_atoms = np.hstack((transformed_coords,np.reshape(atom_numbers,(-1,1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            save_name = re.sub('.pdb$','_'+str(i),ligand_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            np.save(os.path.join(destFilepath,save_name),coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print i123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef preprocess_receptors(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for dirpath, dirnames, filenames in os.walk(folder_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for filename in filenames:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if re.search('.pdb$', filename):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_file_path = str(os.path.abspath(dirpath) + "/" + filename)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody_receptor = prody.parsePDB(receptor_file_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                def receptor_atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    atomic_tag_number = atom_dictionary.REC[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    atom_numbers = map(receptor_atom_to_number, prody_receptor.getElements())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    coordinates_and_atoms = np.hstack((prody_receptor.getCoords(), np.reshape(atom_numbers, (-1, 1))))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    np.save(re.sub('.pdb$', '', receptor_file_path), coordinates_and_atoms)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                except Exception:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFgenerate('/home/ubuntu/maksym/old/dataset_dec04/labeled_pdb/crystal_ligands/2pw3/2pw3_653_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFpreprocess_receptors('/home/ubuntu/xiao/data/random_gen/receptors')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF