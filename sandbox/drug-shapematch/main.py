#!/usr/bin/env python123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF# -*- coding: utf-8 -*-123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import print_function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import print_function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import print_function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom __future__ import print_function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time, os, sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom constants import CONSTANTS123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport dsminput123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFsys.path.append('../../')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport affinity as af123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef train():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    This function trains the network on actual drugs.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Make logging very verbose123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.logging.set_verbosity(tf.logging.DEBUG)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Launch a tensorflow session123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    sess = tf.Session()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create a filename queue first123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # filename_queue, examples_in_database = dsminput.index_database_into_q(CONSTANTS.database_path, shuffle=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create an epoch counter123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # with tf.variable_scope("epoch_counter"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #     batch_counter = tf.Variable(0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #     batch_counter_increment = tf.assign(batch_counter, tf.Variable(0).count_up_to(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #         np.round((examples_in_database * CONSTANTS.num_training_epochs) / CONSTANTS.batch_size)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #     epoch_counter = tf.div(batch_counter * CONSTANTS.batch_size, examples_in_database)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Create the image and label batches for the data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    (filequeue, (image_batch, label_batch)) = dsminput.inputs(eval_data=False, data_dir=CONSTANTS.database_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                              batch_size=CONSTANTS.batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                              side_pixels=CONSTANTS.side_pixels,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                              num_threads=CONSTANTS.num_threads)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # _, current_epoch, label_batch, image_batch = dsminput.image_and_label_q(batch_size=CONSTANTS.batch_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         pixel_size=CONSTANTS.pixel_size,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         side_pixels=CONSTANTS.side_pixels,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         num_threads=CONSTANTS.num_threads,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         filename_q=filename_queue,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         epoch_counter=epoch_counter,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #                                                                         lig_frame='OVERSAMPLING')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print("Image batch shape")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print(image_batch.get_shape())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    keep_prob = tf.placeholder(tf.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with tf.variable_scope("network"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Predict the labels using a MaxNet123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        predicted_labels = af.networks.MaxNet().compute_output(image_batch, keep_prob, CONSTANTS.batch_size)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Calculate cross-entropy loss123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label_batch, logits=predicted_labels)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cross_entropy_mean = tf.reduce_mean(cross_entropy)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.summary.scalar('cross entropy mean', cross_entropy_mean)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Randomly shuffle along the batch dimension and calculate the shuffled error123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shuffled_labels = tf.random_shuffle(label_batch)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    shuffled_cross_entropy_mean = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=predicted_labels,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                                                                labels=shuffled_labels))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.summary.scalar('shuffled cross entropy mean', shuffled_cross_entropy_mean)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Minimize cross entropy using an AdamOptimizer123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    with tf.variable_scope("Adam_optimizer"):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        train_step_run = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Merge all summaries, create a file writer object123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    merged_summaries = tf.summary.merge_all()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    train_writer = tf.summary.FileWriter((CONSTANTS.summaries_dir + '/' + CONSTANTS.run_name + "_logs"), sess.graph)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Create saver to save and load the network state123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    saver = tf.train.Saver(var_list=(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="Adam_optimizer") +123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                     tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="network") +123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                     tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope="epoch_counter")))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Either load the saved session or initialize global variables123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if CONSTANTS.saved_session is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print("Restoring variables from sleep. This may take a while...")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # sess.run(tf.global_variables_initializer())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        saver.restore(sess, CONSTANTS.saved_session)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print("all variables restored. Start training")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Launch all threads123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # (Note: only do this after the graph is complete and all the variables initialized!)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    coord = tf.train.Coordinator()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    threads = tf.train.start_queue_runners(sess=sess, coord=coord)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Training loop123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    for i in xrange(1, 1000000):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        start = time.time()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        c_entropy_mean, _ = sess.run([cross_entropy_mean, train_step_run], feed_dict={keep_prob: 0.5})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print("local step: ", i, "cross entropy mean:", c_entropy_mean,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF              "\texamples per second:", "%.2f" % (CONSTANTS.batch_size / (time.time() - start)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # Once in a while, save the network state123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if (i % 1000 == 999):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            c_entropy_mean, sc_entropy_mean, summaries = sess.run(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                [cross_entropy_mean, shuffled_cross_entropy_mean, merged_summaries], feed_dict={keep_prob: 1})123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            print("cross entropy mean:", c_entropy_mean, "shuffled cross entropy mean:", sc_entropy_mean)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            train_writer.add_summary(summaries)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            saver.save(sess, CONSTANTS.summaries_dir + '/' + CONSTANTS.run_name + "_netstate/saved_state",123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                       global_step=i)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    assert not np.isnan(cross_entropy_mean), 'Model diverged with loss = NaN'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef main(_):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Creates the directories and begins training.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Directories stuff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    summaries_dir = os.path.join(CONSTANTS.summaries_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # CONSTANTS.run_index defines when123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    CONSTANTS.run_index = 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    CONSTANTS.run_name = CONSTANTS.run_name + "_main"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    while tf.gfile.Exists(summaries_dir + "/" + str(CONSTANTS.run_index) + '_netstate') \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            or tf.gfile.Exists(summaries_dir + "/" + str(CONSTANTS.run_index) + '_logs'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        CONSTANTS.run_index += 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    CONSTANTS.run_name = str(CONSTANTS.run_index) + "_" + CONSTANTS.run_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.gfile.MakeDirs(summaries_dir + "/" + CONSTANTS.run_name + '_netstate')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.gfile.MakeDirs(summaries_dir + "/" + CONSTANTS.run_name + '_logs')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # Start training the network!123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    train()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    tf.app.run()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF