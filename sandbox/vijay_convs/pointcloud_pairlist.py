import tensorflow as tf123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFint_repeat_module = tf.load_op_library('/home/cosmynx/Documents/neighbor_listing/int_repeat.so')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFint_sequence_module = tf.load_op_library('/home/cosmynx/Documents/neighbor_listing/int_sequence.so')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef pointcloud_pairlist(source_points,dest_points,cutoffs_xyz,ordered=True):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_coords = tf.to_float(source_points)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_coords = tf.to_float(dest_points)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    cutoffs_xyz = tf.to_float(cutoffs_xyz)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    point_mean = tf.reduce_mean(tf.concat([srcpnt_coords,destpnt_coords],0),reduction_indices=0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_coords = srcpnt_coords - point_mean123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_coords = destpnt_coords - point_mean123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # index source and destination points123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_srcpnt = tf.shape(srcpnt_coords)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcpnt_idx = tf.to_int64(tf.range(num_srcpnt))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_destpnt = tf.shape(destpnt_coords)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_idx = tf.to_int64(tf.range(num_destpnt))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # define a grid of the size cutoff around both of the point clouds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_coords = tf.to_int64((source_points / cutoffs_xyz)+0.5)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_coords = tf.to_int64((dest_points / cutoffs_xyz)+0.5)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # sort both source and destination clouds123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_stensor = tf.SparseTensor(indices=srcgrid_coords,values=srcpnt_idx,dense_shape=[1,1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_stensor = tf.sparse_reorder(srcgrid_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_stensor = tf.SparseTensor(indices=destgrid_coords,values=destpnt_idx,dense_shape=[1,1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_stensor = tf.sparse_reorder(destgrid_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_coords = tf.cast(srcgrid_stensor.indices,tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_order = srcgrid_stensor.values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_coords = tf.cast(destgrid_stensor.indices,tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_order = destgrid_stensor.values123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find the number of points in every grid (start + end)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_names = tf.bitcast(tf.concat([srcgrid_coords,tf.zeros([num_srcpnt,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_srcgrid_names,srcgrid_ids,srcgrid_counts = tf.unique_with_counts(srcgrid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_starts = tf.segment_min(srcpnt_idx,srcgrid_ids)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_names = tf.bitcast(tf.concat([destgrid_coords,tf.zeros([num_destpnt,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_destgrid_names,destgrid_ids,destgrid_counts = tf.unique_with_counts(destgrid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_starts = tf.segment_min(destpnt_idx,destgrid_ids)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # generate all possible 27 grid neighbors of each of the source grids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_srcgrids = tf.shape(unq_srcgrid_names)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_idx = tf.to_int64(tf.range(num_srcgrids))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    unq_srcgrid_coords = tf.bitcast(unq_srcgrid_names,tf.int16)[:,0:3]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_destgrids = tf.shape(unq_destgrid_names)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # itself            (1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # face neighbors    (6)  : +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # edge neighbors    (12) : +/-1 +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # vertex neighbors  (8)  : +/-1 +/-1 +/-1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    neighbor_shift = tf.constant([[0,0,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,0,1],[0,1,0],[1,0,0],[0,0,-1],[0,-1,0],[-1,0,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,1,1],[1,0,1],[1,1,0],[0,-1,-1],[-1,0,-1],[-1,-1,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [0,1,-1],[1,0,-1],[1,-1,0],[0,-1,1],[-1,0,1],[-1,1,0],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                  [1,1,1],[1,1,-1],[1,-1,1],[-1,1,1],[1,-1,-1],[-1,1,-1],[-1,-1,1],[-1,-1,-1]],tf.int16)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    neighbor_shifts = tf.tile(neighbor_shift,[num_srcgrids,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_nhb_coords = tf.reshape(tf.tile(unq_srcgrid_coords,[1,27]),[-1,3]) + neighbor_shifts123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_nhb_names = tf.bitcast(tf.concat([srcgrid_nhb_coords,tf.zeros([num_srcgrids*27,1],tf.int16)],1),tf.int64)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_of_srcgrid = tf.reshape(tf.tile(tf.expand_dims(srcgrid_idx, 1), [1, 27]), [-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # find grid if grid neighbors of the source grids exist in destination grids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    all_grid_names = tf.concat([unq_destgrid_names,srcgrid_nhb_names],0)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    _,all_grid_ids,_ = tf.unique_with_counts(all_grid_names)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_of_srcgrid = tf.slice(all_grid_ids,[num_destgrids],[num_srcgrids*27])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    filter_notempty = destgrid_of_srcgrid < num_destgrids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_of_srcgrid = tf.boolean_mask(srcgrid_of_srcgrid, filter_notempty)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_of_srcgrid = tf.boolean_mask(destgrid_of_srcgrid, filter_notempty)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    srcgrid_slices = tf.stack([tf.to_int32(tf.gather(srcgrid_starts,srcgrid_of_srcgrid)), tf.gather(srcgrid_counts,srcgrid_of_srcgrid)],axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destgrid_slices = tf.stack([tf.to_int32(tf.gather(destgrid_starts,destgrid_of_srcgrid)), tf.gather(destgrid_counts,destgrid_of_srcgrid)],axis=1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # convert the slices of the gerid cells into back into the points123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_1 = int_sequence_module.int_sequence(srcgrid_slices[:,0], srcgrid_slices[:, 1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_2 = int_repeat_module.int_repeat(destgrid_slices[:,1], srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = int_repeat_module.int_repeat(src_pairs_1, src_pairs_2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_1 = int_repeat_module.int_repeat(destgrid_slices[:,0],srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_2 = int_repeat_module.int_repeat(destgrid_slices[:,1],srcgrid_slices[:,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = int_sequence_module.int_sequence(dest_pairs_1,dest_pairs_2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # # todo assert src and dest pairs are of the same size123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = tf.gather(srcgrid_order,src_pairs) # map to the initial order of coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = tf.gather(destgrid_order,dest_pairs) # map to the initial order of coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # calculate the exact distance between every pair of points, and crop points that do not fit123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs_coords = tf.gather(srcpnt_coords, src_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs_coords = tf.gather(destpnt_coords, dest_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_rel_coords = dest_pairs_coords - src_pairs_coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    in_radii_of_src = tf.reduce_all(tf.abs(destpnt_rel_coords) < cutoffs_xyz,1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    destpnt_rel_coords = tf.boolean_mask(destpnt_rel_coords,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = tf.boolean_mask(src_pairs,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = tf.boolean_mask(dest_pairs,in_radii_of_src)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if ordered:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # todo if ordered # todo (bigger multiplier)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # (optional) order by the source point (first) and by the distance (second)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_pairs = tf.shape(src_pairs)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_idx = tf.range(0, num_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_rel_dist = tf.reduce_sum(destpnt_rel_coords**2,reduction_indices=1)**0.5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_int_dist = tf.to_int64((pairs_rel_dist / tf.reduce_mean(cutoffs_xyz)) * 1000000)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor_idx = tf.concat([tf.expand_dims(src_pairs,1),tf.expand_dims(pairs_int_dist,1)],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.SparseTensor(pairs_stensor_idx,pairs_idx,dense_shape=[1,1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pairs_stensor = tf.sparse_reorder(pairs_stensor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        src_pairs = pairs_stensor.indices[:,0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_pairs = tf.gather(dest_pairs,pairs_stensor.values)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        destpnt_rel_coords = tf.gather(destpnt_rel_coords,pairs_stensor.values)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return src_pairs,dest_pairs,destpnt_rel_coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef create_neighbor_list(srcpnt_coords,src_pairs,dest_pairs,num_neighbors):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_srcpnt = tf.shape(srcpnt_coords)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    num_pairs = tf.shape(src_pairs)[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table_shape = tf.to_int64(tf.stack([num_neighbors, num_srcpnt]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # if any of the source points has more neighbors than requested, crop them123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_per_srcpnt = tf.segment_sum(tf.ones([num_pairs],tf.int32),src_pairs)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_idx = int_sequence_module.int_sequence(tf.zeros([num_srcpnt], tf.int32), nhbr_per_srcpnt)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_fits_table = nhbr_idx < num_neighbors123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_idx = tf.boolean_mask(nhbr_idx,nhbr_fits_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    src_pairs = tf.boolean_mask(src_pairs,nhbr_fits_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_pairs = tf.boolean_mask(dest_pairs,nhbr_fits_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # convert lists of neighboring points; 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # if some of the points do not have enogh neighbors, pad with 0s123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table_indices = tf.concat([tf.to_int64(tf.expand_dims(nhbr_idx,1)),tf.expand_dims(src_pairs,1)],1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table_values = tf.to_int64(dest_pairs) #got rid of adding 1 part123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_table = tf.SparseTensor(table_indices,table_values, dense_shape=table_shape)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_table = tf.sparse_reorder(nhbr_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_table = tf.sparse_tensor_to_dense(nhbr_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    nhbr_table = tf.transpose(nhbr_table)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return nhbr_table