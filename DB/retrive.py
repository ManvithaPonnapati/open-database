import os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numbers 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom collections import namedtuple123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom database_action import db 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport six 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport pandas as pd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport cPickle123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport tensorflow as tf 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFsys.path.append('..')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom av4_atomdict import atom_dictionary123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _receptor(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return os.path.basename(path).split('_')[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef atom_to_number(atomname):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    atomic_tag_number = atom_dictionary.ATM[atomname.lower()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return atomic_tag_number123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _int_feature(value):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.train.Feature(int64_list=tf.train.Int64List(value=value))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _float_feature(value):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.train.Feature(float_list=tf.train.FloatList(value=value))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _byte_feature(value):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return tf.train.Feature(byte_list=tf.train.BytesList(value=value))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef save_with_format(filepath,labels,elements,multiframe_coords,d_format='tfr'):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save the labels, elemetns and coords into as d_format file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        filepath: path for the output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        labels:  [0] for receptor [affinity] for crystal ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elements: int64::list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        multiframe_coords:  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        d_format: output format ['tfr','pkl','av4']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.asarray(labels,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elements = np.asarray(elements,dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    multiframe_coords = np.asarray(multiframe_coords,dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (int(len(multiframe_coords[:,0]) == int(len(elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if multiframe_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not int(len(labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception ('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(multiframe_coords[0, 0, :]) == int(len(labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    number_of_examples = np.array([len(labels)], dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if d_format == 'av4':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record = number_of_examples.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += labels.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += elements.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        av4_record += multiframe_coords.tobytes()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f = open(filepath, 'w')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.write(av4_record)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        f.close()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif d_format == 'pkl':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dump_cont = [number_of_examples,labels, elements, multiframe_coords]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cPickle.dump(dump_cont,open(filepath,'w'))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    elif d_format == 'tfr':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        writer = tf.python_io.TFRecordWriter(filepath)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        example = tf.train.Example(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            features=tf.train.Features(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                feature={123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'number_of_examples': _int_feature(number_of_examples),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'labels': _float_feature(labels),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'elements': _int_feature(elements),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'multiframe_coords': _float_feature(multiframe_coords.reshape(-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        serialized = example.SerializeToString()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        writer.write(serialized)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef save_tfr_one(save_path, rec_labels, rec_elements, rec_coords, lig_labels, lig_elements, lig_coords):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    record receptor and ligand into one TFRecords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_path: path for output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_labels: always [0] for receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_elements: int64::list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coords:  numpy.array 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_labels:  numpy.array123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_elements: numpy.array123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_coords: numpy.array123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_labels = np.asarray(rec_labels, dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_elements = np.asarray(rec_elements, dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_coords = np.asarray(rec_coords, dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_labels = np.asarray(lig_labels, dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_elements = np.asarray(lig_elements, dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_coords = np.asarray(lig_coords, dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (int(len(rec_coords[:,0]) == int(len(rec_elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Receptor: Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if rec_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not int(len(rec_labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception ('Receptor: Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(rec_coords[0, 0, :]) == int(len(rec_labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Rcecpeor: Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not (int(len(lig_coords[:,0]) == int(len(lig_elements)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception('Ligand: Number of atom elements is not equal to the number of coordinates')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if lig_coords.ndim==2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not int(len(lig_labels))==1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception ('Ligand: Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not (int(len(lig_coords[0, 0, :]) == int(len(lig_labels)))):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception('Ligand: Number labels is not equal to the number of coordinate frames')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    number_of_examples = np.array([len(lig_labels)], dtype=np.int32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    writer = tf.python_io.TFRecordWriter(save_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    example = tf.train.Example(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        features=tf.train.Features(123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            feature={123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'number_of_examples': _int_feature(number_of_examples),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'ligand_labels': _float_feature(lig_labels),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'ligand_elements': _int_feature(lig_elements),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'ligand_coords': _float_feature(lig_coords.reshape(-1)),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'receptor_labels':_float_feature(rec_labels),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'receptor_elements':_int_feature(rec_elements),123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'receptor_coords':_float_feature(rec_coords.reshape(-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    serialized = example.SerializeToString()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    writer.write(serialized)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef convert_and_save_data(base_dir, rec_path, lig_path, doc_path, position, affinity, d_format):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    convert the receptor and ligand into given format123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    in the database position is start with 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    but when select coordinates be care that python list start with 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    so we need np.asarray(position).sort()-1 to make it work123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        base_dir: directory for output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_path: path for receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_path: path for ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        doc_path: path for docked ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position: list of position for docked liangd, start with 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        affinity: affinity value ( log affinity or norm faffinity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        d_format: output format [ pdb, pkl, av4, tfr, tfr_one ]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns: (save_rec_path, save_lig_path) path of the output file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF             (None, None) when failed to parse PDB file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF             (save_path, None) when output format is tfr_one123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    REMOVE_HYDROGENS = True123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def remove_hydrogens(parsed_pdb):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        nonHydrogens = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for atom in parsed_pdb.iterAtoms():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            element = atom.getElement()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            coord = atom.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            index = atom.getIndex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if atom.getElement() != 'H':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    nonHydrogens.append([element, coord, index])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return nonHydrogens123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    print('In convert func')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    dest_dir = os.path.join(base_dir,d_format, _receptor(rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(dest_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_receptor = prody.parsePDB(rec_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    prody_ligand = prody.parsePDB(lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #Using remove hydrogens function123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if REMOVE_HYDROGENS:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_elem = np.array([val[0] for val in remove_hydrogens(prody_receptor)]) #prody_receptor.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_elem = np.array([val[0] for val in remove_hydrogens(prody_ligand)]) #prody_ligand.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_coords = np.array([val[1] for val in remove_hydrogens(prody_ligand)]) #remove_hydrogens(prody_ligand, coords=True)#prody_ligand.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_elem = prody_receptor.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_elem = prody_ligand.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_coords = prody_ligand.getCoords()    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    receptor_coords = np.array([val[1] for val in remove_hydrogens(prody.parsePDB(rec_path))])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    labels = np.array([affinity], dtype=np.float32)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if len(position):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # docked list not empty123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody_docked = prody.parsePDB(doc_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if REMOVE_HYDROGENS:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_elem = np.array([val[0] for val in remove_hydrogens(prody_docked)]) #remove_hydrogens(prody_docked, elements=True)#prody_docked.getElements()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_indices = np.array([val[2] for val in remove_hydrogens(prody_docked)]) #indices to remove in docked coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_coords = prody_docked.getCoordsets()[np.asarray(position).sort() -1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_coords = np.array([docked_coords[index] for index in docked_indices.tolist()])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_elem = prody_docked.getElements()                    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_coords = prody_docked.getCoordsets()[np.asarray(position).sort() -1]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert all(np.asarray(docked_elem) == np.asarray(ligand_elem))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for docked_coord in docked_coords:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_coords = np.dstack((ligand_coords, docked_coord))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            labels = np.concatenate((labels, [1.]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_coords = np.expand_dims(ligand_coords,-1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor_elements = map(atom_to_number,receptor_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligand_elements = map(atom_to_number,ligand_elem)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return None, None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if d_format == 'pdb':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_rec_name= os.path.basename(rec_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_rec_path = os.path.join(dest_dir, save_rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #os.system('cp {} {}'.format(rec_path, save_rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_lig_name = os.path.basename(lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_lig_path = os.path.join(dest_dir, save_lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(position):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig = prody.parsePDB(lig_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                doc = prody.parsePDB(doc_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig.addCoordset(doc.getCoordsets()[np.asarray(position).sort()-1])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print(e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                exit(1)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            prody.writePDB(save_lig_path, lig)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system('cp {} {}'.format(lig_path, save_lig_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.system('cp {} {}'.format(rec_path, save_rec_path))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return save_rec_path, save_lig_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if d_format == 'tfr_one':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_name = os.path.basename(rec_path).replace('_receptor.pdb','.tfr')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_path = os.path.join(dest_dir, save_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        save_tfr_one(save_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     [0], 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     receptor_elements, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     receptor_coords, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     labels,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     ligand_elements, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                     ligand_coords)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return save_path, None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_name = os.path.basename(rec_path).replace('.pdb','.%s' % d_format)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_name = os.path.basename(lig_path).replace('.pdb','.%s' % d_format)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rec_path = os.path.join(dest_dir,rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    lig_path = os.path.join(dest_dir,lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_with_format(rec_path,[0], receptor_elements, receptor_coords, d_format)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    save_with_format(lig_path, labels , ligand_elements, ligand_coords, d_format)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    return rec_path, lig_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass table(pd.DataFrame):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def apply_rest(self, key, val):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if isinstance(val, numbers.Number) or isinstance(val, six.string_types):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = new[new[key] == val]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, list):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    new = new[new[key] >= minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    new = new[new[key] <= maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif isinstance(val, tuple):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if len(val) == 2:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                minimum, maximum = val123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if minimum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    new = new[new[key] > minimum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                if maximum is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    new = new[new[key] < maximum]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                raise Exception("require restriction size 2, get %d" % len(val))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif val is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("Restrictions type {} doesn't support.".format(type(val).__name__))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self.wrap(new)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    @classmethod123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def wrap(cls, dataframe):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return cls(dataframe)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __and__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(self) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif len(other) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = new.merge(other).drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self.wrap(new)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __or__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(self) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif len(other) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = new.merge(other, how='outer').drop_duplicates().dropna()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self.wrap(new)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __sub__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        intersec = new & other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #union = new | other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        i = set(map(tuple, list(intersec.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        u = set(map(tuple, list(new.values)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = u - i123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        columns = self.columns123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(diff):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = self.wrap(pd.DataFrame(list(diff), columns=columns))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new = self.wrap(pd.DataFrame())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return new123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFclass retrive_data(object):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    export_fmt = ['pdb','pkl','av4','tfr', 'tfr_one']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __init__(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # table for available ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # columns : ['receptor','chain','resnum', 'resname'] + other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # path of receptor : [receptor_folder]/[receptor]/[receptor]_[chain]_[resnum]_[resname]_receptor.pdb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # path of ligand   : [ligand_folder]/[receptor]/[receptor]_[chain]_[resnnum]_[resname]_ligand.pdb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # path of docked ligand : [docked_folder]/[receptor]/[receptor]_[chain]_[resnum]_[resname]_ligand.pdb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ligand = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # table for available position 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # columns : ['receptor','chain','resnum','resname','position'] + other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.position = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # where can get splited receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # e.g. 2_splited_receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.receptor_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # where can get splited ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # e.g. 3_splited_ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.ligand_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # where can get the docked ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # e.g. 4_docked123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.docked_folder = None 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # log_affinity or norm_affinity123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # it will be the label for the ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # table for ligand that is invalid123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # columns = ['resname']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.exclude = table(pd.DataFrame())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __and__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        and operation between two retive_data obj123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self & other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            other: retrive_data obj123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: retrive_data 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.receptor_folder == other.receptor_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.ligand_folder == other.ligand_folder 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.docked_folder == other.docked_folder \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                or self.docked_folder == None \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                or other.docked_folder == None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.affinity_key == other.affinity_key123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self.same()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.ligand = other.ligand 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.ligand is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.ligand = new.ligand & other.ligand 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.position = other.position123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.position is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.position = new.position & other.position 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.exclude is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.exclude = other.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.exclude is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.exclude = new.exclude | other.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.docked_folder is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.docked_folder = other.docked_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return new 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def __or__(self, other):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        or operation between data_retrive obj123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self | other123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            other: data_retrive obj123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: data_retrive obj123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.receptor_folder == other.receptor_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.ligand_folder == other.ligand_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.docked_folder == other.docked_folder \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                or self.docked_folder == None \123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                or other.docked_folder == None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert self.affinity_key == other.affinity_key123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = self.same()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.ligand = other.ligand 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.ligand is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.ligand = new.ligand | other.ligand 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.position = other.position123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.position is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.position = new.position | other.position123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.exclude is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.exclude = other.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        elif other.exclude is not None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.exclude = new.exclude | other.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if new.docked_folder is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            new.docked_folder = other.docked_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return new123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF      123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def same(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Greate and return a new object with same attribute123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: retrive_data object123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.receptor_folder = self.receptor_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.ligand_folder = self.ligand_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.docked_folder = self.docked_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.ligand = self.ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.position = self.position123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.affinity_key = self.affinity_key123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        new.exclude = self.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return new123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def print_all(self, idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.get_success_data(idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name, _, df  = db.get_success_data(idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print(df['receptor'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def retrieve_pdb_files(self, idx1, idx2):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns a list of pdb names to download123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        """123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.get_receptors_with_affinity(idx1, idx2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # self.retrive_all(idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # pdb_names = [x.encode('ascii')+'.pdb' for x in self.ligand['receptor'].tolist()]        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # binding_affinities = self.ligand['log_affinity'].tolist()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # print pdb_names, binding_affinities123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def receptor(self, receptor_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        load available receptor from table with idx: receptor_idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        set receptor_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            receptor_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(receptor_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(receptor_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+['resolution']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('resolution',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand  = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name = db.get_folder(receptor_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.receptor_folder = '{}_{}'.format(receptor_idx, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def crystal(self, crystal_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        load available ligand from table with idx: crystal_idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        set ligand_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            crystal_idx: int 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print('here')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.get_success_data(crystal_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_name, _, df  = db.get_success_data(crystal_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(crystal_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            folder_name  = db.get_folder(crystal_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand_folder = '{}_{}'.format(crystal_idx, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def exclusion(self, ex_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        load the ligand that should be exclude from table with idx: ex_idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ex_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(ex_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(ex_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.exclude is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.exclude = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.exclude = self.exclude | df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def ligand_size(self, ligand_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        select the ligand for the size in restriciton : rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        e.g. rest=(None,20) for the ligand could be fit into the box with size 20 A123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligand_idx: int 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(ligand_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(ligand_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key + ['max_size_on_axis']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('max_size_on_axis', rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        try:            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            folder_name  = db.get_folder(ligand_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand_folder = '{}_{}'.format(ligand_idx, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def docked(self, docked_idx):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        load available docked ligand from table with idx: docked_idx123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        set docked_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            docked_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(docked_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(docked_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        folder_name = db.get_folder(docked_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.docked_folder = '{}_{}'.format(docked_idx, folder_name )123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def overlap(self, overlap_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # select position with overlap value in restriction: rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # e.g. rest=[0.1,0.5] overlap ratio : 0.1 <= value <= 0.5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            overlap_idx: int index for overlap table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(overlap_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(overlap_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+['overlap_ratio']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('overlap_ratio',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.docked & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def rmsd(self, rmsd_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        select position with rmsd value in restriction: rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        e.g. rest=[None, 2] rmsd ration : minimum <= value <= 2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rmsd_idx: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(rmsd_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(rmsd_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df= df[primary_key + ['rmsd']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('rmsd',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.position & df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def native_contact(self, native_contact_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        select position with native contact ration in restriction: rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        e.g. rest=None  no restriction on native contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            native_contact_idx:  int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(native_contact_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(native_contact_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key + ['native_contact']]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest('native_contact',rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else: 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.position = self.position & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def norm_affinity(self, affinity_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        select available ligand with norm affinity value in restriction: rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            affinity_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: tuple: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = 'norm_affinity'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(affinity_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+[self.affinity_key]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest(self.affinity_key,rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def log_affinity(self, affinity_idx, rest):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        select available receptor with log affinity value in restriction: rest123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            affinity_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rest: typle: (a,b) , restriction a < value < b 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  list: [a,b] , restriction a <= value <= b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                  None: no restriction123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        self.affinity_key = 'log_affinity'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _, _, df = db.get_success_data(affinity_idx, dataframe=True)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        primary_key = db.primary_key_for(affinity_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = df[primary_key+[self.affinity_key]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = table(df).apply_rest(self.affinity_key,rest)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.ligand is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = df123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            self.ligand = self.ligand & df 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        return self123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def export_table(self):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        export the retrive result as a dataframe table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self.ligand - self.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return self.ligand & self.position - self.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    def export_data_to(self, folder_name, d_format):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        retrive data to the folder named by [folder_name] and convert them to [d_format]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF           123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            folder_name: the data to export the folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            d_format: str123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'pkl': python pikle123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'av4': affinity build-in binary format123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'tfr': tensorflow record format123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'pdb': save format as input123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'tfr_one': save ligand and receptor in one TFRecord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not d_format in self.export_fmt:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception("Unexpected format {}, available format: {}".\123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                format(d_format, self.export_fmt))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        export_dir = os.path.join(config.export_dir, folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if self.position is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            valid = self.ligand - self.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            collection = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for i in range(len(valid)):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                item = valid.ix[i]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor = item['receptor']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                file = '_'.join(item[['receptor', 'chain', 'resnum', 'resname']])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_path = os.path.join(config.data_dir, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.receptor_folder, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.ligand_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                docked_path = ''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                positions = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = item[self.affinity_key]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                collection.append([receptor_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                ligand_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                docked_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                positions, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        else:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            valid = self.ligand & self.position - self.exclude123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            collection =[]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            for keys, group in valid.groupby(['receptor','chain','resnum','resname', self.affinity_key]):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor = keys[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                file = '_'.join(keys[:4])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                receptor_path = os.path.join(config.data_dir, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.receptor_folder, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_receptor.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ligand_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.ligand_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                docked_path = os.path.join(config.data_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        self.docked_folder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                        file+'_ligand.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                positions = sorted(group['position'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = list(set(group[self.affinity_key]))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                assert len(affinity) == 1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                affinity = affinity[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                collection.append([receptor_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   ligand_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   docked_path, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   positions, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                   affinity])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print(set(map(lambda x:len(x),collection)))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        export_table_dir = os.path.join(export_dir,'index')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(export_table_dir):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.makedirs(export_table_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(collection,columns=['receptor','ligand','docked','position','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(export_table_dir,'raw.csv'), index=False, sep='\t')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        data_export_dir = os.path.join(export_dir,'data')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        index = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for receptor, ligand, docked, position, aff in collection:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            rec_path, lig_path = convert_and_save_data(data_export_dir,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     ligand,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     docked,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     position,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     aff,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                                                     d_format)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if rec_path is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                continue123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            index.append([rec_path, lig_path, aff])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df = pd.DataFrame(index, columns=['receptor','ligand','affinity'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        df.to_csv(os.path.join(export_table_dir,'index.csv'), index=False)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef example1():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    simple example for retrive data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create retrive_data class123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get the info for receptor from table: 2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.receptor(2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get the info for ligand from table: 3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.crystal(3)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # get the info for affinity from table: 4123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.log_affinity(4, None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # export the data to the folder named 'test_tfr_one' as TFRecord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ra.export_data_to('test_tfr_one','tfr')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #table = ra.export_table()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef example2():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    example to show how to combine result coming from diffrernt way123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # create retrive_data object123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r  = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # set the table to get ligand123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # receptor from table:2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # reordered ligand from table:3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # docked ligand from table:4123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # affinity information from table:5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # select the record which have norm affinity value123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rb = r.recpeotr(2).crystal(3).docked(4).norm_affinity(5,None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # overlap info from table 6123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # select the position with overlap ratio value <= 0.5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rc = rb.same().overlap(6,[None,0.5])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # overlap info from table 6 rmsd info from table 7123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # select teh position with overlap ratio value > 0.5 and rmas value <= 2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    rd = rb.same().overlap(6,(0.5,None)).rmsd(7,[None,2])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    re = rc | rd 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    table = re.export_table()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef example3():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r.receptor(43, None).crystal(36).log_affinity(44, None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r.export_data_to('debug_hydro_removal', 'av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef example4():123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    r.receptor(43, None).ligand_size(54, [None, 20]).log_affinity(44, None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    a = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    a.receptor(43, None).ligand_size(54, [None, 20]).log_affinity(46, None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    b = retrive_data()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    b.receptor(43, None).ligand_size(54, [None, 20]).log_affinity(47, None)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    c = r | a | b123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #r.crystal(54)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    #r.ligand_size(54, [None, 20])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    c.export_data_to('big_vijay_data', 'av4')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFif __name__ == '__main__':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    example4()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF