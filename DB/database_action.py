"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFProcessing data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF"""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport os123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport sys123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport re 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport time123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport subprocess123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom functools import partial123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom glob import glob123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom utils import log, smina_param, timeit, count_lines, hydrogen_bond_count, rotatable_bond_count123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport numpy as np 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport scipy.spatial.distance123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF#import openbabel123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport prody123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom config import data_dir                                                                 # todo(maksym) import config123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom db import AffinityDatabase123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom parse_binding_DB import parse_bind_func123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFfrom ccdc import io123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFimport ast123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdb = AffinityDatabase()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef _makedir(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    if not os.path.exists(path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        os.makedirs(path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef insert_column(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download_idx = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        column_name = param['column_name']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        column_dtype = param['column_dtype']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # = db.get_table(download_idx)        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table = db.get_table_name_by_idx(table_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        download = db.get_table_name_by_idx(download_idx)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.copy_table(table, download)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert_column(table, column_name, column_dtype)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print(db.get_table(table_idx))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print("Error Found")123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pass123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef local_csd_load(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Perform CCDC commands on input_data and upload to table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: id for download table 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'output_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ...123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: str CSD identifier123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    start_time = time.time()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        csd_identifier = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        csd_reader = io.EntryReader('CSD')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        csd_identifier_entry = csd_reader.entry(csd_identifier)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        csd_identifier_crystal = csd_reader.crystal(csd_identifier)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        csd_identifier_molecule = csd_reader.molecule(csd_identifier)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #Filtering the submolecules into the "main molecule"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #main_component = csd_identifier_molecule.heaviest_component123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #solvent_smiles = np.load('/home/urops/ryanh/solvent_smiles.npy').tolist()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        solvent_smiles = param['solvent_smiles']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #Iterate through the components, stripping those that are not in 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        non_solvents = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for mol in csd_identifier_molecule.components:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if str(mol.smiles) not in solvent_smiles:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                non_solvents.append(mol)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #Now check the non_solvents already have smiles strings in the database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #all_smiles = np.load('/home/urops/ryanh/csd_smiles.npy').tolist()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_smiles = param['all_smiles']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        unique_mol = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for mol in non_solvents:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            if str(mol.smiles) not in all_smiles or len(non_solvents) == 1:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                unique_mol.append(mol)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if len(unique_mol) == 0:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            raise Exception123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        unique_mol = sorted(unique_mol, key=lambda mol: mol.molecular_weight)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        main_component = unique_mol[-1] #pick heaviest component123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        molecule_elems = ""123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for atom in main_component.atoms:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            label_string = str(atom.label)+','123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            molecule_elems += label_string123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        molecule_coords = repr([[atom.coordinates[0], atom.coordinates[1], atom.coordinates[2]] if atom.coordinates is not None else ['None', 'None', 'None'] for atom in main_component.atoms])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        molecule_smiles = main_component.smiles123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #molecule_data = csd_identifier_molecule.to_string('mol2')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        hbond_acceptors, hbond_donors = hydrogen_bond_count(main_component) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rotatable_bonds = rotatable_bond_count(main_component)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        has_disorder = 1 if csd_identifier_entry.has_disorder else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        has_3d_structure = 1 if csd_identifier_entry.has_3d_structure else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        is_organometallic = 1 if csd_identifier_entry.is_organometallic else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        is_polymeric = 1 if csd_identifier_entry.is_polymeric else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        is_organic = 1 if csd_identifier_entry.is_organic else 0123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        r_factor = csd_identifier_entry.r_factor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if r_factor is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            r_factor = 'None'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        temperature = csd_identifier_entry.temperature123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if temperature is None:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            temperature = 'None'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        molecular_weight = csd_identifier_molecule.molecular_weight123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #crystal_data = csd_identifier_crystal.to_string('mol2')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #entry_data = csd_identifier_entry.to_string('mol2')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # record = [csd_identifier, molecule_data, crystal_data, entry_data, str(molecule_smiles), hbond_donors, hbond_acceptors, has_disorder, has_3d_structure, is_organometallic, is_polymeric, is_organic, r_factor, molecular_weight, temperature, rotatable_bonds, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print(record)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #record = [csd_identifier, molecule_data, crystal_data, entry_data, molecule_smiles, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # molecule_data, crystal_data, entry_data, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = [csd_identifier, molecule_coords, molecule_elems, str(molecule_smiles), hbond_donors, hbond_acceptors, has_disorder, has_3d_structure, is_organometallic, is_polymeric, is_organic, r_factor, molecular_weight, temperature, rotatable_bonds, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print("Elapsed", time.time() - start_time)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print(e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # 'error', 'error', 'error', 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #record = [input_data, 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 'error', 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = [csd_identifier, 'error', 'error', 'error', 0, 0, 0, 0, 0, 0, 0, 'error', 'error', 'error', 'error', 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef local_qm9_load(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = input_data                                           # todo(maksym) pdb_id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder_name = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_dir = '/home/maksym/ryan/QM9_PDB'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(dest_dir, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            return123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdbFile = open(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lines = pdbFile.read().splitlines()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        energyLine = lines[0].split('\t')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        energyValues = [float(energy) for energy in energyLine[1:]]        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        moleculeId = [int(energyLine[0].split()[-1])]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #record = [receptor, header['experiment'], header['resolution'], 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = moleculeId + energyValues + [1, '']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = [input_data, 'unk', 0, 0, str(e)]                      # todo maksym (unk) = failed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)   123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef download(bucket, table_idx, param, input_data):         # todo(maksym) input_data = pdb_ids123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Download pdb file from rcsb123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: id for download table 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'output_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ...123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: str pdb id 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = input_data[1:]                                                   # todo(maksym) pdb_id123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder_name = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        dest_dir = os.path.join(data_dir, output_folder_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(dest_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(dest_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #pdb_path = '/home/maksym/ryan/labeled_pdb/crystal_ligands/'+receptor+'/'+receptor+'.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print ('pdb',pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if not os.path.exists(pdb_path):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            download_address = 'https://files.rcsb.org/download/{}.pdb'.format(receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            os.system('wget -P {} {}'.format(dest_dir, download_address))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = [receptor, header['experiment'], header['resolution'], 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        "Exception causing non success"123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print e123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = [input_data, 'unk', 0, 0, str(e)]                      # todo maksym (unk) = failed123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_ligand(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Split ligand form PDB file123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Parse PDB header, ligand records under key 'chemicals', get the 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: id for split ligand table 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'output_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'input_download_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: [str], (str) or str123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF             ['1a2b'] ,('3eml') ,'3eln'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(input_data).__name__ in ['tuple', 'list']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_data = input_data[0]        # do not allow x = x[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = input_data                                                   # todo (maksym) better representation of the input data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #fit_box_size = param['fit_box_size']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_download_folder = param['input_download_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_dir = os.path.join(data_dir, input_download_folder)      # todo (maksym) download_folder = source_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        pdb_path = os.path.join(pdb_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_pdb = prody.parsePDB(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_header = prody.parsePDBHeader(pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_lig_dir = os.path.join(data_dir, output_folder, receptor)  # todo(maksym) datadir is config.data_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(output_lig_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chem in parsed_header['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligands.append([chem.chain, str(chem.resnum), chem.resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig = parsed_pdb.select('chain {} resnum {}'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                resid = lig.getHierView().iterResidues().next().getResindex()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                resid = str(resid)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_lig = lig.select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = heavy_lig.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_coord =heavy_lig.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                #max_size_on_axis = max(heavy_coord.max(axis=0) - heavy_coord.min(axis=0))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                #Changing max_size_on_axis to max pairwise distance between coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                max_size_on_axis = max(scipy.spatial.distance.pdist(heavy_coord).tolist())123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                lig_name = '_'.join([receptor,chain,resnum,resname,'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(output_lig_dir, lig_name), lig)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                record = [receptor, chain, resnum, resname, resid, heavy_atom, max_size_on_axis, 1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                record =  [receptor, chain, resnum, resname, 0, 0, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print(e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception(str(e))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef split_receptor(bucket,table_idx, param, datum):         # todo (maksym) param = params;123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:                                             # todo (maksym) datum = pdb_name123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        if type(datum).__name__ in ['tuple','list']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            datum = datum[0]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor = datum                                                                        # todo receptor = pdb_name !!!!!123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_download_folder = param['input_download_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_pdb_dir = os.path.join(data_dir,input_download_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_pdb_path = os.path.join(input_pdb_dir, receptor+'.pdb')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_pdb = prody.parsePDB(input_pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_header = prody.parsePDBHeader(input_pdb_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_rec_dir = os.path.join(data_dir, output_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(output_rec_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ligands = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chem in parsed_header['chemicals']:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            chain, resnum, resname = chem.chain, chem.resnum, chem.resname123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            ligands.append([chain, str(resnum), resname])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for chain, resnum, resname in ligands:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = parsed_pdb.select('not (chain {} resnum {})'.format(chain, resnum))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec = rec.select('not water')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                heavy_atom = rec.select('not hydrogen').numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                prody.writePDB(os.path.join(output_rec_dir, rec_name), rec)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                record = [receptor, chain, resnum, resname, heavy_atom, parsed_header['experiment'], parsed_header['resolution'] , 1 , 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                record = [receptor, chain, resnum, resname, 0, 0, 0, 0, str(e)]      # datum = failure_message123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                print(records)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                db.insert(table_idx, records, bucket=bucket) 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # TODO: (maksym) I believe this is controllable with logging123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print(e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        raise Exception(str(e))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef reorder(bucket, table_idx, param, input_data):                                                      # todo(maksym) smina_reorder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_folder = param['input_ligand_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_folder = param['input_receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(param['smina_param'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_dir = os.path.join(data_dir, output_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(out_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_name = '_'.join(input_data + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_path = os.path.join(out_dir, out_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_dir = os.path.join(data_dir, input_lig_folder, receptor)       # lig_dir = input_lig_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join(input_data + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_path = os.path.join(input_lig_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_dir = os.path.join(data_dir, input_rec_folder, receptor)      # rec_dir = input_rec_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join(input_data + ['receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_path = os.path.join(input_rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'receptor': input_rec_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'ligand': input_lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'autobox_ligand':input_lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'out':out_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)                                       # todo(maksym) smina_cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.parsePDB(out_path)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef smina_dock(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Use smina to docking lignad, 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    ligand can be identified by input_data, take the ligand and receptor123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    from input_ligand_folder and input_receptor_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    docking result will be saved to ouptut_folder123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Docking parameter will be parsed from smina_param123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: id for dock table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'output_folder': '...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'input_lignad_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'input_receptor_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'smina_param':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'args': [],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'kwargs' : {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            'autobox_add':12,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            'num_modes':400,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            'exhaustiveness':64,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            'scoring':'vinardo',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                            'cpu':1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    },123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ...123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: list123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    [receptor, chain, resnum, resname]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = param['output_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        output_folder = '{}_{}'.format(table_idx, output_folder)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_folder = param['input_ligand_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_folder = param['input_receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm = smina_param()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        smina_pm.param_load(param['smina_param'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_dir = os.path.join(data_dir, output_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        _makedir(out_dir)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_name = '_'.join(input_data + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        out_path = os.path.join(out_dir, out_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_dir = os.path.join(data_dir, input_lig_folder, receptor)    # lig_dir = input_lig_dir123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join(input_data + ['ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_lig_path = os.path.join(input_lig_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_dir = os.path.join(data_dir, input_rec_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join(input_data + ['receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_path = os.path.join(input_rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        kw = {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'receptor': input_rec_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'ligand': input_lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'autobox_ligand':input_lig_path,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            'out':out_path123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cmd = smina_pm.make_command(**kw)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print cmd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cl.wait()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        prody.parsePDB(out_path)                                                                    # todo (maksym) we can even do more123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [1, 'success']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef overlap(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Calculate overlap ratio and insert the result into database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    The overlap ratio meansure how many atoms from ligand_A are123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    close to the atoms from ligand_B123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx:  id for overlap table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'input_docked_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'input_crystal_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                'overlap_param':123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'clash_cutoff_A':'...'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'clash_size_cutoff':'...'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                ...123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: list  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    [receptor, chain, resnum ,resname] 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo (MAKSYM) overlap = per_atom_rmsd_with_cutoff123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_folder = param['input_docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_folder = param['input_crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        overlap_pm = param['overlap_param']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        clash_cutoff_A = overlap_pm['clash_cutoff_A']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_dir = os.path.join(data_dir, input_docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_path = os.path.join(input_docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_dir = os.path.join(data_dir, input_crystal_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_path = os.path.join(input_crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(input_docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coords = prody.parsePDB(input_crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # todo (maksym) next scripts have a specific way to use words coord and coords123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        expanded_docked = np.expand_dims(docked_coords, -2) #1123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        diff = expanded_docked - crystal_coords #2123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance = np.sqrt(np.sum(np.power(diff, 2), axis=-1))   # 3123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        all_clash = (distance < clash_cutoff_A).astype(float)  # 4123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        atom_clash = (np.sum(all_clash, axis=-1) > 0).astype(float) # 5123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        position_clash_ratio = np.mean(atom_clash, axis=-1) # 6123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # todo (maksym) 1-6 in one line123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, ratio in enumerate(position_clash_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            records.append(input_data + [i + 1, ratio, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef rmsd(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Calculate rmsd and insert the result into database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            table_idx: int, id for native contact table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            param: dict, parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'input_docked_foler':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'input_crystal_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            input_data: list  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    [receptor, chain, resnum ,resname] 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_folder = param['input_docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_folder = param['input_crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_dir = os.path.join(data_dir,input_docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_path = os.path.join(input_docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_dir = os.path.join(data_dir, input_crystal_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_path = os.path.join(input_crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = prody.parsePDB(input_docked_path).getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = prody.parsePDB(input_crystal_path).getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rmsd = np.sqrt(np.mean(np.sum(np.square(docked_coords - crystal_coord), axis=1), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        # todo (maksym) RMSDs not rmsd123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i, rd in enumerate(rmsd):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            records.append(input_data + [i + 1, rd, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [1, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef native_contact(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Calculate native contact and insert the result into database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: int, id for native contact table123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict, parameters123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'input_docked_foler':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'input_crystal_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'input_receptor_folder':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'distance_threshold':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: list  123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                [receptor, chain, resnum ,resname] 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        receptor, chain, resnum, resname = input_data123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_folder = param['input_docked_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_folder = param['input_crystal_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_folder = param['input_receptor_folder']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        distance_threshold = param['distance_threshold']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_name = '_'.join([receptor, chain, resnum, resname, 'ligand']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_name = '_'.join([receptor, chain, resnum, resname, 'receptor']) + '.pdb'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_dir = os.path.join(data_dir, input_docked_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_docked_path = os.path.join(input_docked_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_dir = os.path.join(data_dir, input_crystal_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_crystal_path = os.path.join(input_crystal_dir, lig_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_dir = os.path.join(data_dir, input_rec_folder, receptor)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_rec_path = os.path.join(input_rec_dir, rec_name)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_docked =  prody.parsePDB(input_docked_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_crystal = prody.parsePDB(input_crystal_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parsed_rec = prody.parsePDB(input_rec_path).select('not hydrogen')123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_atom_num = parsed_crystal.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_atom_num = parsed_docked.numAtoms()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        assert cry_atom_num == lig_atom_num123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_coords = parsed_docked.getCoordsets()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        crystal_coord = parsed_crystal.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        rec_coord = parsed_rec.getCoords()123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_crystal_coord = np.expand_dims(crystal_coord, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_diff = exp_crystal_coord - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_distance = np.sqrt(np.sum(np.square(cry_diff), axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exp_docked_coords = np.expand_dims(docked_coords, -2)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_diff = exp_docked_coords - rec_coord123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        docked_distance = np.sqrt(np.sum(np.square(docked_diff),axis=-1))123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        cry_contact = (cry_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        num_contact = np.sum(cry_contact).astype(float)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        lig_contact = (docked_distance < distance_threshold).astype(int)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        contact_ratio = np.sum(cry_contact * lig_contact, axis=(-1,-2)) / num_contact123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for i , nt in enumerate(contact_ratio):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            records.append(input_data + [i + 1, nt, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        record = input_data + [0, 0, 0, str(e)]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [record]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef binding_affinity(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo(maksym) generalize this function into from_txt_into_database_column123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Parse binding affintiy from the bindingdb, bindmoad or pdbbind.123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: int123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'bind_param':{123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'index':'...',123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'parse_func':'...'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bind_param = param['bind_param']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        bind_index = bind_param['index']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parse_func = bind_param['parse_func'] 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        parse_func = parse_bind_func[parse_func]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #error happening at parse_bind_func123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        PDB_bind = parse_func(bind_index)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = [[PDB_bind.pdb_names[i].upper(), PDB_bind.ligand_names[i],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 PDB_bind.log_affinities[i], PDB_bind.normalized_affinities[i],123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 PDB_bind.states[i], PDB_bind.comments[i]]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                 for i in range(len(PDB_bind.pdb_names))]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        #print('Records', records)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print('Records', records)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print ('Error occured', e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFdef exclusion(bucket, table_idx, param, input_data):123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    # todo(maksym) generalize this function into from_txt_into_database_column123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Parse exclude ligand and record them into database123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Args:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        table_idx: int 123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        param: dict123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                {123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    'ex_param':{123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                        'index':'...'123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    },    123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                    ...123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                }123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF                123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        input_data: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    Returns: None123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    '''123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    try:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        ex_param = param['ex_param']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        exclusion_index = ex_param['index']123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        with open(exclusion_index) as fin:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            exclusion_receptor = [x.strip().split('/')[-1].upper() for x in fin.readlines()]123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        records = []123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        for ex_rec in exclusion_receptor:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF            records.append([ex_rec, 1, 'success'])123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        db.insert(table_idx, records, bucket=bucket)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    except Exception as e:123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF        print (e)123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF123343DJNBFHJBJNKFJNBHDRFBNJKDJUNFDatabaseAction={123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'local_qm9_load':local_qm9_load,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'insert_column':insert_column,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'download':download,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'split_ligand':split_ligand,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'split_receptor':split_receptor,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'reorder':reorder,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'smina_dock':smina_dock,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'overlap':overlap,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'rmsd':rmsd,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'native_contact':native_contact,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'binding_affinity':binding_affinity,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'local_csd_load':local_csd_load,123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF    'exclusion':exclusion123343DJNBFHJBJNKFJNBHDRFBNJKDJUNF}